
GARAGE_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000ac4  00000b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  000012a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da7  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c4  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000786  00000000  00000000  00002513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a0  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000747  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 03 	call	0x71c	; 0x71c <main>
  8a:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin>:
 */ 
#include <avr/io.h>
#define  F_CPU  8000000Ul
void dio_set_pin(char port,char pin,char dir)
{
	switch (port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <dio_set_pin+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <dio_set_pin+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <dio_set_pin+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <dio_set_pin+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <dio_set_pin+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <dio_set_pin+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <dio_set_pin+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <dio_set_pin+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <dio_set_pin+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <dio_set_pin+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <dio_set_pin+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <dio_set_pin+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <dio_set_pin+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <dio_set_pin+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <dio_set_pin+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <dio_set_pin+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <dio_set_pin+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <dio_set_pin+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <dio_set_pin+0xe8>
	{
		case 'A':
			case 'a':
			if (dir ==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <dio_set_pin+0x58>
			{
			DDRA|=(1<<pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <dio_set_pin+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <dio_set_pin+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
	else
	{
	DDRA&=(~(1<<pin));	
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
	}break;
	
	case 'B':
	case 'b':
	if (dir ==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <dio_set_pin+0x92>
	{
		DDRB|=(1<<pin);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <dio_set_pin+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <dio_set_pin+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pin));
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <dio_set_pin+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <dio_set_pin+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
	}break;

case 'C':
case 'c':
if (dir ==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <dio_set_pin+0xcc>
{
	DDRC|=(1<<pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_set_pin+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <dio_set_pin+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
}
else
{
	DDRC&=(~(1<<pin));
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <dio_set_pin+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <dio_set_pin+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
}break;
	
	case 'D':
	case 'd':
	if (dir ==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <dio_set_pin+0x106>
	{
		DDRD|=(1<<pin);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <dio_set_pin+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <dio_set_pin+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pin));
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <dio_set_pin+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <dio_set_pin+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <dio_write_pin>:
	break;
}
	}
	void dio_write_pin(char port,char pin,char val)
	{
		switch(port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <dio_write_pin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <dio_write_pin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <dio_write_pin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <dio_write_pin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <dio_write_pin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <dio_write_pin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <dio_write_pin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <dio_write_pin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <dio_write_pin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <dio_write_pin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <dio_write_pin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <dio_write_pin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <dio_write_pin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <dio_write_pin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <dio_write_pin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <dio_write_pin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <dio_write_pin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <dio_write_pin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <dio_write_pin+0xe8>
	{
		case  'A':
		case 'a':
		if (val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <dio_write_pin+0x58>
		{
		PORTA=PORTA|(1<<pin);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <dio_write_pin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <dio_write_pin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
	else
	{
		PORTA=PORTA & (~(1<<pin));
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <dio_write_pin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <dio_write_pin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
	}break;
	case  'B':
	case 'b':
	if (val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <dio_write_pin+0x92>
	{
		PORTB=PORTB|(1<<pin);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <dio_write_pin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <dio_write_pin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
	}
	else
	{
		PORTB=PORTB & (~(1<<pin));
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <dio_write_pin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <dio_write_pin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
	}break;
	case 'C':
	case 'c':
	if (val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <dio_write_pin+0xcc>
	{
		PORTC =PORTC |(1<<pin);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <dio_write_pin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <dio_write_pin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
	}
	else
	{
		PORTC =PORTC  & (~(1<<pin));
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <dio_write_pin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <dio_write_pin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
	}break;
	case 'D':
	case 'd':
	if (val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <dio_write_pin+0x106>
	{
		PORTD =PORTD |(1<<pin);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <dio_write_pin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <dio_write_pin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
	}
	else
	{
		PORTD =PORTD  & (~(1<<pin));
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <dio_write_pin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <dio_write_pin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <dio_read_pin>:
	}	
	}
		unsigned char dio_read_pin(	unsigned char port,	unsigned char pin)
		{
		unsigned char val ;
		switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	b1 f1       	breq	.+108    	; 0x346 <dio_read_pin+0x70>
 2da:	85 34       	cpi	r24, 0x45	; 69
 2dc:	38 f4       	brcc	.+14     	; 0x2ec <dio_read_pin+0x16>
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	e1 f0       	breq	.+56     	; 0x31a <dio_read_pin+0x44>
 2e2:	83 34       	cpi	r24, 0x43	; 67
 2e4:	28 f5       	brcc	.+74     	; 0x330 <dio_read_pin+0x5a>
 2e6:	81 34       	cpi	r24, 0x41	; 65
 2e8:	c1 f5       	brne	.+112    	; 0x35a <dio_read_pin+0x84>
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <dio_read_pin+0x2e>
 2ec:	82 36       	cpi	r24, 0x62	; 98
 2ee:	a9 f0       	breq	.+42     	; 0x31a <dio_read_pin+0x44>
 2f0:	83 36       	cpi	r24, 0x63	; 99
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <dio_read_pin+0x24>
 2f4:	81 36       	cpi	r24, 0x61	; 97
 2f6:	89 f5       	brne	.+98     	; 0x35a <dio_read_pin+0x84>
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <dio_read_pin+0x2e>
 2fa:	83 36       	cpi	r24, 0x63	; 99
 2fc:	c9 f0       	breq	.+50     	; 0x330 <dio_read_pin+0x5a>
 2fe:	84 36       	cpi	r24, 0x64	; 100
 300:	61 f5       	brne	.+88     	; 0x35a <dio_read_pin+0x84>
 302:	21 c0       	rjmp	.+66     	; 0x346 <dio_read_pin+0x70>
		{
		case 'A':
		case 'a':	
		val =((PINA>>pin)&1);
 304:	29 b3       	in	r18, 0x19	; 25
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	c9 01       	movw	r24, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_read_pin+0x3a>
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <dio_read_pin+0x36>
 314:	98 2f       	mov	r25, r24
 316:	91 70       	andi	r25, 0x01	; 1
		break;
 318:	20 c0       	rjmp	.+64     	; 0x35a <dio_read_pin+0x84>
		case  'B':
		case 'b':
		val =((PINB>>pin)&1);
 31a:	26 b3       	in	r18, 0x16	; 22
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	c9 01       	movw	r24, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <dio_read_pin+0x50>
 322:	95 95       	asr	r25
 324:	87 95       	ror	r24
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <dio_read_pin+0x4c>
 32a:	98 2f       	mov	r25, r24
 32c:	91 70       	andi	r25, 0x01	; 1
			break;;
 32e:	15 c0       	rjmp	.+42     	; 0x35a <dio_read_pin+0x84>
		case  'C':
		case 'c':
		val =((PINC>>pin)&1);
 330:	23 b3       	in	r18, 0x13	; 19
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	c9 01       	movw	r24, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <dio_read_pin+0x66>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <dio_read_pin+0x62>
 340:	98 2f       	mov	r25, r24
 342:	91 70       	andi	r25, 0x01	; 1
			break;
 344:	0a c0       	rjmp	.+20     	; 0x35a <dio_read_pin+0x84>
			case  'D':
			case 'd':
			val =((PIND>>pin)&1);
 346:	20 b3       	in	r18, 0x10	; 16
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	c9 01       	movw	r24, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <dio_read_pin+0x7c>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <dio_read_pin+0x78>
 356:	98 2f       	mov	r25, r24
 358:	91 70       	andi	r25, 0x01	; 1
			default:
			break;
		
		}
		return val;
				}		
 35a:	89 2f       	mov	r24, r25
 35c:	08 95       	ret

0000035e <dio_toggle_pin>:
				void dio_toggle_pin(char port,char pin)
				{
					switch (port)
 35e:	84 34       	cpi	r24, 0x44	; 68
 360:	09 f4       	brne	.+2      	; 0x364 <dio_toggle_pin+0x6>
 362:	3d c0       	rjmp	.+122    	; 0x3de <dio_toggle_pin+0x80>
 364:	85 34       	cpi	r24, 0x45	; 69
 366:	40 f4       	brcc	.+16     	; 0x378 <dio_toggle_pin+0x1a>
 368:	82 34       	cpi	r24, 0x42	; 66
 36a:	f9 f0       	breq	.+62     	; 0x3aa <dio_toggle_pin+0x4c>
 36c:	83 34       	cpi	r24, 0x43	; 67
 36e:	50 f5       	brcc	.+84     	; 0x3c4 <dio_toggle_pin+0x66>
 370:	81 34       	cpi	r24, 0x41	; 65
 372:	09 f0       	breq	.+2      	; 0x376 <dio_toggle_pin+0x18>
 374:	40 c0       	rjmp	.+128    	; 0x3f6 <dio_toggle_pin+0x98>
 376:	0c c0       	rjmp	.+24     	; 0x390 <dio_toggle_pin+0x32>
 378:	82 36       	cpi	r24, 0x62	; 98
 37a:	b9 f0       	breq	.+46     	; 0x3aa <dio_toggle_pin+0x4c>
 37c:	83 36       	cpi	r24, 0x63	; 99
 37e:	18 f4       	brcc	.+6      	; 0x386 <dio_toggle_pin+0x28>
 380:	81 36       	cpi	r24, 0x61	; 97
 382:	c9 f5       	brne	.+114    	; 0x3f6 <dio_toggle_pin+0x98>
 384:	05 c0       	rjmp	.+10     	; 0x390 <dio_toggle_pin+0x32>
 386:	83 36       	cpi	r24, 0x63	; 99
 388:	e9 f0       	breq	.+58     	; 0x3c4 <dio_toggle_pin+0x66>
 38a:	84 36       	cpi	r24, 0x64	; 100
 38c:	a1 f5       	brne	.+104    	; 0x3f6 <dio_toggle_pin+0x98>
 38e:	27 c0       	rjmp	.+78     	; 0x3de <dio_toggle_pin+0x80>
					{
					case 'A':
					case 'a':
					PORTA=PORTA^(1<<pin);
 390:	2b b3       	in	r18, 0x1b	; 27
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	ac 01       	movw	r20, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <dio_toggle_pin+0x40>
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <dio_toggle_pin+0x3c>
 3a2:	ba 01       	movw	r22, r20
 3a4:	62 27       	eor	r22, r18
 3a6:	6b bb       	out	0x1b, r22	; 27
					break;
 3a8:	08 95       	ret
					case 'b':
					case 'B':
					PORTB=PORTB^(1<<pin);
 3aa:	28 b3       	in	r18, 0x18	; 24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ac 01       	movw	r20, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_toggle_pin+0x5a>
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_toggle_pin+0x56>
 3bc:	ba 01       	movw	r22, r20
 3be:	62 27       	eor	r22, r18
 3c0:	68 bb       	out	0x18, r22	; 24
					break;
 3c2:	08 95       	ret
					case 'C':
					case 'c':
					PORTC=PORTC^(1<<pin);
 3c4:	25 b3       	in	r18, 0x15	; 21
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ac 01       	movw	r20, r24
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <dio_toggle_pin+0x74>
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <dio_toggle_pin+0x70>
 3d6:	ba 01       	movw	r22, r20
 3d8:	62 27       	eor	r22, r18
 3da:	65 bb       	out	0x15, r22	; 21
					break;
 3dc:	08 95       	ret
					case  'D':
					case 'd':
					PORTD=PORTD^(1<<pin);
 3de:	22 b3       	in	r18, 0x12	; 18
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	ac 01       	movw	r20, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <dio_toggle_pin+0x8e>
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <dio_toggle_pin+0x8a>
 3f0:	ba 01       	movw	r22, r20
 3f2:	62 27       	eor	r22, r18
 3f4:	62 bb       	out	0x12, r22	; 18
 3f6:	08 95       	ret

000003f8 <dio_set_port>:
					break;
					}
			}
			void dio_set_port(unsigned char port,unsigned char dir)
			{
				switch(port)
 3f8:	84 34       	cpi	r24, 0x44	; 68
 3fa:	d9 f0       	breq	.+54     	; 0x432 <dio_set_port+0x3a>
 3fc:	85 34       	cpi	r24, 0x45	; 69
 3fe:	38 f4       	brcc	.+14     	; 0x40e <dio_set_port+0x16>
 400:	82 34       	cpi	r24, 0x42	; 66
 402:	99 f0       	breq	.+38     	; 0x42a <dio_set_port+0x32>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	98 f4       	brcc	.+38     	; 0x42e <dio_set_port+0x36>
 408:	81 34       	cpi	r24, 0x41	; 65
 40a:	a1 f4       	brne	.+40     	; 0x434 <dio_set_port+0x3c>
 40c:	0c c0       	rjmp	.+24     	; 0x426 <dio_set_port+0x2e>
 40e:	82 36       	cpi	r24, 0x62	; 98
 410:	61 f0       	breq	.+24     	; 0x42a <dio_set_port+0x32>
 412:	83 36       	cpi	r24, 0x63	; 99
 414:	18 f4       	brcc	.+6      	; 0x41c <dio_set_port+0x24>
 416:	81 36       	cpi	r24, 0x61	; 97
 418:	69 f4       	brne	.+26     	; 0x434 <dio_set_port+0x3c>
 41a:	05 c0       	rjmp	.+10     	; 0x426 <dio_set_port+0x2e>
 41c:	83 36       	cpi	r24, 0x63	; 99
 41e:	39 f0       	breq	.+14     	; 0x42e <dio_set_port+0x36>
 420:	84 36       	cpi	r24, 0x64	; 100
 422:	41 f4       	brne	.+16     	; 0x434 <dio_set_port+0x3c>
 424:	06 c0       	rjmp	.+12     	; 0x432 <dio_set_port+0x3a>
				{
				case 'A':
				case 'a':
					DDRA=dir;
 426:	6a bb       	out	0x1a, r22	; 26
	break;
 428:	08 95       	ret
	case 'b':
	case 'B':
	DDRB=dir;
 42a:	67 bb       	out	0x17, r22	; 23
	break;
 42c:	08 95       	ret
	case 'C':
	case 'c':
	DDRC=dir;
 42e:	64 bb       	out	0x14, r22	; 20
	break;
 430:	08 95       	ret
	case  'D':
	case 'd':
	DDRD=dir;
 432:	61 bb       	out	0x11, r22	; 17
 434:	08 95       	ret

00000436 <dio_write_port>:
	
	}
}
void dio_write_port(char port,unsigned char val)
{
	switch(port)
 436:	84 34       	cpi	r24, 0x44	; 68
 438:	d9 f0       	breq	.+54     	; 0x470 <dio_write_port+0x3a>
 43a:	85 34       	cpi	r24, 0x45	; 69
 43c:	38 f4       	brcc	.+14     	; 0x44c <dio_write_port+0x16>
 43e:	82 34       	cpi	r24, 0x42	; 66
 440:	99 f0       	breq	.+38     	; 0x468 <dio_write_port+0x32>
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	98 f4       	brcc	.+38     	; 0x46c <dio_write_port+0x36>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	a1 f4       	brne	.+40     	; 0x472 <dio_write_port+0x3c>
 44a:	0c c0       	rjmp	.+24     	; 0x464 <dio_write_port+0x2e>
 44c:	82 36       	cpi	r24, 0x62	; 98
 44e:	61 f0       	breq	.+24     	; 0x468 <dio_write_port+0x32>
 450:	83 36       	cpi	r24, 0x63	; 99
 452:	18 f4       	brcc	.+6      	; 0x45a <dio_write_port+0x24>
 454:	81 36       	cpi	r24, 0x61	; 97
 456:	69 f4       	brne	.+26     	; 0x472 <dio_write_port+0x3c>
 458:	05 c0       	rjmp	.+10     	; 0x464 <dio_write_port+0x2e>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	39 f0       	breq	.+14     	; 0x46c <dio_write_port+0x36>
 45e:	84 36       	cpi	r24, 0x64	; 100
 460:	41 f4       	brne	.+16     	; 0x472 <dio_write_port+0x3c>
 462:	06 c0       	rjmp	.+12     	; 0x470 <dio_write_port+0x3a>
	{
	case 'A':
	case 'a':
	PORTA=val;	
 464:	6b bb       	out	0x1b, r22	; 27
	break;
 466:	08 95       	ret
	case 'B':
	case 'b':
	PORTB=val;
 468:	68 bb       	out	0x18, r22	; 24
	break;
 46a:	08 95       	ret
	case 'C':
	case 'c':
	PORTC=val;
 46c:	65 bb       	out	0x15, r22	; 21
	break;
 46e:	08 95       	ret
	case 'D':
	case 'd':
	PORTD=val;
 470:	62 bb       	out	0x12, r22	; 18
 472:	08 95       	ret

00000474 <dio_read_port>:
	}
}
unsigned char dio_read_port(unsigned char port)
{
	unsigned char val;
	switch (port)
 474:	84 34       	cpi	r24, 0x44	; 68
 476:	d9 f0       	breq	.+54     	; 0x4ae <dio_read_port+0x3a>
 478:	85 34       	cpi	r24, 0x45	; 69
 47a:	38 f4       	brcc	.+14     	; 0x48a <dio_read_port+0x16>
 47c:	82 34       	cpi	r24, 0x42	; 66
 47e:	99 f0       	breq	.+38     	; 0x4a6 <dio_read_port+0x32>
 480:	83 34       	cpi	r24, 0x43	; 67
 482:	98 f4       	brcc	.+38     	; 0x4aa <dio_read_port+0x36>
 484:	81 34       	cpi	r24, 0x41	; 65
 486:	a1 f4       	brne	.+40     	; 0x4b0 <dio_read_port+0x3c>
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <dio_read_port+0x2e>
 48a:	82 36       	cpi	r24, 0x62	; 98
 48c:	61 f0       	breq	.+24     	; 0x4a6 <dio_read_port+0x32>
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	18 f4       	brcc	.+6      	; 0x498 <dio_read_port+0x24>
 492:	81 36       	cpi	r24, 0x61	; 97
 494:	69 f4       	brne	.+26     	; 0x4b0 <dio_read_port+0x3c>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <dio_read_port+0x2e>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	39 f0       	breq	.+14     	; 0x4aa <dio_read_port+0x36>
 49c:	84 36       	cpi	r24, 0x64	; 100
 49e:	41 f4       	brne	.+16     	; 0x4b0 <dio_read_port+0x3c>
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <dio_read_port+0x3a>
	{
	case 'a' :
	case 'A' :
	val=PINA;
 4a2:	89 b3       	in	r24, 0x19	; 25
	break;
 4a4:	08 95       	ret
	case 'B' :
	case 'b' :
	val=PINB;
 4a6:	86 b3       	in	r24, 0x16	; 22
	break;
 4a8:	08 95       	ret
	case 'C' :
	case 'c' :
	val=PINC;
 4aa:	83 b3       	in	r24, 0x13	; 19
	break;
 4ac:	08 95       	ret
	case 'D' :
	case 'd' :
	val=PIND;
 4ae:	80 b3       	in	r24, 0x10	; 16
	default:
	break;
	
	}
	
}
 4b0:	08 95       	ret

000004b2 <dio_toggle_port>:
void dio_toggle_port(char port)
{
		unsigned char val;
		switch (port)
 4b2:	84 34       	cpi	r24, 0x44	; 68
 4b4:	09 f1       	breq	.+66     	; 0x4f8 <dio_toggle_port+0x46>
 4b6:	85 34       	cpi	r24, 0x45	; 69
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <dio_toggle_port+0x16>
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <dio_toggle_port+0x36>
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	b8 f4       	brcc	.+46     	; 0x4f0 <dio_toggle_port+0x3e>
 4c2:	81 34       	cpi	r24, 0x41	; 65
 4c4:	e1 f4       	brne	.+56     	; 0x4fe <dio_toggle_port+0x4c>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <dio_toggle_port+0x2e>
 4c8:	82 36       	cpi	r24, 0x62	; 98
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <dio_toggle_port+0x36>
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <dio_toggle_port+0x24>
 4d0:	81 36       	cpi	r24, 0x61	; 97
 4d2:	a9 f4       	brne	.+42     	; 0x4fe <dio_toggle_port+0x4c>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <dio_toggle_port+0x2e>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <dio_toggle_port+0x3e>
 4da:	84 36       	cpi	r24, 0x64	; 100
 4dc:	81 f4       	brne	.+32     	; 0x4fe <dio_toggle_port+0x4c>
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <dio_toggle_port+0x46>
		{
			case 'a' :
			case 'A' :
			PORTA=~PORTA;
 4e0:	8b b3       	in	r24, 0x1b	; 27
 4e2:	80 95       	com	r24
 4e4:	8b bb       	out	0x1b, r24	; 27
			break;
 4e6:	08 95       	ret
			case 'B' :
			case 'b' :
				PORTB=~PORTB;
 4e8:	88 b3       	in	r24, 0x18	; 24
 4ea:	80 95       	com	r24
 4ec:	88 bb       	out	0x18, r24	; 24
			break;
 4ee:	08 95       	ret
			case 'C' :
			case 'c' :
				PORTC=~PORTC;
 4f0:	85 b3       	in	r24, 0x15	; 21
 4f2:	80 95       	com	r24
 4f4:	85 bb       	out	0x15, r24	; 21
			break;
 4f6:	08 95       	ret
			case 'D' :
			case 'd' :
		PORTD=~PORTD;
 4f8:	82 b3       	in	r24, 0x12	; 18
 4fa:	80 95       	com	r24
 4fc:	82 bb       	out	0x12, r24	; 18
 4fe:	08 95       	ret

00000500 <dio_pull_up_en>:
		}
}
void dio_pull_up_en (char port,char pin ,char en)
{
	
	switch(port)
 500:	84 34       	cpi	r24, 0x44	; 68
 502:	09 f4       	brne	.+2      	; 0x506 <dio_pull_up_en+0x6>
 504:	80 c0       	rjmp	.+256    	; 0x606 <dio_pull_up_en+0x106>
 506:	85 34       	cpi	r24, 0x45	; 69
 508:	48 f4       	brcc	.+18     	; 0x51c <dio_pull_up_en+0x1c>
 50a:	82 34       	cpi	r24, 0x42	; 66
 50c:	c1 f1       	breq	.+112    	; 0x57e <dio_pull_up_en+0x7e>
 50e:	83 34       	cpi	r24, 0x43	; 67
 510:	08 f0       	brcs	.+2      	; 0x514 <dio_pull_up_en+0x14>
 512:	57 c0       	rjmp	.+174    	; 0x5c2 <dio_pull_up_en+0xc2>
 514:	81 34       	cpi	r24, 0x41	; 65
 516:	09 f0       	breq	.+2      	; 0x51a <dio_pull_up_en+0x1a>
 518:	97 c0       	rjmp	.+302    	; 0x648 <dio_pull_up_en+0x148>
 51a:	0f c0       	rjmp	.+30     	; 0x53a <dio_pull_up_en+0x3a>
 51c:	82 36       	cpi	r24, 0x62	; 98
 51e:	79 f1       	breq	.+94     	; 0x57e <dio_pull_up_en+0x7e>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	20 f4       	brcc	.+8      	; 0x52c <dio_pull_up_en+0x2c>
 524:	81 36       	cpi	r24, 0x61	; 97
 526:	09 f0       	breq	.+2      	; 0x52a <dio_pull_up_en+0x2a>
 528:	8f c0       	rjmp	.+286    	; 0x648 <dio_pull_up_en+0x148>
 52a:	07 c0       	rjmp	.+14     	; 0x53a <dio_pull_up_en+0x3a>
 52c:	83 36       	cpi	r24, 0x63	; 99
 52e:	09 f4       	brne	.+2      	; 0x532 <dio_pull_up_en+0x32>
 530:	48 c0       	rjmp	.+144    	; 0x5c2 <dio_pull_up_en+0xc2>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	09 f0       	breq	.+2      	; 0x538 <dio_pull_up_en+0x38>
 536:	88 c0       	rjmp	.+272    	; 0x648 <dio_pull_up_en+0x148>
 538:	66 c0       	rjmp	.+204    	; 0x606 <dio_pull_up_en+0x106>
{
	case 'a':
	case 'A':
if (en==1)
 53a:	41 30       	cpi	r20, 0x01	; 1
 53c:	91 f4       	brne	.+36     	; 0x562 <dio_pull_up_en+0x62>
{
PORTA=PORTA|(1<<pin);
 53e:	2b b3       	in	r18, 0x1b	; 27
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <dio_pull_up_en+0x4c>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <dio_pull_up_en+0x48>
 550:	ba 01       	movw	r22, r20
 552:	82 2f       	mov	r24, r18
 554:	84 2b       	or	r24, r20
 556:	8b bb       	out	0x1b, r24	; 27
DDRA=DDRA&(~(1<<pin));
 558:	8a b3       	in	r24, 0x1a	; 26
 55a:	60 95       	com	r22
 55c:	68 23       	and	r22, r24
 55e:	6a bb       	out	0x1a, r22	; 26
 560:	08 95       	ret
}
else
{
	PORTA=PORTA&(~(1<<pin));
 562:	2b b3       	in	r18, 0x1b	; 27
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	ac 01       	movw	r20, r24
 56a:	02 c0       	rjmp	.+4      	; 0x570 <dio_pull_up_en+0x70>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <dio_pull_up_en+0x6c>
 574:	ba 01       	movw	r22, r20
 576:	60 95       	com	r22
 578:	62 23       	and	r22, r18
 57a:	6b bb       	out	0x1b, r22	; 27
 57c:	08 95       	ret
}break;
case 'b':
case 'B':
if (en==1)
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	91 f4       	brne	.+36     	; 0x5a6 <dio_pull_up_en+0xa6>
{
	PORTB=PORTB|(1<<pin);
 582:	28 b3       	in	r18, 0x18	; 24
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	ac 01       	movw	r20, r24
 58a:	02 c0       	rjmp	.+4      	; 0x590 <dio_pull_up_en+0x90>
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <dio_pull_up_en+0x8c>
 594:	ba 01       	movw	r22, r20
 596:	82 2f       	mov	r24, r18
 598:	84 2b       	or	r24, r20
 59a:	88 bb       	out	0x18, r24	; 24
	DDRB=DDRB&(~(1<<pin));
 59c:	87 b3       	in	r24, 0x17	; 23
 59e:	60 95       	com	r22
 5a0:	68 23       	and	r22, r24
 5a2:	67 bb       	out	0x17, r22	; 23
 5a4:	08 95       	ret
}
else
{
	PORTB=PORTB&(~(1<<pin));
 5a6:	28 b3       	in	r18, 0x18	; 24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	ac 01       	movw	r20, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <dio_pull_up_en+0xb4>
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <dio_pull_up_en+0xb0>
 5b8:	ba 01       	movw	r22, r20
 5ba:	60 95       	com	r22
 5bc:	62 23       	and	r22, r18
 5be:	68 bb       	out	0x18, r22	; 24
 5c0:	08 95       	ret
}break;
case 'c':
case 'C':
if (en==1)
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	91 f4       	brne	.+36     	; 0x5ea <dio_pull_up_en+0xea>
{
	PORTC=PORTC|(1<<pin);
 5c6:	25 b3       	in	r18, 0x15	; 21
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	ac 01       	movw	r20, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <dio_pull_up_en+0xd4>
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <dio_pull_up_en+0xd0>
 5d8:	ba 01       	movw	r22, r20
 5da:	82 2f       	mov	r24, r18
 5dc:	84 2b       	or	r24, r20
 5de:	85 bb       	out	0x15, r24	; 21
	DDRC=DDRC&(~(1<<pin));
 5e0:	84 b3       	in	r24, 0x14	; 20
 5e2:	60 95       	com	r22
 5e4:	68 23       	and	r22, r24
 5e6:	64 bb       	out	0x14, r22	; 20
 5e8:	08 95       	ret
}
else
{
	PORTC=PORTC&(~(1<<pin));
 5ea:	25 b3       	in	r18, 0x15	; 21
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	ac 01       	movw	r20, r24
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <dio_pull_up_en+0xf8>
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <dio_pull_up_en+0xf4>
 5fc:	ba 01       	movw	r22, r20
 5fe:	60 95       	com	r22
 600:	62 23       	and	r22, r18
 602:	65 bb       	out	0x15, r22	; 21
 604:	08 95       	ret
}break;
case 'd':
case 'D':
if (en==1)
 606:	41 30       	cpi	r20, 0x01	; 1
 608:	91 f4       	brne	.+36     	; 0x62e <dio_pull_up_en+0x12e>
{
	PORTD=PORTD|(1<<pin);
 60a:	22 b3       	in	r18, 0x12	; 18
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	ac 01       	movw	r20, r24
 612:	02 c0       	rjmp	.+4      	; 0x618 <dio_pull_up_en+0x118>
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <dio_pull_up_en+0x114>
 61c:	ba 01       	movw	r22, r20
 61e:	82 2f       	mov	r24, r18
 620:	84 2b       	or	r24, r20
 622:	82 bb       	out	0x12, r24	; 18
	DDRD=DDRD&(~(1<<pin));
 624:	81 b3       	in	r24, 0x11	; 17
 626:	60 95       	com	r22
 628:	68 23       	and	r22, r24
 62a:	61 bb       	out	0x11, r22	; 17
 62c:	08 95       	ret
}
else
{
	PORTD=PORTD&(~(1<<pin));
 62e:	22 b3       	in	r18, 0x12	; 18
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <dio_pull_up_en+0x13c>
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <dio_pull_up_en+0x138>
 640:	ba 01       	movw	r22, r20
 642:	60 95       	com	r22
 644:	62 23       	and	r22, r18
 646:	62 bb       	out	0x12, r22	; 18
 648:	08 95       	ret

0000064a <dio_write_lo_level>:
break;
}
}
void dio_write_lo_level(char port,unsigned char val)
{
	val=val & 0x0f;
 64a:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
 64c:	84 34       	cpi	r24, 0x44	; 68
 64e:	51 f1       	breq	.+84     	; 0x6a4 <dio_write_lo_level+0x5a>
 650:	85 34       	cpi	r24, 0x45	; 69
 652:	38 f4       	brcc	.+14     	; 0x662 <dio_write_lo_level+0x18>
 654:	82 34       	cpi	r24, 0x42	; 66
 656:	c1 f0       	breq	.+48     	; 0x688 <dio_write_lo_level+0x3e>
 658:	83 34       	cpi	r24, 0x43	; 67
 65a:	e8 f4       	brcc	.+58     	; 0x696 <dio_write_lo_level+0x4c>
 65c:	81 34       	cpi	r24, 0x41	; 65
 65e:	41 f5       	brne	.+80     	; 0x6b0 <dio_write_lo_level+0x66>
 660:	0c c0       	rjmp	.+24     	; 0x67a <dio_write_lo_level+0x30>
 662:	82 36       	cpi	r24, 0x62	; 98
 664:	89 f0       	breq	.+34     	; 0x688 <dio_write_lo_level+0x3e>
 666:	83 36       	cpi	r24, 0x63	; 99
 668:	18 f4       	brcc	.+6      	; 0x670 <dio_write_lo_level+0x26>
 66a:	81 36       	cpi	r24, 0x61	; 97
 66c:	09 f5       	brne	.+66     	; 0x6b0 <dio_write_lo_level+0x66>
 66e:	05 c0       	rjmp	.+10     	; 0x67a <dio_write_lo_level+0x30>
 670:	83 36       	cpi	r24, 0x63	; 99
 672:	89 f0       	breq	.+34     	; 0x696 <dio_write_lo_level+0x4c>
 674:	84 36       	cpi	r24, 0x64	; 100
 676:	e1 f4       	brne	.+56     	; 0x6b0 <dio_write_lo_level+0x66>
 678:	15 c0       	rjmp	.+42     	; 0x6a4 <dio_write_lo_level+0x5a>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0xf0;
 67a:	8b b3       	in	r24, 0x1b	; 27
 67c:	80 7f       	andi	r24, 0xF0	; 240
 67e:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 680:	8b b3       	in	r24, 0x1b	; 27
 682:	68 2b       	or	r22, r24
 684:	6b bb       	out	0x1b, r22	; 27
		break;
 686:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0xf0;
 688:	88 b3       	in	r24, 0x18	; 24
 68a:	80 7f       	andi	r24, 0xF0	; 240
 68c:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 68e:	88 b3       	in	r24, 0x18	; 24
 690:	68 2b       	or	r22, r24
 692:	68 bb       	out	0x18, r22	; 24
		break;
 694:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0xf0;
 696:	85 b3       	in	r24, 0x15	; 21
 698:	80 7f       	andi	r24, 0xF0	; 240
 69a:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 69c:	85 b3       	in	r24, 0x15	; 21
 69e:	68 2b       	or	r22, r24
 6a0:	65 bb       	out	0x15, r22	; 21
		break;
 6a2:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0xf0;
 6a4:	82 b3       	in	r24, 0x12	; 18
 6a6:	80 7f       	andi	r24, 0xF0	; 240
 6a8:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 6aa:	82 b3       	in	r24, 0x12	; 18
 6ac:	68 2b       	or	r22, r24
 6ae:	62 bb       	out	0x12, r22	; 18
 6b0:	08 95       	ret

000006b2 <dio_write_hi_level>:

}
void dio_write_hi_level(char port,unsigned char val)
{
	val =val <<4;
	val=val & 0xf0;
 6b2:	62 95       	swap	r22
 6b4:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 6b6:	84 34       	cpi	r24, 0x44	; 68
 6b8:	51 f1       	breq	.+84     	; 0x70e <dio_write_hi_level+0x5c>
 6ba:	85 34       	cpi	r24, 0x45	; 69
 6bc:	38 f4       	brcc	.+14     	; 0x6cc <dio_write_hi_level+0x1a>
 6be:	82 34       	cpi	r24, 0x42	; 66
 6c0:	c1 f0       	breq	.+48     	; 0x6f2 <dio_write_hi_level+0x40>
 6c2:	83 34       	cpi	r24, 0x43	; 67
 6c4:	e8 f4       	brcc	.+58     	; 0x700 <dio_write_hi_level+0x4e>
 6c6:	81 34       	cpi	r24, 0x41	; 65
 6c8:	41 f5       	brne	.+80     	; 0x71a <dio_write_hi_level+0x68>
 6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <dio_write_hi_level+0x32>
 6cc:	82 36       	cpi	r24, 0x62	; 98
 6ce:	89 f0       	breq	.+34     	; 0x6f2 <dio_write_hi_level+0x40>
 6d0:	83 36       	cpi	r24, 0x63	; 99
 6d2:	18 f4       	brcc	.+6      	; 0x6da <dio_write_hi_level+0x28>
 6d4:	81 36       	cpi	r24, 0x61	; 97
 6d6:	09 f5       	brne	.+66     	; 0x71a <dio_write_hi_level+0x68>
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <dio_write_hi_level+0x32>
 6da:	83 36       	cpi	r24, 0x63	; 99
 6dc:	89 f0       	breq	.+34     	; 0x700 <dio_write_hi_level+0x4e>
 6de:	84 36       	cpi	r24, 0x64	; 100
 6e0:	e1 f4       	brne	.+56     	; 0x71a <dio_write_hi_level+0x68>
 6e2:	15 c0       	rjmp	.+42     	; 0x70e <dio_write_hi_level+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0x0f;
 6e4:	8b b3       	in	r24, 0x1b	; 27
 6e6:	8f 70       	andi	r24, 0x0F	; 15
 6e8:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
 6ea:	8b b3       	in	r24, 0x1b	; 27
 6ec:	68 2b       	or	r22, r24
 6ee:	6b bb       	out	0x1b, r22	; 27
		break;
 6f0:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0x0f;
 6f2:	88 b3       	in	r24, 0x18	; 24
 6f4:	8f 70       	andi	r24, 0x0F	; 15
 6f6:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
 6f8:	88 b3       	in	r24, 0x18	; 24
 6fa:	68 2b       	or	r22, r24
 6fc:	68 bb       	out	0x18, r22	; 24
		break;
 6fe:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0x0f;
 700:	85 b3       	in	r24, 0x15	; 21
 702:	8f 70       	andi	r24, 0x0F	; 15
 704:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
 706:	85 b3       	in	r24, 0x15	; 21
 708:	68 2b       	or	r22, r24
 70a:	65 bb       	out	0x15, r22	; 21
		break;
 70c:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0x0f;
 70e:	82 b3       	in	r24, 0x12	; 18
 710:	8f 70       	andi	r24, 0x0F	; 15
 712:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
 714:	82 b3       	in	r24, 0x12	; 18
 716:	68 2b       	or	r22, r24
 718:	62 bb       	out	0x12, r22	; 18
 71a:	08 95       	ret

0000071c <main>:

int main(void)
{
		
   unsigned char x='0';
   i2c_set_address(0b10100001);
 71c:	81 ea       	ldi	r24, 0xA1	; 161
 71e:	0e 94 37 04 	call	0x86e	; 0x86e <i2c_set_address>

   lcd_init();
 722:	0e 94 8b 04 	call	0x916	; 0x916 <lcd_init>
 lcd_send_cmd(disp_on_cursor_off);
 726:	8c e0       	ldi	r24, 0x0C	; 12
 728:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
	   
	   if ((x==DOOR_CLOSE))
	   {

	      lcd_move_cursor(1,2);
  	  lcd_send_string("door cls");
 72c:	0f 2e       	mov	r0, r31
 72e:	f0 e6       	ldi	r31, 0x60	; 96
 730:	ef 2e       	mov	r14, r31
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	ff 2e       	mov	r15, r31
 736:	f0 2d       	mov	r31, r0
  	  lcd_send_string("door opn");
    }
if (x=='1')
{
lcd_move_cursor(2,2);
lcd_send_string("car num=");
 738:	02 e7       	ldi	r16, 0x72	; 114
 73a:	10 e0       	ldi	r17, 0x00	; 0
	   }
	  if((x==DOOR_OPEN))
	   {
		   
  	  lcd_move_cursor(1,2);
  	  lcd_send_string("door opn");
 73c:	0f 2e       	mov	r0, r31
 73e:	f9 e6       	ldi	r31, 0x69	; 105
 740:	cf 2e       	mov	r12, r31
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	df 2e       	mov	r13, r31
 746:	f0 2d       	mov	r31, r0

   lcd_init();
 lcd_send_cmd(disp_on_cursor_off);
    while(1)
    {
       x=i2c_slave_read();
 748:	0e 94 39 04 	call	0x872	; 0x872 <i2c_slave_read>
 74c:	c8 2f       	mov	r28, r24
	   
	   if ((x==DOOR_CLOSE))
 74e:	81 32       	cpi	r24, 0x21	; 33
 750:	41 f4       	brne	.+16     	; 0x762 <main+0x46>
	   {

	      lcd_move_cursor(1,2);
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	62 e0       	ldi	r22, 0x02	; 2
 756:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
  	  lcd_send_string("door cls");
 75a:	c7 01       	movw	r24, r14
 75c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
 760:	17 c0       	rjmp	.+46     	; 0x790 <main+0x74>
	   }
	  if((x==DOOR_OPEN))
 762:	80 32       	cpi	r24, 0x20	; 32
 764:	41 f4       	brne	.+16     	; 0x776 <main+0x5a>
	   {
		   
  	  lcd_move_cursor(1,2);
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	62 e0       	ldi	r22, 0x02	; 2
 76a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
  	  lcd_send_string("door opn");
 76e:	c6 01       	movw	r24, r12
 770:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
 774:	1a c0       	rjmp	.+52     	; 0x7aa <main+0x8e>
    }
if (x=='1')
 776:	81 33       	cpi	r24, 0x31	; 49
 778:	59 f4       	brne	.+22     	; 0x790 <main+0x74>
{
lcd_move_cursor(2,2);
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
lcd_send_string("car num=");
 782:	c8 01       	movw	r24, r16
 784:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
	lcd_send_char('1');
 788:	81 e3       	ldi	r24, 0x31	; 49
 78a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
 78e:	dc cf       	rjmp	.-72     	; 0x748 <main+0x2c>
}
else if (x=='2')
 790:	c2 33       	cpi	r28, 0x32	; 50
 792:	59 f4       	brne	.+22     	; 0x7aa <main+0x8e>
{
	lcd_move_cursor(2,2);
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	62 e0       	ldi	r22, 0x02	; 2
 798:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
	lcd_send_string("car num=");
 79c:	c8 01       	movw	r24, r16
 79e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
		lcd_send_char('2');
 7a2:	82 e3       	ldi	r24, 0x32	; 50
 7a4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
 7a8:	cf cf       	rjmp	.-98     	; 0x748 <main+0x2c>
}
else if (x=='3')
 7aa:	c3 33       	cpi	r28, 0x33	; 51
 7ac:	59 f4       	brne	.+22     	; 0x7c4 <main+0xa8>
{
	lcd_move_cursor(2,2);
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
	lcd_send_string("car num=");
 7b6:	c8 01       	movw	r24, r16
 7b8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
		lcd_send_char('3');
 7bc:	83 e3       	ldi	r24, 0x33	; 51
 7be:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
 7c2:	c2 cf       	rjmp	.-124    	; 0x748 <main+0x2c>
}
else if (x=='4')
 7c4:	c4 33       	cpi	r28, 0x34	; 52
 7c6:	59 f4       	brne	.+22     	; 0x7de <main+0xc2>
{
	lcd_move_cursor(2,2);
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	62 e0       	ldi	r22, 0x02	; 2
 7cc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
	lcd_send_string("car num=");
 7d0:	c8 01       	movw	r24, r16
 7d2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
	lcd_send_char('4');
 7d6:	84 e3       	ldi	r24, 0x34	; 52
 7d8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
 7dc:	b5 cf       	rjmp	.-150    	; 0x748 <main+0x2c>
}
else if (x=='0')
 7de:	c0 33       	cpi	r28, 0x30	; 48
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <main+0xc8>
 7e2:	b2 cf       	rjmp	.-156    	; 0x748 <main+0x2c>
{
	lcd_move_cursor(2,2);
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	62 e0       	ldi	r22, 0x02	; 2
 7e8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <lcd_move_cursor>
	lcd_send_string("car num=");
 7ec:	c8 01       	movw	r24, r16
 7ee:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_send_string>
	lcd_send_char('0');
 7f2:	80 e3       	ldi	r24, 0x30	; 48
 7f4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
 7f8:	a7 cf       	rjmp	.-178    	; 0x748 <main+0x2c>

000007fa <i2c_clock_init>:
 * Created: 20/10/2023 02:04:51 م
 *  Author: handsa
 */ #include "prog init.h"
#define prescaller 1
void i2c_clock_init(unsigned long scl)
{
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
	TWBR=(unsigned char) (((F_CPU/scl)-16)/(2*prescaller));
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	72 e1       	ldi	r23, 0x12	; 18
 802:	8a e7       	ldi	r24, 0x7A	; 122
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodsi4>
 80a:	da 01       	movw	r26, r20
 80c:	c9 01       	movw	r24, r18
 80e:	40 97       	sbiw	r24, 0x10	; 16
 810:	a1 09       	sbc	r26, r1
 812:	b1 09       	sbc	r27, r1
 814:	b6 95       	lsr	r27
 816:	a7 95       	ror	r26
 818:	97 95       	ror	r25
 81a:	87 95       	ror	r24
 81c:	80 b9       	out	0x00, r24	; 0
	if (prescaller==1)
	{
	TWSR=0;
 81e:	11 b8       	out	0x01, r1	; 1
}
else if (prescaller==64)
{
	TWSR=3;
}
}
 820:	08 95       	ret

00000822 <i2c_start>:
void i2c_start(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWSTA));
 822:	84 ea       	ldi	r24, 0xA4	; 164
 824:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT)==0);
 826:	06 b6       	in	r0, 0x36	; 54
 828:	07 fe       	sbrs	r0, 7
 82a:	fd cf       	rjmp	.-6      	; 0x826 <i2c_start+0x4>
	while((TWSR &0xf8)!=0x08); 
 82c:	81 b1       	in	r24, 0x01	; 1
 82e:	88 7f       	andi	r24, 0xF8	; 248
 830:	88 30       	cpi	r24, 0x08	; 8
 832:	e1 f7       	brne	.-8      	; 0x82c <i2c_start+0xa>
clr_bit(TWCR,TWSTA);
 834:	86 b7       	in	r24, 0x36	; 54
 836:	8f 7d       	andi	r24, 0xDF	; 223
 838:	86 bf       	out	0x36, r24	; 54
}
 83a:	08 95       	ret

0000083c <i2c_adress>:
void i2c_adress(unsigned char address)
{
TWDR=address;
 83c:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
 83e:	84 e8       	ldi	r24, 0x84	; 132
 840:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT)==0);
 842:	06 b6       	in	r0, 0x36	; 54
 844:	07 fe       	sbrs	r0, 7
 846:	fd cf       	rjmp	.-6      	; 0x842 <i2c_adress+0x6>
		while((TWSR &0xf8)!=0x18); 
 848:	81 b1       	in	r24, 0x01	; 1
 84a:	88 7f       	andi	r24, 0xF8	; 248
 84c:	88 31       	cpi	r24, 0x18	; 24
 84e:	e1 f7       	brne	.-8      	; 0x848 <i2c_adress+0xc>
	
}
 850:	08 95       	ret

00000852 <i2c_data>:
void i2c_data(unsigned char data)
{
	TWDR=data;
 852:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 854:	84 e8       	ldi	r24, 0x84	; 132
 856:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT)==0);
 858:	06 b6       	in	r0, 0x36	; 54
 85a:	07 fe       	sbrs	r0, 7
 85c:	fd cf       	rjmp	.-6      	; 0x858 <i2c_data+0x6>
	while((TWSR &0xf8)!=0x28);
 85e:	81 b1       	in	r24, 0x01	; 1
 860:	88 7f       	andi	r24, 0xF8	; 248
 862:	88 32       	cpi	r24, 0x28	; 40
 864:	e1 f7       	brne	.-8      	; 0x85e <i2c_data+0xc>
	
	
}
 866:	08 95       	ret

00000868 <i2c_stop>:
void i2c_stop(void)
{
TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWSTO));	
 868:	84 e9       	ldi	r24, 0x94	; 148
 86a:	86 bf       	out	0x36, r24	; 54
}
 86c:	08 95       	ret

0000086e <i2c_set_address>:
void i2c_set_address(unsigned char addres)
{
//TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWEA));
	TWAR=addres;
 86e:	82 b9       	out	0x02, r24	; 2

}
 870:	08 95       	ret

00000872 <i2c_slave_read>:
unsigned char i2c_slave_read(void)
{
		TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWEA));
 872:	84 ec       	ldi	r24, 0xC4	; 196
 874:	86 bf       	out	0x36, r24	; 54
			while(read_bit(TWCR,TWINT)==0);
 876:	06 b6       	in	r0, 0x36	; 54
 878:	07 fe       	sbrs	r0, 7
 87a:	fd cf       	rjmp	.-6      	; 0x876 <i2c_slave_read+0x4>
			while((TWSR &0xf8)!=0x60);
 87c:	81 b1       	in	r24, 0x01	; 1
 87e:	88 7f       	andi	r24, 0xF8	; 248
 880:	80 36       	cpi	r24, 0x60	; 96
 882:	e1 f7       	brne	.-8      	; 0x87c <i2c_slave_read+0xa>
			TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWEA));
 884:	84 ec       	ldi	r24, 0xC4	; 196
 886:	86 bf       	out	0x36, r24	; 54
			while(read_bit(TWCR,TWINT)==0);
 888:	06 b6       	in	r0, 0x36	; 54
 88a:	07 fe       	sbrs	r0, 7
 88c:	fd cf       	rjmp	.-6      	; 0x888 <i2c_slave_read+0x16>
				while((TWSR &0xf8)!=0x80);
 88e:	81 b1       	in	r24, 0x01	; 1
 890:	88 7f       	andi	r24, 0xF8	; 248
 892:	80 38       	cpi	r24, 0x80	; 128
 894:	e1 f7       	brne	.-8      	; 0x88e <i2c_slave_read+0x1c>
				return TWDR;
 896:	83 b1       	in	r24, 0x03	; 3
		
 898:	08 95       	ret

0000089a <pulse>:
		dio_write_pin(st2,en,0);
		dm(2);
	}
	#elif defined four_bits_mode
	{
		dio_write_pin(st1,en,1);
 89a:	81 e4       	ldi	r24, 0x41	; 65
 89c:	64 e0       	ldi	r22, 0x04	; 4
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8a4:	8f e9       	ldi	r24, 0x9F	; 159
 8a6:	9f e0       	ldi	r25, 0x0F	; 15
 8a8:	01 97       	sbiw	r24, 0x01	; 1
 8aa:	f1 f7       	brne	.-4      	; 0x8a8 <pulse+0xe>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <pulse+0x14>
 8ae:	00 00       	nop
		dm(2);
		dio_write_pin(st1,en,0);
 8b0:	81 e4       	ldi	r24, 0x41	; 65
 8b2:	64 e0       	ldi	r22, 0x04	; 4
 8b4:	40 e0       	ldi	r20, 0x00	; 0
 8b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
 8ba:	8f e9       	ldi	r24, 0x9F	; 159
 8bc:	9f e0       	ldi	r25, 0x0F	; 15
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <pulse+0x24>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <pulse+0x2a>
 8c4:	00 00       	nop
		dm(2);
	}
#endif
}
 8c6:	08 95       	ret

000008c8 <lcd_send_cmd>:
void lcd_send_cmd(char data)
{
 8c8:	cf 93       	push	r28
 8ca:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,0);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
 8cc:	68 2f       	mov	r22, r24
 8ce:	62 95       	swap	r22
 8d0:	6f 70       	andi	r22, 0x0F	; 15
 8d2:	81 e4       	ldi	r24, 0x41	; 65
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,0);
 8dc:	81 e4       	ldi	r24, 0x41	; 65
 8de:	65 e0       	ldi	r22, 0x05	; 5
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
 8e6:	0e 94 4d 04 	call	0x89a	; 0x89a <pulse>
 8ea:	8f ec       	ldi	r24, 0xCF	; 207
 8ec:	97 e0       	ldi	r25, 0x07	; 7
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	f1 f7       	brne	.-4      	; 0x8ee <lcd_send_cmd+0x26>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <lcd_send_cmd+0x2c>
 8f4:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
 8f6:	81 e4       	ldi	r24, 0x41	; 65
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	6c 2f       	mov	r22, r28
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
 902:	0e 94 4d 04 	call	0x89a	; 0x89a <pulse>
 906:	8f ec       	ldi	r24, 0xCF	; 207
 908:	97 e0       	ldi	r25, 0x07	; 7
 90a:	01 97       	sbiw	r24, 0x01	; 1
 90c:	f1 f7       	brne	.-4      	; 0x90a <lcd_send_cmd+0x42>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <lcd_send_cmd+0x48>
 910:	00 00       	nop
dm(1);
#endif
}
 912:	cf 91       	pop	r28
 914:	08 95       	ret

00000916 <lcd_init>:
		//lcd_send_cmd(0x04);
lcd_send_cmd(entry_mode);
	dm(1);

#elif defined four_bits_mode
dio_set_pin(st1,0,1);
 916:	81 e4       	ldi	r24, 0x41	; 65
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,1,1);
 920:	81 e4       	ldi	r24, 0x41	; 65
 922:	61 e0       	ldi	r22, 0x01	; 1
 924:	41 e0       	ldi	r20, 0x01	; 1
 926:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,2,1);
 92a:	81 e4       	ldi	r24, 0x41	; 65
 92c:	62 e0       	ldi	r22, 0x02	; 2
 92e:	41 e0       	ldi	r20, 0x01	; 1
 930:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,3,1);
 934:	81 e4       	ldi	r24, 0x41	; 65
 936:	63 e0       	ldi	r22, 0x03	; 3
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,en,1);
 93e:	81 e4       	ldi	r24, 0x41	; 65
 940:	64 e0       	ldi	r22, 0x04	; 4
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,rs,1);
 948:	81 e4       	ldi	r24, 0x41	; 65
 94a:	65 e0       	ldi	r22, 0x05	; 5
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>


lcd_send_cmd(return_home);
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 958:	8f e1       	ldi	r24, 0x1F	; 31
 95a:	9e e4       	ldi	r25, 0x4E	; 78
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <lcd_init+0x46>
 960:	00 c0       	rjmp	.+0      	; 0x962 <lcd_init+0x4c>
 962:	00 00       	nop

dm(10);
lcd_send_cmd(four_bits);
 964:	88 e2       	ldi	r24, 0x28	; 40
 966:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 96a:	8f ec       	ldi	r24, 0xCF	; 207
 96c:	97 e0       	ldi	r25, 0x07	; 7
 96e:	01 97       	sbiw	r24, 0x01	; 1
 970:	f1 f7       	brne	.-4      	; 0x96e <lcd_init+0x58>
 972:	00 c0       	rjmp	.+0      	; 0x974 <lcd_init+0x5e>
 974:	00 00       	nop
dm(1);

lcd_send_cmd(clr_screen);
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 97c:	8f e1       	ldi	r24, 0x1F	; 31
 97e:	9e e4       	ldi	r25, 0x4E	; 78
 980:	01 97       	sbiw	r24, 0x01	; 1
 982:	f1 f7       	brne	.-4      	; 0x980 <lcd_init+0x6a>
 984:	00 c0       	rjmp	.+0      	; 0x986 <lcd_init+0x70>
 986:	00 00       	nop
dm(10);
lcd_send_cmd(entry_mode);
 988:	86 e0       	ldi	r24, 0x06	; 6
 98a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 98e:	8f ec       	ldi	r24, 0xCF	; 207
 990:	97 e0       	ldi	r25, 0x07	; 7
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	f1 f7       	brne	.-4      	; 0x992 <lcd_init+0x7c>
 996:	00 c0       	rjmp	.+0      	; 0x998 <lcd_init+0x82>
 998:	00 00       	nop
dm(1);
lcd_send_cmd(cursor_on_disp_on);
 99a:	8e e0       	ldi	r24, 0x0E	; 14
 99c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 9a0:	8f ec       	ldi	r24, 0xCF	; 207
 9a2:	97 e0       	ldi	r25, 0x07	; 7
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <lcd_init+0x8e>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <lcd_init+0x94>
 9aa:	00 00       	nop
dm(1);


#endif
}
 9ac:	08 95       	ret

000009ae <lcd_send_char>:
pulse();
dm(1);
#endif
}
void lcd_send_char(char data)
{
 9ae:	cf 93       	push	r28
 9b0:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,1);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
 9b2:	68 2f       	mov	r22, r24
 9b4:	62 95       	swap	r22
 9b6:	6f 70       	andi	r22, 0x0F	; 15
 9b8:	81 e4       	ldi	r24, 0x41	; 65
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,1);
 9c2:	81 e4       	ldi	r24, 0x41	; 65
 9c4:	65 e0       	ldi	r22, 0x05	; 5
 9c6:	41 e0       	ldi	r20, 0x01	; 1
 9c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
 9cc:	0e 94 4d 04 	call	0x89a	; 0x89a <pulse>
 9d0:	8f ec       	ldi	r24, 0xCF	; 207
 9d2:	97 e0       	ldi	r25, 0x07	; 7
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	f1 f7       	brne	.-4      	; 0x9d4 <lcd_send_char+0x26>
 9d8:	00 c0       	rjmp	.+0      	; 0x9da <lcd_send_char+0x2c>
 9da:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
 9dc:	81 e4       	ldi	r24, 0x41	; 65
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	6c 2f       	mov	r22, r28
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
 9e8:	0e 94 4d 04 	call	0x89a	; 0x89a <pulse>
 9ec:	8f ec       	ldi	r24, 0xCF	; 207
 9ee:	97 e0       	ldi	r25, 0x07	; 7
 9f0:	01 97       	sbiw	r24, 0x01	; 1
 9f2:	f1 f7       	brne	.-4      	; 0x9f0 <lcd_send_char+0x42>
 9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <lcd_send_char+0x48>
 9f6:	00 00       	nop
dm(1);
#endif
}
 9f8:	cf 91       	pop	r28
 9fa:	08 95       	ret

000009fc <lcd_send_string>:
void lcd_send_string(char * data)
{
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	ec 01       	movw	r28, r24
	while (*data!='\0')
 a02:	88 81       	ld	r24, Y
 a04:	88 23       	and	r24, r24
 a06:	31 f0       	breq	.+12     	; 0xa14 <lcd_send_string+0x18>
dio_write_lo_level(st1,data);
pulse();
dm(1);
#endif
}
void lcd_send_string(char * data)
 a08:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data!='\0')
	{
	lcd_send_char(*data);
 a0a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <lcd_send_char>
dm(1);
#endif
}
void lcd_send_string(char * data)
{
	while (*data!='\0')
 a0e:	89 91       	ld	r24, Y+
 a10:	88 23       	and	r24, r24
 a12:	d9 f7       	brne	.-10     	; 0xa0a <lcd_send_string+0xe>
 a14:	8f ec       	ldi	r24, 0xCF	; 207
 a16:	97 e0       	ldi	r25, 0x07	; 7
 a18:	01 97       	sbiw	r24, 0x01	; 1
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <lcd_send_string+0x1c>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <lcd_send_string+0x22>
 a1e:	00 00       	nop

	
	}
		dm(1);
		
}
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <lcd_clrscrean>:
void lcd_clrscrean(void)
{
	lcd_send_cmd(clr_screen);
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 a2c:	8f e1       	ldi	r24, 0x1F	; 31
 a2e:	9e e4       	ldi	r25, 0x4E	; 78
 a30:	01 97       	sbiw	r24, 0x01	; 1
 a32:	f1 f7       	brne	.-4      	; 0xa30 <lcd_clrscrean+0xa>
 a34:	00 c0       	rjmp	.+0      	; 0xa36 <lcd_clrscrean+0x10>
 a36:	00 00       	nop
	dm(10);
}
 a38:	08 95       	ret

00000a3a <lcd_move_cursor>:
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
 a3a:	28 2f       	mov	r18, r24
 a3c:	21 50       	subi	r18, 0x01	; 1
 a3e:	22 30       	cpi	r18, 0x02	; 2
 a40:	70 f4       	brcc	.+28     	; 0xa5e <lcd_move_cursor+0x24>
 a42:	66 23       	and	r22, r22
 a44:	71 f0       	breq	.+28     	; 0xa62 <lcd_move_cursor+0x28>
 a46:	61 31       	cpi	r22, 0x11	; 17
 a48:	70 f4       	brcc	.+28     	; 0xa66 <lcd_move_cursor+0x2c>
	{
	data =0x80;
	}
else if (row==1)
 a4a:	81 30       	cpi	r24, 0x01	; 1
 a4c:	19 f4       	brne	.+6      	; 0xa54 <lcd_move_cursor+0x1a>
{
	data=0x80+coloumn-1;
 a4e:	96 2f       	mov	r25, r22
 a50:	91 58       	subi	r25, 0x81	; 129
 a52:	0a c0       	rjmp	.+20     	; 0xa68 <lcd_move_cursor+0x2e>
}
else if (row==2)
 a54:	82 30       	cpi	r24, 0x02	; 2
 a56:	41 f4       	brne	.+16     	; 0xa68 <lcd_move_cursor+0x2e>
{
	data=0xc0+coloumn-1;
 a58:	96 2f       	mov	r25, r22
 a5a:	91 54       	subi	r25, 0x41	; 65
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <lcd_move_cursor+0x2e>
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
	data =0x80;
 a5e:	90 e8       	ldi	r25, 0x80	; 128
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <lcd_move_cursor+0x2e>
 a62:	90 e8       	ldi	r25, 0x80	; 128
 a64:	01 c0       	rjmp	.+2      	; 0xa68 <lcd_move_cursor+0x2e>
 a66:	90 e8       	ldi	r25, 0x80	; 128
}
else if (row==2)
{
	data=0xc0+coloumn-1;
}
lcd_send_cmd(data);
 a68:	89 2f       	mov	r24, r25
 a6a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <lcd_send_cmd>
 a6e:	8f ec       	ldi	r24, 0xCF	; 207
 a70:	97 e0       	ldi	r25, 0x07	; 7
 a72:	01 97       	sbiw	r24, 0x01	; 1
 a74:	f1 f7       	brne	.-4      	; 0xa72 <lcd_move_cursor+0x38>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <lcd_move_cursor+0x3e>
 a78:	00 00       	nop
dm(1);
}
 a7a:	08 95       	ret

00000a7c <__udivmodsi4>:
 a7c:	a1 e2       	ldi	r26, 0x21	; 33
 a7e:	1a 2e       	mov	r1, r26
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	fd 01       	movw	r30, r26
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__udivmodsi4_ep>

00000a88 <__udivmodsi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	ee 1f       	adc	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	a2 17       	cp	r26, r18
 a92:	b3 07       	cpc	r27, r19
 a94:	e4 07       	cpc	r30, r20
 a96:	f5 07       	cpc	r31, r21
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <__udivmodsi4_ep>
 a9a:	a2 1b       	sub	r26, r18
 a9c:	b3 0b       	sbc	r27, r19
 a9e:	e4 0b       	sbc	r30, r20
 aa0:	f5 0b       	sbc	r31, r21

00000aa2 <__udivmodsi4_ep>:
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	1a 94       	dec	r1
 aac:	69 f7       	brne	.-38     	; 0xa88 <__udivmodsi4_loop>
 aae:	60 95       	com	r22
 ab0:	70 95       	com	r23
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	9b 01       	movw	r18, r22
 ab8:	ac 01       	movw	r20, r24
 aba:	bd 01       	movw	r22, r26
 abc:	cf 01       	movw	r24, r30
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
