
great_safe_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00001042  000010d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000de  008000de  00001154  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000018a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001667  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000673  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f8  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__vector_1>
       8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3e       	cpi	r26, 0xE8	; 232
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 03 	call	0x736	; 0x736 <main>
      8a:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin>:
 */ 
#include <avr/io.h>
#define  F_CPU  8000000Ul
void dio_set_pin(char port,char pin,char dir)
{
	switch (port)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <dio_set_pin+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <dio_set_pin+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <dio_set_pin+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <dio_set_pin+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <dio_set_pin+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <dio_set_pin+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <dio_set_pin+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <dio_set_pin+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <dio_set_pin+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <dio_set_pin+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <dio_set_pin+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <dio_set_pin+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <dio_set_pin+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <dio_set_pin+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <dio_set_pin+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <dio_set_pin+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <dio_set_pin+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <dio_set_pin+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <dio_set_pin+0xe8>
	{
		case 'A':
			case 'a':
			if (dir ==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <dio_set_pin+0x58>
			{
			DDRA|=(1<<pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <dio_set_pin+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <dio_set_pin+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
			}
	else
	{
	DDRA&=(~(1<<pin));	
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
	}break;
	
	case 'B':
	case 'b':
	if (dir ==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <dio_set_pin+0x92>
	{
		DDRB|=(1<<pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <dio_set_pin+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <dio_set_pin+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pin));
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <dio_set_pin+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <dio_set_pin+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
	}break;

case 'C':
case 'c':
if (dir ==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <dio_set_pin+0xcc>
{
	DDRC|=(1<<pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_set_pin+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <dio_set_pin+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
}
else
{
	DDRC&=(~(1<<pin));
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <dio_set_pin+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <dio_set_pin+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
}break;
	
	case 'D':
	case 'd':
	if (dir ==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <dio_set_pin+0x106>
	{
		DDRD|=(1<<pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <dio_set_pin+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <dio_set_pin+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pin));
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <dio_set_pin+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <dio_set_pin+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <dio_write_pin>:
	break;
}
	}
	void dio_write_pin(char port,char pin,char val)
	{
		switch(port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <dio_write_pin+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <dio_write_pin+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <dio_write_pin+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <dio_write_pin+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <dio_write_pin+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <dio_write_pin+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <dio_write_pin+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <dio_write_pin+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <dio_write_pin+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <dio_write_pin+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <dio_write_pin+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <dio_write_pin+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <dio_write_pin+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <dio_write_pin+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <dio_write_pin+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <dio_write_pin+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <dio_write_pin+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <dio_write_pin+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <dio_write_pin+0xe8>
	{
		case  'A':
		case 'a':
		if (val==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <dio_write_pin+0x58>
		{
		PORTA=PORTA|(1<<pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <dio_write_pin+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <dio_write_pin+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
	else
	{
		PORTA=PORTA & (~(1<<pin));
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <dio_write_pin+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <dio_write_pin+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
	}break;
	case  'B':
	case 'b':
	if (val==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <dio_write_pin+0x92>
	{
		PORTB=PORTB|(1<<pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <dio_write_pin+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <dio_write_pin+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
	}
	else
	{
		PORTB=PORTB & (~(1<<pin));
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <dio_write_pin+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <dio_write_pin+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
	}break;
	case 'C':
	case 'c':
	if (val==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <dio_write_pin+0xcc>
	{
		PORTC =PORTC |(1<<pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <dio_write_pin+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <dio_write_pin+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
	}
	else
	{
		PORTC =PORTC  & (~(1<<pin));
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <dio_write_pin+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <dio_write_pin+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
	}break;
	case 'D':
	case 'd':
	if (val==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <dio_write_pin+0x106>
	{
		PORTD =PORTD |(1<<pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <dio_write_pin+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <dio_write_pin+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
	}
	else
	{
		PORTD =PORTD  & (~(1<<pin));
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <dio_write_pin+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <dio_write_pin+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <dio_read_pin>:
	}	
	}
		unsigned char dio_read_pin(	unsigned char port,	unsigned char pin)
		{
		unsigned char val ;
		switch(port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	b1 f1       	breq	.+108    	; 0x346 <dio_read_pin+0x70>
     2da:	85 34       	cpi	r24, 0x45	; 69
     2dc:	38 f4       	brcc	.+14     	; 0x2ec <dio_read_pin+0x16>
     2de:	82 34       	cpi	r24, 0x42	; 66
     2e0:	e1 f0       	breq	.+56     	; 0x31a <dio_read_pin+0x44>
     2e2:	83 34       	cpi	r24, 0x43	; 67
     2e4:	28 f5       	brcc	.+74     	; 0x330 <dio_read_pin+0x5a>
     2e6:	81 34       	cpi	r24, 0x41	; 65
     2e8:	c1 f5       	brne	.+112    	; 0x35a <dio_read_pin+0x84>
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <dio_read_pin+0x2e>
     2ec:	82 36       	cpi	r24, 0x62	; 98
     2ee:	a9 f0       	breq	.+42     	; 0x31a <dio_read_pin+0x44>
     2f0:	83 36       	cpi	r24, 0x63	; 99
     2f2:	18 f4       	brcc	.+6      	; 0x2fa <dio_read_pin+0x24>
     2f4:	81 36       	cpi	r24, 0x61	; 97
     2f6:	89 f5       	brne	.+98     	; 0x35a <dio_read_pin+0x84>
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <dio_read_pin+0x2e>
     2fa:	83 36       	cpi	r24, 0x63	; 99
     2fc:	c9 f0       	breq	.+50     	; 0x330 <dio_read_pin+0x5a>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	61 f5       	brne	.+88     	; 0x35a <dio_read_pin+0x84>
     302:	21 c0       	rjmp	.+66     	; 0x346 <dio_read_pin+0x70>
		{
		case 'A':
		case 'a':	
		val =((PINA>>pin)&1);
     304:	29 b3       	in	r18, 0x19	; 25
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_read_pin+0x3a>
     30c:	95 95       	asr	r25
     30e:	87 95       	ror	r24
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <dio_read_pin+0x36>
     314:	98 2f       	mov	r25, r24
     316:	91 70       	andi	r25, 0x01	; 1
		break;
     318:	20 c0       	rjmp	.+64     	; 0x35a <dio_read_pin+0x84>
		case  'B':
		case 'b':
		val =((PINB>>pin)&1);
     31a:	26 b3       	in	r18, 0x16	; 22
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	c9 01       	movw	r24, r18
     320:	02 c0       	rjmp	.+4      	; 0x326 <dio_read_pin+0x50>
     322:	95 95       	asr	r25
     324:	87 95       	ror	r24
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <dio_read_pin+0x4c>
     32a:	98 2f       	mov	r25, r24
     32c:	91 70       	andi	r25, 0x01	; 1
			break;;
     32e:	15 c0       	rjmp	.+42     	; 0x35a <dio_read_pin+0x84>
		case  'C':
		case 'c':
		val =((PINC>>pin)&1);
     330:	23 b3       	in	r18, 0x13	; 19
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	c9 01       	movw	r24, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <dio_read_pin+0x66>
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	6a 95       	dec	r22
     33e:	e2 f7       	brpl	.-8      	; 0x338 <dio_read_pin+0x62>
     340:	98 2f       	mov	r25, r24
     342:	91 70       	andi	r25, 0x01	; 1
			break;
     344:	0a c0       	rjmp	.+20     	; 0x35a <dio_read_pin+0x84>
			case  'D':
			case 'd':
			val =((PIND>>pin)&1);
     346:	20 b3       	in	r18, 0x10	; 16
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	c9 01       	movw	r24, r18
     34c:	02 c0       	rjmp	.+4      	; 0x352 <dio_read_pin+0x7c>
     34e:	95 95       	asr	r25
     350:	87 95       	ror	r24
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <dio_read_pin+0x78>
     356:	98 2f       	mov	r25, r24
     358:	91 70       	andi	r25, 0x01	; 1
			default:
			break;
		
		}
		return val;
				}		
     35a:	89 2f       	mov	r24, r25
     35c:	08 95       	ret

0000035e <dio_toggle_pin>:
				void dio_toggle_pin(char port,char pin)
				{
					switch (port)
     35e:	84 34       	cpi	r24, 0x44	; 68
     360:	09 f4       	brne	.+2      	; 0x364 <dio_toggle_pin+0x6>
     362:	3d c0       	rjmp	.+122    	; 0x3de <dio_toggle_pin+0x80>
     364:	85 34       	cpi	r24, 0x45	; 69
     366:	40 f4       	brcc	.+16     	; 0x378 <dio_toggle_pin+0x1a>
     368:	82 34       	cpi	r24, 0x42	; 66
     36a:	f9 f0       	breq	.+62     	; 0x3aa <dio_toggle_pin+0x4c>
     36c:	83 34       	cpi	r24, 0x43	; 67
     36e:	50 f5       	brcc	.+84     	; 0x3c4 <dio_toggle_pin+0x66>
     370:	81 34       	cpi	r24, 0x41	; 65
     372:	09 f0       	breq	.+2      	; 0x376 <dio_toggle_pin+0x18>
     374:	40 c0       	rjmp	.+128    	; 0x3f6 <dio_toggle_pin+0x98>
     376:	0c c0       	rjmp	.+24     	; 0x390 <dio_toggle_pin+0x32>
     378:	82 36       	cpi	r24, 0x62	; 98
     37a:	b9 f0       	breq	.+46     	; 0x3aa <dio_toggle_pin+0x4c>
     37c:	83 36       	cpi	r24, 0x63	; 99
     37e:	18 f4       	brcc	.+6      	; 0x386 <dio_toggle_pin+0x28>
     380:	81 36       	cpi	r24, 0x61	; 97
     382:	c9 f5       	brne	.+114    	; 0x3f6 <dio_toggle_pin+0x98>
     384:	05 c0       	rjmp	.+10     	; 0x390 <dio_toggle_pin+0x32>
     386:	83 36       	cpi	r24, 0x63	; 99
     388:	e9 f0       	breq	.+58     	; 0x3c4 <dio_toggle_pin+0x66>
     38a:	84 36       	cpi	r24, 0x64	; 100
     38c:	a1 f5       	brne	.+104    	; 0x3f6 <dio_toggle_pin+0x98>
     38e:	27 c0       	rjmp	.+78     	; 0x3de <dio_toggle_pin+0x80>
					{
					case 'A':
					case 'a':
					PORTA=PORTA^(1<<pin);
     390:	2b b3       	in	r18, 0x1b	; 27
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	ac 01       	movw	r20, r24
     398:	02 c0       	rjmp	.+4      	; 0x39e <dio_toggle_pin+0x40>
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <dio_toggle_pin+0x3c>
     3a2:	ba 01       	movw	r22, r20
     3a4:	62 27       	eor	r22, r18
     3a6:	6b bb       	out	0x1b, r22	; 27
					break;
     3a8:	08 95       	ret
					case 'b':
					case 'B':
					PORTB=PORTB^(1<<pin);
     3aa:	28 b3       	in	r18, 0x18	; 24
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	ac 01       	movw	r20, r24
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_toggle_pin+0x5a>
     3b4:	44 0f       	add	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_toggle_pin+0x56>
     3bc:	ba 01       	movw	r22, r20
     3be:	62 27       	eor	r22, r18
     3c0:	68 bb       	out	0x18, r22	; 24
					break;
     3c2:	08 95       	ret
					case 'C':
					case 'c':
					PORTC=PORTC^(1<<pin);
     3c4:	25 b3       	in	r18, 0x15	; 21
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	ac 01       	movw	r20, r24
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <dio_toggle_pin+0x74>
     3ce:	44 0f       	add	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <dio_toggle_pin+0x70>
     3d6:	ba 01       	movw	r22, r20
     3d8:	62 27       	eor	r22, r18
     3da:	65 bb       	out	0x15, r22	; 21
					break;
     3dc:	08 95       	ret
					case  'D':
					case 'd':
					PORTD=PORTD^(1<<pin);
     3de:	22 b3       	in	r18, 0x12	; 18
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	ac 01       	movw	r20, r24
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <dio_toggle_pin+0x8e>
     3e8:	44 0f       	add	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <dio_toggle_pin+0x8a>
     3f0:	ba 01       	movw	r22, r20
     3f2:	62 27       	eor	r22, r18
     3f4:	62 bb       	out	0x12, r22	; 18
     3f6:	08 95       	ret

000003f8 <dio_set_port>:
					break;
					}
			}
			void dio_set_port(unsigned char port,unsigned char dir)
			{
				switch(port)
     3f8:	84 34       	cpi	r24, 0x44	; 68
     3fa:	d9 f0       	breq	.+54     	; 0x432 <dio_set_port+0x3a>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	38 f4       	brcc	.+14     	; 0x40e <dio_set_port+0x16>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	99 f0       	breq	.+38     	; 0x42a <dio_set_port+0x32>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	98 f4       	brcc	.+38     	; 0x42e <dio_set_port+0x36>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	a1 f4       	brne	.+40     	; 0x434 <dio_set_port+0x3c>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <dio_set_port+0x2e>
     40e:	82 36       	cpi	r24, 0x62	; 98
     410:	61 f0       	breq	.+24     	; 0x42a <dio_set_port+0x32>
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	18 f4       	brcc	.+6      	; 0x41c <dio_set_port+0x24>
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	69 f4       	brne	.+26     	; 0x434 <dio_set_port+0x3c>
     41a:	05 c0       	rjmp	.+10     	; 0x426 <dio_set_port+0x2e>
     41c:	83 36       	cpi	r24, 0x63	; 99
     41e:	39 f0       	breq	.+14     	; 0x42e <dio_set_port+0x36>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	41 f4       	brne	.+16     	; 0x434 <dio_set_port+0x3c>
     424:	06 c0       	rjmp	.+12     	; 0x432 <dio_set_port+0x3a>
				{
				case 'A':
				case 'a':
					DDRA=dir;
     426:	6a bb       	out	0x1a, r22	; 26
	break;
     428:	08 95       	ret
	case 'b':
	case 'B':
	DDRB=dir;
     42a:	67 bb       	out	0x17, r22	; 23
	break;
     42c:	08 95       	ret
	case 'C':
	case 'c':
	DDRC=dir;
     42e:	64 bb       	out	0x14, r22	; 20
	break;
     430:	08 95       	ret
	case  'D':
	case 'd':
	DDRD=dir;
     432:	61 bb       	out	0x11, r22	; 17
     434:	08 95       	ret

00000436 <dio_write_port>:
	
	}
}
void dio_write_port(char port,unsigned char val)
{
	switch(port)
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	d9 f0       	breq	.+54     	; 0x470 <dio_write_port+0x3a>
     43a:	85 34       	cpi	r24, 0x45	; 69
     43c:	38 f4       	brcc	.+14     	; 0x44c <dio_write_port+0x16>
     43e:	82 34       	cpi	r24, 0x42	; 66
     440:	99 f0       	breq	.+38     	; 0x468 <dio_write_port+0x32>
     442:	83 34       	cpi	r24, 0x43	; 67
     444:	98 f4       	brcc	.+38     	; 0x46c <dio_write_port+0x36>
     446:	81 34       	cpi	r24, 0x41	; 65
     448:	a1 f4       	brne	.+40     	; 0x472 <dio_write_port+0x3c>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <dio_write_port+0x2e>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	61 f0       	breq	.+24     	; 0x468 <dio_write_port+0x32>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	18 f4       	brcc	.+6      	; 0x45a <dio_write_port+0x24>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	69 f4       	brne	.+26     	; 0x472 <dio_write_port+0x3c>
     458:	05 c0       	rjmp	.+10     	; 0x464 <dio_write_port+0x2e>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	39 f0       	breq	.+14     	; 0x46c <dio_write_port+0x36>
     45e:	84 36       	cpi	r24, 0x64	; 100
     460:	41 f4       	brne	.+16     	; 0x472 <dio_write_port+0x3c>
     462:	06 c0       	rjmp	.+12     	; 0x470 <dio_write_port+0x3a>
	{
	case 'A':
	case 'a':
	PORTA=val;	
     464:	6b bb       	out	0x1b, r22	; 27
	break;
     466:	08 95       	ret
	case 'B':
	case 'b':
	PORTB=val;
     468:	68 bb       	out	0x18, r22	; 24
	break;
     46a:	08 95       	ret
	case 'C':
	case 'c':
	PORTC=val;
     46c:	65 bb       	out	0x15, r22	; 21
	break;
     46e:	08 95       	ret
	case 'D':
	case 'd':
	PORTD=val;
     470:	62 bb       	out	0x12, r22	; 18
     472:	08 95       	ret

00000474 <dio_read_port>:
	}
}
unsigned char dio_read_port(unsigned char port)
{
	unsigned char val;
	switch (port)
     474:	84 34       	cpi	r24, 0x44	; 68
     476:	d9 f0       	breq	.+54     	; 0x4ae <dio_read_port+0x3a>
     478:	85 34       	cpi	r24, 0x45	; 69
     47a:	38 f4       	brcc	.+14     	; 0x48a <dio_read_port+0x16>
     47c:	82 34       	cpi	r24, 0x42	; 66
     47e:	99 f0       	breq	.+38     	; 0x4a6 <dio_read_port+0x32>
     480:	83 34       	cpi	r24, 0x43	; 67
     482:	98 f4       	brcc	.+38     	; 0x4aa <dio_read_port+0x36>
     484:	81 34       	cpi	r24, 0x41	; 65
     486:	a1 f4       	brne	.+40     	; 0x4b0 <dio_read_port+0x3c>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <dio_read_port+0x2e>
     48a:	82 36       	cpi	r24, 0x62	; 98
     48c:	61 f0       	breq	.+24     	; 0x4a6 <dio_read_port+0x32>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	18 f4       	brcc	.+6      	; 0x498 <dio_read_port+0x24>
     492:	81 36       	cpi	r24, 0x61	; 97
     494:	69 f4       	brne	.+26     	; 0x4b0 <dio_read_port+0x3c>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <dio_read_port+0x2e>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	39 f0       	breq	.+14     	; 0x4aa <dio_read_port+0x36>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	41 f4       	brne	.+16     	; 0x4b0 <dio_read_port+0x3c>
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <dio_read_port+0x3a>
	{
	case 'a' :
	case 'A' :
	val=PINA;
     4a2:	89 b3       	in	r24, 0x19	; 25
	break;
     4a4:	08 95       	ret
	case 'B' :
	case 'b' :
	val=PINB;
     4a6:	86 b3       	in	r24, 0x16	; 22
	break;
     4a8:	08 95       	ret
	case 'C' :
	case 'c' :
	val=PINC;
     4aa:	83 b3       	in	r24, 0x13	; 19
	break;
     4ac:	08 95       	ret
	case 'D' :
	case 'd' :
	val=PIND;
     4ae:	80 b3       	in	r24, 0x10	; 16
	default:
	break;
	
	}
	
}
     4b0:	08 95       	ret

000004b2 <dio_toggle_port>:
void dio_toggle_port(char port)
{
		unsigned char val;
		switch (port)
     4b2:	84 34       	cpi	r24, 0x44	; 68
     4b4:	09 f1       	breq	.+66     	; 0x4f8 <dio_toggle_port+0x46>
     4b6:	85 34       	cpi	r24, 0x45	; 69
     4b8:	38 f4       	brcc	.+14     	; 0x4c8 <dio_toggle_port+0x16>
     4ba:	82 34       	cpi	r24, 0x42	; 66
     4bc:	a9 f0       	breq	.+42     	; 0x4e8 <dio_toggle_port+0x36>
     4be:	83 34       	cpi	r24, 0x43	; 67
     4c0:	b8 f4       	brcc	.+46     	; 0x4f0 <dio_toggle_port+0x3e>
     4c2:	81 34       	cpi	r24, 0x41	; 65
     4c4:	e1 f4       	brne	.+56     	; 0x4fe <dio_toggle_port+0x4c>
     4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <dio_toggle_port+0x2e>
     4c8:	82 36       	cpi	r24, 0x62	; 98
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <dio_toggle_port+0x36>
     4cc:	83 36       	cpi	r24, 0x63	; 99
     4ce:	18 f4       	brcc	.+6      	; 0x4d6 <dio_toggle_port+0x24>
     4d0:	81 36       	cpi	r24, 0x61	; 97
     4d2:	a9 f4       	brne	.+42     	; 0x4fe <dio_toggle_port+0x4c>
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <dio_toggle_port+0x2e>
     4d6:	83 36       	cpi	r24, 0x63	; 99
     4d8:	59 f0       	breq	.+22     	; 0x4f0 <dio_toggle_port+0x3e>
     4da:	84 36       	cpi	r24, 0x64	; 100
     4dc:	81 f4       	brne	.+32     	; 0x4fe <dio_toggle_port+0x4c>
     4de:	0c c0       	rjmp	.+24     	; 0x4f8 <dio_toggle_port+0x46>
		{
			case 'a' :
			case 'A' :
			PORTA=~PORTA;
     4e0:	8b b3       	in	r24, 0x1b	; 27
     4e2:	80 95       	com	r24
     4e4:	8b bb       	out	0x1b, r24	; 27
			break;
     4e6:	08 95       	ret
			case 'B' :
			case 'b' :
				PORTB=~PORTB;
     4e8:	88 b3       	in	r24, 0x18	; 24
     4ea:	80 95       	com	r24
     4ec:	88 bb       	out	0x18, r24	; 24
			break;
     4ee:	08 95       	ret
			case 'C' :
			case 'c' :
				PORTC=~PORTC;
     4f0:	85 b3       	in	r24, 0x15	; 21
     4f2:	80 95       	com	r24
     4f4:	85 bb       	out	0x15, r24	; 21
			break;
     4f6:	08 95       	ret
			case 'D' :
			case 'd' :
		PORTD=~PORTD;
     4f8:	82 b3       	in	r24, 0x12	; 18
     4fa:	80 95       	com	r24
     4fc:	82 bb       	out	0x12, r24	; 18
     4fe:	08 95       	ret

00000500 <dio_pull_up_en>:
		}
}
void dio_pull_up_en (char port,char pin ,char en)
{
	
	switch(port)
     500:	84 34       	cpi	r24, 0x44	; 68
     502:	09 f4       	brne	.+2      	; 0x506 <dio_pull_up_en+0x6>
     504:	80 c0       	rjmp	.+256    	; 0x606 <dio_pull_up_en+0x106>
     506:	85 34       	cpi	r24, 0x45	; 69
     508:	48 f4       	brcc	.+18     	; 0x51c <dio_pull_up_en+0x1c>
     50a:	82 34       	cpi	r24, 0x42	; 66
     50c:	c1 f1       	breq	.+112    	; 0x57e <dio_pull_up_en+0x7e>
     50e:	83 34       	cpi	r24, 0x43	; 67
     510:	08 f0       	brcs	.+2      	; 0x514 <dio_pull_up_en+0x14>
     512:	57 c0       	rjmp	.+174    	; 0x5c2 <dio_pull_up_en+0xc2>
     514:	81 34       	cpi	r24, 0x41	; 65
     516:	09 f0       	breq	.+2      	; 0x51a <dio_pull_up_en+0x1a>
     518:	97 c0       	rjmp	.+302    	; 0x648 <dio_pull_up_en+0x148>
     51a:	0f c0       	rjmp	.+30     	; 0x53a <dio_pull_up_en+0x3a>
     51c:	82 36       	cpi	r24, 0x62	; 98
     51e:	79 f1       	breq	.+94     	; 0x57e <dio_pull_up_en+0x7e>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	20 f4       	brcc	.+8      	; 0x52c <dio_pull_up_en+0x2c>
     524:	81 36       	cpi	r24, 0x61	; 97
     526:	09 f0       	breq	.+2      	; 0x52a <dio_pull_up_en+0x2a>
     528:	8f c0       	rjmp	.+286    	; 0x648 <dio_pull_up_en+0x148>
     52a:	07 c0       	rjmp	.+14     	; 0x53a <dio_pull_up_en+0x3a>
     52c:	83 36       	cpi	r24, 0x63	; 99
     52e:	09 f4       	brne	.+2      	; 0x532 <dio_pull_up_en+0x32>
     530:	48 c0       	rjmp	.+144    	; 0x5c2 <dio_pull_up_en+0xc2>
     532:	84 36       	cpi	r24, 0x64	; 100
     534:	09 f0       	breq	.+2      	; 0x538 <dio_pull_up_en+0x38>
     536:	88 c0       	rjmp	.+272    	; 0x648 <dio_pull_up_en+0x148>
     538:	66 c0       	rjmp	.+204    	; 0x606 <dio_pull_up_en+0x106>
{
	case 'a':
	case 'A':
if (en==1)
     53a:	41 30       	cpi	r20, 0x01	; 1
     53c:	91 f4       	brne	.+36     	; 0x562 <dio_pull_up_en+0x62>
{
PORTA=PORTA|(1<<pin);
     53e:	2b b3       	in	r18, 0x1b	; 27
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	ac 01       	movw	r20, r24
     546:	02 c0       	rjmp	.+4      	; 0x54c <dio_pull_up_en+0x4c>
     548:	44 0f       	add	r20, r20
     54a:	55 1f       	adc	r21, r21
     54c:	6a 95       	dec	r22
     54e:	e2 f7       	brpl	.-8      	; 0x548 <dio_pull_up_en+0x48>
     550:	ba 01       	movw	r22, r20
     552:	82 2f       	mov	r24, r18
     554:	84 2b       	or	r24, r20
     556:	8b bb       	out	0x1b, r24	; 27
DDRA=DDRA&(~(1<<pin));
     558:	8a b3       	in	r24, 0x1a	; 26
     55a:	60 95       	com	r22
     55c:	68 23       	and	r22, r24
     55e:	6a bb       	out	0x1a, r22	; 26
     560:	08 95       	ret
}
else
{
	PORTA=PORTA&(~(1<<pin));
     562:	2b b3       	in	r18, 0x1b	; 27
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	ac 01       	movw	r20, r24
     56a:	02 c0       	rjmp	.+4      	; 0x570 <dio_pull_up_en+0x70>
     56c:	44 0f       	add	r20, r20
     56e:	55 1f       	adc	r21, r21
     570:	6a 95       	dec	r22
     572:	e2 f7       	brpl	.-8      	; 0x56c <dio_pull_up_en+0x6c>
     574:	ba 01       	movw	r22, r20
     576:	60 95       	com	r22
     578:	62 23       	and	r22, r18
     57a:	6b bb       	out	0x1b, r22	; 27
     57c:	08 95       	ret
}break;
case 'b':
case 'B':
if (en==1)
     57e:	41 30       	cpi	r20, 0x01	; 1
     580:	91 f4       	brne	.+36     	; 0x5a6 <dio_pull_up_en+0xa6>
{
	PORTB=PORTB|(1<<pin);
     582:	28 b3       	in	r18, 0x18	; 24
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	ac 01       	movw	r20, r24
     58a:	02 c0       	rjmp	.+4      	; 0x590 <dio_pull_up_en+0x90>
     58c:	44 0f       	add	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	6a 95       	dec	r22
     592:	e2 f7       	brpl	.-8      	; 0x58c <dio_pull_up_en+0x8c>
     594:	ba 01       	movw	r22, r20
     596:	82 2f       	mov	r24, r18
     598:	84 2b       	or	r24, r20
     59a:	88 bb       	out	0x18, r24	; 24
	DDRB=DDRB&(~(1<<pin));
     59c:	87 b3       	in	r24, 0x17	; 23
     59e:	60 95       	com	r22
     5a0:	68 23       	and	r22, r24
     5a2:	67 bb       	out	0x17, r22	; 23
     5a4:	08 95       	ret
}
else
{
	PORTB=PORTB&(~(1<<pin));
     5a6:	28 b3       	in	r18, 0x18	; 24
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <dio_pull_up_en+0xb4>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <dio_pull_up_en+0xb0>
     5b8:	ba 01       	movw	r22, r20
     5ba:	60 95       	com	r22
     5bc:	62 23       	and	r22, r18
     5be:	68 bb       	out	0x18, r22	; 24
     5c0:	08 95       	ret
}break;
case 'c':
case 'C':
if (en==1)
     5c2:	41 30       	cpi	r20, 0x01	; 1
     5c4:	91 f4       	brne	.+36     	; 0x5ea <dio_pull_up_en+0xea>
{
	PORTC=PORTC|(1<<pin);
     5c6:	25 b3       	in	r18, 0x15	; 21
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	ac 01       	movw	r20, r24
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <dio_pull_up_en+0xd4>
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <dio_pull_up_en+0xd0>
     5d8:	ba 01       	movw	r22, r20
     5da:	82 2f       	mov	r24, r18
     5dc:	84 2b       	or	r24, r20
     5de:	85 bb       	out	0x15, r24	; 21
	DDRC=DDRC&(~(1<<pin));
     5e0:	84 b3       	in	r24, 0x14	; 20
     5e2:	60 95       	com	r22
     5e4:	68 23       	and	r22, r24
     5e6:	64 bb       	out	0x14, r22	; 20
     5e8:	08 95       	ret
}
else
{
	PORTC=PORTC&(~(1<<pin));
     5ea:	25 b3       	in	r18, 0x15	; 21
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	ac 01       	movw	r20, r24
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <dio_pull_up_en+0xf8>
     5f4:	44 0f       	add	r20, r20
     5f6:	55 1f       	adc	r21, r21
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <dio_pull_up_en+0xf4>
     5fc:	ba 01       	movw	r22, r20
     5fe:	60 95       	com	r22
     600:	62 23       	and	r22, r18
     602:	65 bb       	out	0x15, r22	; 21
     604:	08 95       	ret
}break;
case 'd':
case 'D':
if (en==1)
     606:	41 30       	cpi	r20, 0x01	; 1
     608:	91 f4       	brne	.+36     	; 0x62e <dio_pull_up_en+0x12e>
{
	PORTD=PORTD|(1<<pin);
     60a:	22 b3       	in	r18, 0x12	; 18
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	ac 01       	movw	r20, r24
     612:	02 c0       	rjmp	.+4      	; 0x618 <dio_pull_up_en+0x118>
     614:	44 0f       	add	r20, r20
     616:	55 1f       	adc	r21, r21
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <dio_pull_up_en+0x114>
     61c:	ba 01       	movw	r22, r20
     61e:	82 2f       	mov	r24, r18
     620:	84 2b       	or	r24, r20
     622:	82 bb       	out	0x12, r24	; 18
	DDRD=DDRD&(~(1<<pin));
     624:	81 b3       	in	r24, 0x11	; 17
     626:	60 95       	com	r22
     628:	68 23       	and	r22, r24
     62a:	61 bb       	out	0x11, r22	; 17
     62c:	08 95       	ret
}
else
{
	PORTD=PORTD&(~(1<<pin));
     62e:	22 b3       	in	r18, 0x12	; 18
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ac 01       	movw	r20, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <dio_pull_up_en+0x13c>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <dio_pull_up_en+0x138>
     640:	ba 01       	movw	r22, r20
     642:	60 95       	com	r22
     644:	62 23       	and	r22, r18
     646:	62 bb       	out	0x12, r22	; 18
     648:	08 95       	ret

0000064a <dio_write_lo_level>:
break;
}
}
void dio_write_lo_level(char port,unsigned char val)
{
	val=val & 0x0f;
     64a:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     64c:	84 34       	cpi	r24, 0x44	; 68
     64e:	51 f1       	breq	.+84     	; 0x6a4 <dio_write_lo_level+0x5a>
     650:	85 34       	cpi	r24, 0x45	; 69
     652:	38 f4       	brcc	.+14     	; 0x662 <dio_write_lo_level+0x18>
     654:	82 34       	cpi	r24, 0x42	; 66
     656:	c1 f0       	breq	.+48     	; 0x688 <dio_write_lo_level+0x3e>
     658:	83 34       	cpi	r24, 0x43	; 67
     65a:	e8 f4       	brcc	.+58     	; 0x696 <dio_write_lo_level+0x4c>
     65c:	81 34       	cpi	r24, 0x41	; 65
     65e:	41 f5       	brne	.+80     	; 0x6b0 <dio_write_lo_level+0x66>
     660:	0c c0       	rjmp	.+24     	; 0x67a <dio_write_lo_level+0x30>
     662:	82 36       	cpi	r24, 0x62	; 98
     664:	89 f0       	breq	.+34     	; 0x688 <dio_write_lo_level+0x3e>
     666:	83 36       	cpi	r24, 0x63	; 99
     668:	18 f4       	brcc	.+6      	; 0x670 <dio_write_lo_level+0x26>
     66a:	81 36       	cpi	r24, 0x61	; 97
     66c:	09 f5       	brne	.+66     	; 0x6b0 <dio_write_lo_level+0x66>
     66e:	05 c0       	rjmp	.+10     	; 0x67a <dio_write_lo_level+0x30>
     670:	83 36       	cpi	r24, 0x63	; 99
     672:	89 f0       	breq	.+34     	; 0x696 <dio_write_lo_level+0x4c>
     674:	84 36       	cpi	r24, 0x64	; 100
     676:	e1 f4       	brne	.+56     	; 0x6b0 <dio_write_lo_level+0x66>
     678:	15 c0       	rjmp	.+42     	; 0x6a4 <dio_write_lo_level+0x5a>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0xf0;
     67a:	8b b3       	in	r24, 0x1b	; 27
     67c:	80 7f       	andi	r24, 0xF0	; 240
     67e:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     680:	8b b3       	in	r24, 0x1b	; 27
     682:	68 2b       	or	r22, r24
     684:	6b bb       	out	0x1b, r22	; 27
		break;
     686:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0xf0;
     688:	88 b3       	in	r24, 0x18	; 24
     68a:	80 7f       	andi	r24, 0xF0	; 240
     68c:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     68e:	88 b3       	in	r24, 0x18	; 24
     690:	68 2b       	or	r22, r24
     692:	68 bb       	out	0x18, r22	; 24
		break;
     694:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0xf0;
     696:	85 b3       	in	r24, 0x15	; 21
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     69c:	85 b3       	in	r24, 0x15	; 21
     69e:	68 2b       	or	r22, r24
     6a0:	65 bb       	out	0x15, r22	; 21
		break;
     6a2:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0xf0;
     6a4:	82 b3       	in	r24, 0x12	; 18
     6a6:	80 7f       	andi	r24, 0xF0	; 240
     6a8:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     6aa:	82 b3       	in	r24, 0x12	; 18
     6ac:	68 2b       	or	r22, r24
     6ae:	62 bb       	out	0x12, r22	; 18
     6b0:	08 95       	ret

000006b2 <dio_write_hi_level>:

}
void dio_write_hi_level(char port,unsigned char val)
{
	val =val <<4;
	val=val & 0xf0;
     6b2:	62 95       	swap	r22
     6b4:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
     6b6:	84 34       	cpi	r24, 0x44	; 68
     6b8:	51 f1       	breq	.+84     	; 0x70e <dio_write_hi_level+0x5c>
     6ba:	85 34       	cpi	r24, 0x45	; 69
     6bc:	38 f4       	brcc	.+14     	; 0x6cc <dio_write_hi_level+0x1a>
     6be:	82 34       	cpi	r24, 0x42	; 66
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <dio_write_hi_level+0x40>
     6c2:	83 34       	cpi	r24, 0x43	; 67
     6c4:	e8 f4       	brcc	.+58     	; 0x700 <dio_write_hi_level+0x4e>
     6c6:	81 34       	cpi	r24, 0x41	; 65
     6c8:	41 f5       	brne	.+80     	; 0x71a <dio_write_hi_level+0x68>
     6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <dio_write_hi_level+0x32>
     6cc:	82 36       	cpi	r24, 0x62	; 98
     6ce:	89 f0       	breq	.+34     	; 0x6f2 <dio_write_hi_level+0x40>
     6d0:	83 36       	cpi	r24, 0x63	; 99
     6d2:	18 f4       	brcc	.+6      	; 0x6da <dio_write_hi_level+0x28>
     6d4:	81 36       	cpi	r24, 0x61	; 97
     6d6:	09 f5       	brne	.+66     	; 0x71a <dio_write_hi_level+0x68>
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <dio_write_hi_level+0x32>
     6da:	83 36       	cpi	r24, 0x63	; 99
     6dc:	89 f0       	breq	.+34     	; 0x700 <dio_write_hi_level+0x4e>
     6de:	84 36       	cpi	r24, 0x64	; 100
     6e0:	e1 f4       	brne	.+56     	; 0x71a <dio_write_hi_level+0x68>
     6e2:	15 c0       	rjmp	.+42     	; 0x70e <dio_write_hi_level+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0x0f;
     6e4:	8b b3       	in	r24, 0x1b	; 27
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     6ea:	8b b3       	in	r24, 0x1b	; 27
     6ec:	68 2b       	or	r22, r24
     6ee:	6b bb       	out	0x1b, r22	; 27
		break;
     6f0:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0x0f;
     6f2:	88 b3       	in	r24, 0x18	; 24
     6f4:	8f 70       	andi	r24, 0x0F	; 15
     6f6:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     6f8:	88 b3       	in	r24, 0x18	; 24
     6fa:	68 2b       	or	r22, r24
     6fc:	68 bb       	out	0x18, r22	; 24
		break;
     6fe:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0x0f;
     700:	85 b3       	in	r24, 0x15	; 21
     702:	8f 70       	andi	r24, 0x0F	; 15
     704:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     706:	85 b3       	in	r24, 0x15	; 21
     708:	68 2b       	or	r22, r24
     70a:	65 bb       	out	0x15, r22	; 21
		break;
     70c:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0x0f;
     70e:	82 b3       	in	r24, 0x12	; 18
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     714:	82 b3       	in	r24, 0x12	; 18
     716:	68 2b       	or	r22, r24
     718:	62 bb       	out	0x12, r22	; 18
     71a:	08 95       	ret

0000071c <EEPROM_write>:
 */ 
#include <avr/io.h>	
#include "std_macros1.h"
void EEPROM_write(const unsigned short address,unsigned char data)
{
	EEAR=address;
     71c:	9f bb       	out	0x1f, r25	; 31
     71e:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;
     720:	6d bb       	out	0x1d, r22	; 29
	set_bit(EECR,EEMWE);
     722:	e2 9a       	sbi	0x1c, 2	; 28
	set_bit(EECR,EEWE);
     724:	e1 9a       	sbi	0x1c, 1	; 28
	while(read_bit(EECR,EEWE)==1);
     726:	e1 99       	sbic	0x1c, 1	; 28
     728:	fe cf       	rjmp	.-4      	; 0x726 <EEPROM_write+0xa>
	{
		
	}
}
     72a:	08 95       	ret

0000072c <EEPROM_read>:
unsigned char EEPROM_read(const unsigned short address)
{
EEAR=address;
     72c:	9f bb       	out	0x1f, r25	; 31
     72e:	8e bb       	out	0x1e, r24	; 30
set_bit(EECR,EERE);
     730:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
     732:	8d b3       	in	r24, 0x1d	; 29
	
     734:	08 95       	ret

00000736 <main>:

#ifndef INT0POS_E_H_
#define INT0POS_E_H_


sei();//SREG|=(1<<7) ; 
     736:	78 94       	sei
MCUCR=MCUCR|(1<<ISC00)|(1<<ISC00);
     738:	85 b7       	in	r24, 0x35	; 53
     73a:	81 60       	ori	r24, 0x01	; 1
     73c:	85 bf       	out	0x35, r24	; 53
GICR=GICR|(1<<INT0);
     73e:	8b b7       	in	r24, 0x3b	; 59
     740:	80 64       	ori	r24, 0x40	; 64
     742:	8b bf       	out	0x3b, r24	; 59


#ifndef INT1POS_E_H_
#define INT1POS_E_H_

MCUCR=MCUCR|(1<<ISC10)|(1<<ISC11);
     744:	85 b7       	in	r24, 0x35	; 53
     746:	8c 60       	ori	r24, 0x0C	; 12
     748:	85 bf       	out	0x35, r24	; 53
GICR=GICR|(1<<INT1);
     74a:	8b b7       	in	r24, 0x3b	; 59
     74c:	80 68       	ori	r24, 0x80	; 128
     74e:	8b bf       	out	0x3b, r24	; 59
sei();
     750:	78 94       	sei
   #include "int0pos_e.h"
   #include "int1pos_e.h"
   char value= NOTPRESSED;
   char i=0;
   char tries=max_tries;
   flag=1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 e1 00 	sts	0x00E1, r24
  
  motor_selective_mode_init('b');
     758:	82 e6       	ldi	r24, 0x62	; 98
     75a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <motor_selective_mode_init>
  //// led_init('a',4);
  //  led_init('a',5);
  button_init('a',6);
     75e:	81 e6       	ldi	r24, 0x61	; 97
     760:	66 e0       	ldi	r22, 0x06	; 6
     762:	0e 94 18 08 	call	0x1030	; 0x1030 <button_init>
 lcd_init();
     766:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_init>
   keypad_init('c');
     76a:	83 e6       	ldi	r24, 0x63	; 99
     76c:	0e 94 29 06 	call	0xc52	; 0xc52 <keypad_init>
   if (EEPROM_read(prom_status)==NOTPRESSED)
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     778:	8f 3f       	cpi	r24, 0xFF	; 255
     77a:	69 f5       	brne	.+90     	; 0x7d6 <main+0xa0>
   {
   lcd_send_string("set pass:");
     77c:	80 e6       	ldi	r24, 0x60	; 96
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     784:	c1 e2       	ldi	r28, 0x21	; 33
     786:	d0 e0       	ldi	r29, 0x00	; 0
   for (i=0;i<=4;i++)//we have 5 digit
   {
  do 
  {
  value=keypad_read('c');
     788:	83 e6       	ldi	r24, 0x63	; 99
     78a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <keypad_read>
     78e:	18 2f       	mov	r17, r24
  } while (value==NOTPRESSED);
     790:	8f 3f       	cpi	r24, 0xFF	; 255
     792:	d1 f3       	breq	.-12     	; 0x788 <main+0x52>
 EEPROM_write(prom_loc_1+i,value);
     794:	ce 01       	movw	r24, r28
     796:	61 2f       	mov	r22, r17
     798:	0e 94 8e 03 	call	0x71c	; 0x71c <EEPROM_write>
lcd_send_char(value);
     79c:	81 2f       	mov	r24, r17
     79e:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a2:	8f e7       	ldi	r24, 0x7F	; 127
     7a4:	9a e1       	ldi	r25, 0x1A	; 26
     7a6:	a6 e0       	ldi	r26, 0x06	; 6
     7a8:	81 50       	subi	r24, 0x01	; 1
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	a0 40       	sbci	r26, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x72>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x7c>
     7b2:	00 00       	nop
#define max_tries 2
#define NOTPRESSED 0xff
char arr[5];
volatile char latch1=0,flag=0,latch3=0,latch4=0,latch5=0;
  #include "motor_drives.h"
int main(void)
     7b4:	6c 2f       	mov	r22, r28
     7b6:	67 51       	subi	r22, 0x17	; 23
  value=keypad_read('c');
  } while (value==NOTPRESSED);
 EEPROM_write(prom_loc_1+i,value);
lcd_send_char(value);
dm(250);
lcd_move_cursor(1,10+i);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_move_cursor>
lcd_send_char('*');
     7be:	8a e2       	ldi	r24, 0x2A	; 42
     7c0:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
     7c4:	21 96       	adiw	r28, 0x01	; 1
 lcd_init();
   keypad_init('c');
   if (EEPROM_read(prom_status)==NOTPRESSED)
   {
   lcd_send_string("set pass:");
   for (i=0;i<=4;i++)//we have 5 digit
     7c6:	c6 32       	cpi	r28, 0x26	; 38
     7c8:	d1 05       	cpc	r29, r1
     7ca:	f1 f6       	brne	.-68     	; 0x788 <main+0x52>
lcd_send_char(value);
dm(250);
lcd_move_cursor(1,10+i);
lcd_send_char('*');
 }
   EEPROM_write(prom_status,0x00);
     7cc:	80 e2       	ldi	r24, 0x20	; 32
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	0e 94 8e 03 	call	0x71c	; 0x71c <EEPROM_write>
{
	while(flag==1)
	{
		arr[0]=	arr[1]=	arr[2]=	arr[3]=	arr[4]=0xff;
		lcd_send_cmd(clr_screen);;
		lcd_send_string("enter pass:");
     7d6:	02 e0       	ldi	r16, 0x02	; 2
			
			clockwise('b');
			//flag=1;
			
				lcd_send_cmd(clr_screen);;
				lcd_send_string("door close...");
     7d8:	0f 2e       	mov	r0, r31
     7da:	f0 ec       	ldi	r31, 0xC0	; 192
     7dc:	ef 2e       	mov	r14, r31
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ff 2e       	mov	r15, r31
     7e2:	f0 2d       	mov	r31, r0
   }
while(1)
{
	while(flag==1)
	{
		arr[0]=	arr[1]=	arr[2]=	arr[3]=	arr[4]=0xff;
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f7 ee       	ldi	r31, 0xE7	; 231
     7e8:	cf 2e       	mov	r12, r31
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	df 2e       	mov	r13, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	0f 2e       	mov	r0, r31
     7f2:	fc ef       	ldi	r31, 0xFC	; 252
     7f4:	af 2e       	mov	r10, r31
     7f6:	ff ef       	ldi	r31, 0xFF	; 255
     7f8:	bf 2e       	mov	r11, r31
     7fa:	f0 2d       	mov	r31, r0
     7fc:	ac 0c       	add	r10, r12
     7fe:	bd 1c       	adc	r11, r13
		lcd_send_cmd(clr_screen);;
		lcd_send_string("enter pass:");
     800:	0f 2e       	mov	r0, r31
     802:	fa e6       	ldi	r31, 0x6A	; 106
     804:	8f 2e       	mov	r8, r31
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	9f 2e       	mov	r9, r31
     80a:	f0 2d       	mov	r31, r0
     80c:	5a 2c       	mov	r5, r10
     80e:	4b 2c       	mov	r4, r11
			dm(250);
			lcd_move_cursor(1,12+i);
			lcd_send_char('*');
			
		}
		if (EEPROM_read(prom_loc_1)==arr[0]&&EEPROM_read(prom_loc_2)==arr[1]&&EEPROM_read(prom_loc_3)==arr[2]&&EEPROM_read(prom_loc_4)==arr[3]&&EEPROM_read(prom_loc_5)==arr[4])
     810:	0f 2e       	mov	r0, r31
     812:	f3 ee       	ldi	r31, 0xE3	; 227
     814:	6f 2e       	mov	r6, r31
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	7f 2e       	mov	r7, r31
     81a:	f0 2d       	mov	r31, r0


			else
			{
				lcd_send_cmd(clr_screen);;
				lcd_send_string("permanent locked");
     81c:	0f 2e       	mov	r0, r31
     81e:	ff ea       	ldi	r31, 0xAF	; 175
     820:	2f 2e       	mov	r2, r31
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	3f 2e       	mov	r3, r31
     826:	f0 2d       	mov	r31, r0
     828:	38 c1       	rjmp	.+624    	; 0xa9a <__stack+0x23b>
   }
while(1)
{
	while(flag==1)
	{
		arr[0]=	arr[1]=	arr[2]=	arr[3]=	arr[4]=0xff;
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	d6 01       	movw	r26, r12
     82e:	8c 93       	st	X, r24
     830:	80 93 e6 00 	sts	0x00E6, r24
     834:	80 93 e5 00 	sts	0x00E5, r24
     838:	80 93 e4 00 	sts	0x00E4, r24
     83c:	f5 01       	movw	r30, r10
     83e:	80 83       	st	Z, r24
		lcd_send_cmd(clr_screen);;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
		lcd_send_string("enter pass:");
     846:	c4 01       	movw	r24, r8
     848:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     84c:	c5 2d       	mov	r28, r5
     84e:	d4 2d       	mov	r29, r4
     850:	1c e0       	ldi	r17, 0x0C	; 12
		for (i=0;i<=4;i++)
		{
			do
			{
				arr[i]=keypad_read('c');
     852:	83 e6       	ldi	r24, 0x63	; 99
     854:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <keypad_read>
     858:	88 83       	st	Y, r24
			} while (arr[i]==NOTPRESSED);
     85a:	8f 3f       	cpi	r24, 0xFF	; 255
     85c:	d1 f3       	breq	.-12     	; 0x852 <main+0x11c>
			lcd_send_char(arr[i]);
     85e:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
     862:	8f e7       	ldi	r24, 0x7F	; 127
     864:	9a e1       	ldi	r25, 0x1A	; 26
     866:	a6 e0       	ldi	r26, 0x06	; 6
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	90 40       	sbci	r25, 0x00	; 0
     86c:	a0 40       	sbci	r26, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <__stack+0x9>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
			dm(250);
			lcd_move_cursor(1,12+i);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	61 2f       	mov	r22, r17
     878:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_move_cursor>
			lcd_send_char('*');
     87c:	8a e2       	ldi	r24, 0x2A	; 42
     87e:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
     882:	1f 5f       	subi	r17, 0xFF	; 255
     884:	21 96       	adiw	r28, 0x01	; 1
	while(flag==1)
	{
		arr[0]=	arr[1]=	arr[2]=	arr[3]=	arr[4]=0xff;
		lcd_send_cmd(clr_screen);;
		lcd_send_string("enter pass:");
		for (i=0;i<=4;i++)
     886:	11 31       	cpi	r17, 0x11	; 17
     888:	21 f7       	brne	.-56     	; 0x852 <main+0x11c>
			dm(250);
			lcd_move_cursor(1,12+i);
			lcd_send_char('*');
			
		}
		if (EEPROM_read(prom_loc_1)==arr[0]&&EEPROM_read(prom_loc_2)==arr[1]&&EEPROM_read(prom_loc_3)==arr[2]&&EEPROM_read(prom_loc_4)==arr[3]&&EEPROM_read(prom_loc_5)==arr[4])
     88a:	81 e2       	ldi	r24, 0x21	; 33
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     892:	d3 01       	movw	r26, r6
     894:	9c 91       	ld	r25, X
     896:	89 17       	cp	r24, r25
     898:	09 f0       	breq	.+2      	; 0x89c <__stack+0x3d>
     89a:	8f c0       	rjmp	.+286    	; 0x9ba <__stack+0x15b>
     89c:	82 e2       	ldi	r24, 0x22	; 34
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     8a4:	e4 ee       	ldi	r30, 0xE4	; 228
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	90 81       	ld	r25, Z
     8aa:	89 17       	cp	r24, r25
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	85 c0       	rjmp	.+266    	; 0x9ba <__stack+0x15b>
     8b0:	83 e2       	ldi	r24, 0x23	; 35
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     8b8:	a5 ee       	ldi	r26, 0xE5	; 229
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9c 91       	ld	r25, X
     8be:	89 17       	cp	r24, r25
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__stack+0x65>
     8c2:	7b c0       	rjmp	.+246    	; 0x9ba <__stack+0x15b>
     8c4:	84 e2       	ldi	r24, 0x24	; 36
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     8cc:	e6 ee       	ldi	r30, 0xE6	; 230
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	90 81       	ld	r25, Z
     8d2:	89 17       	cp	r24, r25
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	71 c0       	rjmp	.+226    	; 0x9ba <__stack+0x15b>
     8d8:	85 e2       	ldi	r24, 0x25	; 37
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_read>
     8e0:	d6 01       	movw	r26, r12
     8e2:	9c 91       	ld	r25, X
     8e4:	89 17       	cp	r24, r25
     8e6:	09 f0       	breq	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	68 c0       	rjmp	.+208    	; 0x9ba <__stack+0x15b>
		{
			lcd_send_cmd(clr_screen);;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
			lcd_send_string("right pass");
     8f0:	86 e7       	ldi	r24, 0x76	; 118
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	99 e6       	ldi	r25, 0x69	; 105
     8fc:	a8 e1       	ldi	r26, 0x18	; 24
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	a0 40       	sbci	r26, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <__stack+0x9f>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
			dm(1000);
			//led_on('a',4);
			anti_clockwise('b');
     90a:	82 e6       	ldi	r24, 0x62	; 98
     90c:	0e 94 fe 07 	call	0xffc	; 0xffc <anti_clockwise>
		lcd_move_cursor(2,1);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_move_cursor>
			lcd_send_string("Door open...");
     918:	81 e8       	ldi	r24, 0x81	; 129
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	99 e6       	ldi	r25, 0x69	; 105
     924:	a8 e1       	ldi	r26, 0x18	; 24
     926:	81 50       	subi	r24, 0x01	; 1
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	a0 40       	sbci	r26, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0xd1>
     930:	00 00       	nop
			dm(1000);
			lcd_send_cmd(cursor_off_disp_off);
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	95 ea       	ldi	r25, 0xA5	; 165
     93c:	ae e0       	ldi	r26, 0x0E	; 14
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	a0 40       	sbci	r26, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <__stack+0xdf>
     946:	00 c0       	rjmp	.+0      	; 0x948 <__stack+0xe9>
     948:	00 00       	nop
			dm(600);
			lcd_send_cmd(disp_on_cursor_off);
     94a:	8c e0       	ldi	r24, 0x0C	; 12
     94c:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	95 ea       	ldi	r25, 0xA5	; 165
     954:	ae e0       	ldi	r26, 0x0E	; 14
     956:	81 50       	subi	r24, 0x01	; 1
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	a0 40       	sbci	r26, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <__stack+0xf7>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <__stack+0x101>
     960:	00 00       	nop
			dm(600);
			lcd_send_cmd(cursor_off_disp_off);
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	95 ea       	ldi	r25, 0xA5	; 165
     96c:	ae e0       	ldi	r26, 0x0E	; 14
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	90 40       	sbci	r25, 0x00	; 0
     972:	a0 40       	sbci	r26, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <__stack+0x10f>
     976:	00 c0       	rjmp	.+0      	; 0x978 <__stack+0x119>
     978:	00 00       	nop
			dm(600);
			lcd_send_cmd(disp_on_cursor_off);
     97a:	8c e0       	ldi	r24, 0x0C	; 12
     97c:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	95 ea       	ldi	r25, 0xA5	; 165
     984:	ae e0       	ldi	r26, 0x0E	; 14
     986:	81 50       	subi	r24, 0x01	; 1
     988:	90 40       	sbci	r25, 0x00	; 0
     98a:	a0 40       	sbci	r26, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <__stack+0x127>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <__stack+0x131>
     990:	00 00       	nop
			dm(600);
			lcd_send_cmd(cursor_off_disp_off);
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	95 ea       	ldi	r25, 0xA5	; 165
     99c:	ae e0       	ldi	r26, 0x0E	; 14
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	90 40       	sbci	r25, 0x00	; 0
     9a2:	a0 40       	sbci	r26, 0x00	; 0
     9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x13f>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <__stack+0x149>
     9a8:	00 00       	nop
			dm(600);
			lcd_send_cmd(disp_on_cursor_off);
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
			
			flag=0;
     9b0:	10 92 e1 00 	sts	0x00E1, r1
			latch1=0;
     9b4:	10 92 e2 00 	sts	0x00E2, r1
     9b8:	70 c0       	rjmp	.+224    	; 0xa9a <__stack+0x23b>
		}
		else
		{
			tries--;
     9ba:	01 50       	subi	r16, 0x01	; 1
			if (tries>0)
     9bc:	e9 f0       	breq	.+58     	; 0x9f8 <__stack+0x199>
			{
				lcd_send_cmd(clr_screen);;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
				lcd_send_string("wrong pass try again");
     9c4:	8e e8       	ldi	r24, 0x8E	; 142
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
				lcd_move_cursor(2,1);
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_move_cursor>
				lcd_send_string("tries left:");
     9d4:	83 ea       	ldi	r24, 0xA3	; 163
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
				lcd_send_char(tries+48);
     9dc:	80 2f       	mov	r24, r16
     9de:	80 5d       	subi	r24, 0xD0	; 208
     9e0:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	99 e6       	ldi	r25, 0x69	; 105
     9e8:	a8 e1       	ldi	r26, 0x18	; 24
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	a0 40       	sbci	r26, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <__stack+0x18b>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <__stack+0x195>
     9f4:	00 00       	nop
     9f6:	51 c0       	rjmp	.+162    	; 0xa9a <__stack+0x23b>
			}


			else
			{
				lcd_send_cmd(clr_screen);;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
				lcd_send_string("permanent locked");
     9fe:	c1 01       	movw	r24, r2
     a00:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	99 e6       	ldi	r25, 0x69	; 105
     a08:	a8 e1       	ldi	r26, 0x18	; 24
     a0a:	81 50       	subi	r24, 0x01	; 1
     a0c:	90 40       	sbci	r25, 0x00	; 0
     a0e:	a0 40       	sbci	r26, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <__stack+0x1ab>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <__stack+0x1b5>
     a14:	00 00       	nop
				dm(1000);
				lcd_send_cmd(cursor_off_disp_off);
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	95 ea       	ldi	r25, 0xA5	; 165
     a20:	ae e0       	ldi	r26, 0x0E	; 14
     a22:	81 50       	subi	r24, 0x01	; 1
     a24:	90 40       	sbci	r25, 0x00	; 0
     a26:	a0 40       	sbci	r26, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <__stack+0x1c3>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <__stack+0x1cd>
     a2c:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	95 ea       	ldi	r25, 0xA5	; 165
     a38:	ae e0       	ldi	r26, 0x0E	; 14
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	a0 40       	sbci	r26, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <__stack+0x1db>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <__stack+0x1e5>
     a44:	00 00       	nop
				dm(600);
				lcd_send_cmd(cursor_off_disp_off);
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	95 ea       	ldi	r25, 0xA5	; 165
     a50:	ae e0       	ldi	r26, 0x0E	; 14
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	a0 40       	sbci	r26, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <__stack+0x1f3>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <__stack+0x1fd>
     a5c:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	95 ea       	ldi	r25, 0xA5	; 165
     a68:	ae e0       	ldi	r26, 0x0E	; 14
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	a0 40       	sbci	r26, 0x00	; 0
     a70:	e1 f7       	brne	.-8      	; 0xa6a <__stack+0x20b>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <__stack+0x215>
     a74:	00 00       	nop
				dm(600);
				lcd_send_cmd(cursor_off_disp_off);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	95 ea       	ldi	r25, 0xA5	; 165
     a80:	ae e0       	ldi	r26, 0x0E	; 14
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	a0 40       	sbci	r26, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <__stack+0x223>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <__stack+0x22d>
     a8c:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     a8e:	8c e0       	ldi	r24, 0x0C	; 12
     a90:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
			
				flag=2;
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 93 e1 00 	sts	0x00E1, r24
 }
   EEPROM_write(prom_status,0x00);
   }
while(1)
{
	while(flag==1)
     a9a:	80 91 e1 00 	lds	r24, 0x00E1
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <__stack+0x245>
     aa2:	5e c0       	rjmp	.+188    	; 0xb60 <__stack+0x301>
     aa4:	c2 ce       	rjmp	.-636    	; 0x82a <main+0xf4>
			}
		}
	}
	while((flag==0)&&(latch1==0)&&(latch3==1))//door close region 
	{
		if(button_read('a',6)==1)
     aa6:	81 e6       	ldi	r24, 0x61	; 97
     aa8:	66 e0       	ldi	r22, 0x06	; 6
     aaa:	0e 94 1c 08 	call	0x1038	; 0x1038 <button_read>
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <__stack+0x255>
     ab2:	56 c0       	rjmp	.+172    	; 0xb60 <__stack+0x301>
		{
			
			clockwise('b');
     ab4:	82 e6       	ldi	r24, 0x62	; 98
     ab6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clockwise>
			//flag=1;
			
				lcd_send_cmd(clr_screen);;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
				lcd_send_string("door close...");
     ac0:	c7 01       	movw	r24, r14
     ac2:	0e 94 a4 07 	call	0xf48	; 0xf48 <lcd_send_string>
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	99 e6       	ldi	r25, 0x69	; 105
     aca:	a8 e1       	ldi	r26, 0x18	; 24
     acc:	81 50       	subi	r24, 0x01	; 1
     ace:	90 40       	sbci	r25, 0x00	; 0
     ad0:	a0 40       	sbci	r26, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <__stack+0x26d>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <__stack+0x277>
     ad6:	00 00       	nop
				dm(1000);
				lcd_send_cmd(cursor_off_disp_off);
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	95 ea       	ldi	r25, 0xA5	; 165
     ae2:	ae e0       	ldi	r26, 0x0E	; 14
     ae4:	81 50       	subi	r24, 0x01	; 1
     ae6:	90 40       	sbci	r25, 0x00	; 0
     ae8:	a0 40       	sbci	r26, 0x00	; 0
     aea:	e1 f7       	brne	.-8      	; 0xae4 <__stack+0x285>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <__stack+0x28f>
     aee:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     af0:	8c e0       	ldi	r24, 0x0C	; 12
     af2:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	95 ea       	ldi	r25, 0xA5	; 165
     afa:	ae e0       	ldi	r26, 0x0E	; 14
     afc:	81 50       	subi	r24, 0x01	; 1
     afe:	90 40       	sbci	r25, 0x00	; 0
     b00:	a0 40       	sbci	r26, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <__stack+0x29d>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <__stack+0x2a7>
     b06:	00 00       	nop
				dm(600);
				lcd_send_cmd(cursor_off_disp_off);
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	95 ea       	ldi	r25, 0xA5	; 165
     b12:	ae e0       	ldi	r26, 0x0E	; 14
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	a0 40       	sbci	r26, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <__stack+0x2b5>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <__stack+0x2bf>
     b1e:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     b20:	8c e0       	ldi	r24, 0x0C	; 12
     b22:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	95 ea       	ldi	r25, 0xA5	; 165
     b2a:	ae e0       	ldi	r26, 0x0E	; 14
     b2c:	81 50       	subi	r24, 0x01	; 1
     b2e:	90 40       	sbci	r25, 0x00	; 0
     b30:	a0 40       	sbci	r26, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <__stack+0x2cd>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <__stack+0x2d7>
     b36:	00 00       	nop
				dm(600);
				lcd_send_cmd(cursor_off_disp_off);
     b38:	88 e0       	ldi	r24, 0x08	; 8
     b3a:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	95 ea       	ldi	r25, 0xA5	; 165
     b42:	ae e0       	ldi	r26, 0x0E	; 14
     b44:	81 50       	subi	r24, 0x01	; 1
     b46:	90 40       	sbci	r25, 0x00	; 0
     b48:	a0 40       	sbci	r26, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <__stack+0x2e5>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <__stack+0x2ef>
     b4e:	00 00       	nop
				dm(600);
				lcd_send_cmd(disp_on_cursor_off);
     b50:	8c e0       	ldi	r24, 0x0C	; 12
     b52:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
		latch3=0;
     b56:	10 92 e0 00 	sts	0x00E0, r1
		latch5=1;/*to ensure that the close limit switch will not stop
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 de 00 	sts	0x00DE, r24
				flag=2;
				//led_on('a',5);
			}
		}
	}
	while((flag==0)&&(latch1==0)&&(latch3==1))//door close region 
     b60:	80 91 e1 00 	lds	r24, 0x00E1
     b64:	88 23       	and	r24, r24
     b66:	09 f0       	breq	.+2      	; 0xb6a <__stack+0x30b>
     b68:	98 cf       	rjmp	.-208    	; 0xa9a <__stack+0x23b>
     b6a:	80 91 e2 00 	lds	r24, 0x00E2
     b6e:	88 23       	and	r24, r24
     b70:	09 f0       	breq	.+2      	; 0xb74 <__stack+0x315>
     b72:	93 cf       	rjmp	.-218    	; 0xa9a <__stack+0x23b>
     b74:	80 91 e0 00 	lds	r24, 0x00E0
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x31f>
     b7c:	94 cf       	rjmp	.-216    	; 0xaa6 <__stack+0x247>
     b7e:	8d cf       	rjmp	.-230    	; 0xa9a <__stack+0x23b>

00000b80 <__vector_1>:
		
}
}
	}
	ISR(INT0_vect)//close direction limit switch
		{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
		if ((latch4==1)&&(latch5==1))
     ba2:	80 91 df 00 	lds	r24, 0x00DF
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	81 f4       	brne	.+32     	; 0xbca <__vector_1+0x4a>
     baa:	80 91 de 00 	lds	r24, 0x00DE
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	61 f4       	brne	.+24     	; 0xbca <__vector_1+0x4a>
		{
		stop_motor('b');
     bb2:	82 e6       	ldi	r24, 0x62	; 98
     bb4:	0e 94 0b 08 	call	0x1016	; 0x1016 <stop_motor>
		latch1=1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 e2 00 	sts	0x00E2, r24
		flag=1;
     bbe:	80 93 e1 00 	sts	0x00E1, r24
		latch4=0;
     bc2:	10 92 df 00 	sts	0x00DF, r1
		latch5=0;
     bc6:	10 92 de 00 	sts	0x00DE, r1
		}
		
	}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <__vector_2>:
	ISR(INT1_vect)//open direction limit switch
	{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	4f 93       	push	r20
     bfc:	5f 93       	push	r21
     bfe:	6f 93       	push	r22
     c00:	7f 93       	push	r23
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	af 93       	push	r26
     c08:	bf 93       	push	r27
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
			stop_motor('b');
     c0e:	82 e6       	ldi	r24, 0x62	; 98
     c10:	0e 94 0b 08 	call	0x1016	; 0x1016 <stop_motor>
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	99 e6       	ldi	r25, 0x69	; 105
     c18:	a8 e1       	ldi	r26, 0x18	; 24
     c1a:	81 50       	subi	r24, 0x01	; 1
     c1c:	90 40       	sbci	r25, 0x00	; 0
     c1e:	a0 40       	sbci	r26, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <__vector_2+0x2e>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <__vector_2+0x38>
     c24:	00 00       	nop
		dm(1000);
		latch3=1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 e0 00 	sts	0x00E0, r24
		latch4=1;/*to ensure that the close limit switch will not restart the operation until
     c2c:	80 93 df 00 	sts	0x00DF, r24
	open limit switch  is pressed*/
			
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <keypad_init>:

#include "keyPad_drives.h"


void keypad_init(unsigned char port)
{
     c52:	cf 93       	push	r28
     c54:	c8 2f       	mov	r28, r24
	dio_set_pin(port,0,1);
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
	dio_set_pin(port,1,1);
     c64:	8c 2f       	mov	r24, r28
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_set_pin(port,2,1);
     c74:	8c 2f       	mov	r24, r28
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_set_pin(port,3,1);
     c84:	8c 2f       	mov	r24, r28
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	63 e0       	ldi	r22, 0x03	; 3
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_pull_up_en(port,4,1);
     c94:	8c 2f       	mov	r24, r28
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
    dio_pull_up_en(port,5,1);
     ca4:	8c 2f       	mov	r24, r28
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
     dio_pull_up_en(port,6,1);
     cb4:	8c 2f       	mov	r24, r28
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	66 e0       	ldi	r22, 0x06	; 6
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
	  dio_pull_up_en(port,7,1);
     cc4:	8c 2f       	mov	r24, r28
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	67 e0       	ldi	r22, 0x07	; 7
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>

}
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <keypad_read>:
unsigned char keypad_read(unsigned char port)
{
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	61 97       	sbiw	r28, 0x11	; 17
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','4'},{'A','0','=','+'}};
     d00:	de 01       	movw	r26, r28
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	ee ec       	ldi	r30, 0xCE	; 206
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 e1       	ldi	r25, 0x10	; 16
     d0a:	01 90       	ld	r0, Z+
     d0c:	0d 92       	st	X+, r0
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	e1 f7       	brne	.-8      	; 0xd0a <keypad_read+0x32>
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	99 8b       	std	Y+17, r25	; 0x11
     d16:	cc 24       	eor	r12, r12
     d18:	dd 24       	eor	r13, r13
		
		for (raw=0;raw<=3;raw++)
		{
		dio_write_pin(port,0,1);
     d1a:	f8 2e       	mov	r15, r24
     d1c:	ee 24       	eor	r14, r14
     d1e:	8f 2d       	mov	r24, r15
     d20:	9e 2d       	mov	r25, r14
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,1,1);
     d2e:	8f 2d       	mov	r24, r15
     d30:	9e 2d       	mov	r25, r14
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,2,1);
     d3e:	8f 2d       	mov	r24, r15
     d40:	9e 2d       	mov	r25, r14
     d42:	62 e0       	ldi	r22, 0x02	; 2
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,3,1);
     d4e:	8f 2d       	mov	r24, r15
     d50:	9e 2d       	mov	r25, r14
     d52:	63 e0       	ldi	r22, 0x03	; 3
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,raw,0);
     d5e:	46 01       	movw	r8, r12
     d60:	8f 2d       	mov	r24, r15
     d62:	9e 2d       	mov	r25, r14
     d64:	b6 01       	movw	r22, r12
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	10 e0       	ldi	r17, 0x00	; 0
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
     d72:	58 01       	movw	r10, r16
    dio_pull_up_en(port,5,1);
     dio_pull_up_en(port,6,1);
	  dio_pull_up_en(port,7,1);

}
unsigned char keypad_read(unsigned char port)
     d74:	b8 01       	movw	r22, r16
     d76:	6c 5f       	subi	r22, 0xFC	; 252
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
     d7a:	8f 2d       	mov	r24, r15
     d7c:	9e 2d       	mov	r25, r14
     d7e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <dio_read_pin>
			
			if ((x==0))
     d82:	88 23       	and	r24, r24
     d84:	69 f4       	brne	.+26     	; 0xda0 <keypad_read+0xc8>
			{
			ret=arr[raw][col];
     d86:	f4 01       	movw	r30, r8
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	ae 0e       	add	r10, r30
     d92:	bf 1e       	adc	r11, r31
     d94:	fe 01       	movw	r30, r28
     d96:	ea 0d       	add	r30, r10
     d98:	fb 1d       	adc	r31, r11
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	89 8b       	std	Y+17, r24	; 0x11
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <keypad_read+0xd4>
     da0:	0f 5f       	subi	r16, 0xFF	; 255
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
		dio_write_pin(port,1,1);
		dio_write_pin(port,2,1);
		dio_write_pin(port,3,1);
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
     da4:	04 30       	cpi	r16, 0x04	; 4
     da6:	11 05       	cpc	r17, r1
     da8:	21 f7       	brne	.-56     	; 0xd72 <keypad_read+0x9a>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <keypad_read+0xfc>
		

		}


return ret;
     dac:	89 89       	ldd	r24, Y+17	; 0x11

}
     dae:	61 96       	adiw	r28, 0x11	; 17
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	9f 90       	pop	r9
     dd0:	8f 90       	pop	r8
     dd2:	08 95       	ret
		

		}


return ret;
     dd4:	08 94       	sec
     dd6:	c1 1c       	adc	r12, r1
     dd8:	d1 1c       	adc	r13, r1
{
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','4'},{'A','0','=','+'}};
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
		
		for (raw=0;raw<=3;raw++)
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	c8 16       	cp	r12, r24
     dde:	d1 04       	cpc	r13, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <keypad_read+0x10c>
     de2:	9d cf       	rjmp	.-198    	; 0xd1e <keypad_read+0x46>
     de4:	e3 cf       	rjmp	.-58     	; 0xdac <keypad_read+0xd4>

00000de6 <pulse>:
		dio_write_pin(st2,en,0);
		dm(2);
	}
	#elif defined four_bits_mode
	{
		dio_write_pin(st1,en,1);
     de6:	81 e4       	ldi	r24, 0x41	; 65
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     df0:	8f e9       	ldi	r24, 0x9F	; 159
     df2:	9f e0       	ldi	r25, 0x0F	; 15
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <pulse+0xe>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <pulse+0x14>
     dfa:	00 00       	nop
		dm(2);
		dio_write_pin(st1,en,0);
     dfc:	81 e4       	ldi	r24, 0x41	; 65
     dfe:	64 e0       	ldi	r22, 0x04	; 4
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     e06:	8f e9       	ldi	r24, 0x9F	; 159
     e08:	9f e0       	ldi	r25, 0x0F	; 15
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <pulse+0x24>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <pulse+0x2a>
     e10:	00 00       	nop
		dm(2);
	}
#endif
}
     e12:	08 95       	ret

00000e14 <lcd_send_cmd>:
void lcd_send_cmd(char data)
{
     e14:	cf 93       	push	r28
     e16:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,0);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
     e18:	68 2f       	mov	r22, r24
     e1a:	62 95       	swap	r22
     e1c:	6f 70       	andi	r22, 0x0F	; 15
     e1e:	81 e4       	ldi	r24, 0x41	; 65
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,0);
     e28:	81 e4       	ldi	r24, 0x41	; 65
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
     e32:	0e 94 f3 06 	call	0xde6	; 0xde6 <pulse>
     e36:	8f ec       	ldi	r24, 0xCF	; 207
     e38:	97 e0       	ldi	r25, 0x07	; 7
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <lcd_send_cmd+0x26>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <lcd_send_cmd+0x2c>
     e40:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
     e42:	81 e4       	ldi	r24, 0x41	; 65
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	6c 2f       	mov	r22, r28
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
     e4e:	0e 94 f3 06 	call	0xde6	; 0xde6 <pulse>
     e52:	8f ec       	ldi	r24, 0xCF	; 207
     e54:	97 e0       	ldi	r25, 0x07	; 7
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <lcd_send_cmd+0x42>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <lcd_send_cmd+0x48>
     e5c:	00 00       	nop
dm(1);
#endif
}
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <lcd_init>:
		//lcd_send_cmd(0x04);
lcd_send_cmd(entry_mode);
	dm(1);

#elif defined four_bits_mode
dio_set_pin(st1,0,1);
     e62:	81 e4       	ldi	r24, 0x41	; 65
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,1,1);
     e6c:	81 e4       	ldi	r24, 0x41	; 65
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,2,1);
     e76:	81 e4       	ldi	r24, 0x41	; 65
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,3,1);
     e80:	81 e4       	ldi	r24, 0x41	; 65
     e82:	63 e0       	ldi	r22, 0x03	; 3
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,en,1);
     e8a:	81 e4       	ldi	r24, 0x41	; 65
     e8c:	64 e0       	ldi	r22, 0x04	; 4
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,rs,1);
     e94:	81 e4       	ldi	r24, 0x41	; 65
     e96:	65 e0       	ldi	r22, 0x05	; 5
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>


lcd_send_cmd(return_home);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	9e e4       	ldi	r25, 0x4E	; 78
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <lcd_init+0x46>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <lcd_init+0x4c>
     eae:	00 00       	nop

dm(10);
lcd_send_cmd(four_bits);
     eb0:	88 e2       	ldi	r24, 0x28	; 40
     eb2:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     eb6:	8f ec       	ldi	r24, 0xCF	; 207
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <lcd_init+0x58>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <lcd_init+0x5e>
     ec0:	00 00       	nop
dm(1);

lcd_send_cmd(clr_screen);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     ec8:	8f e1       	ldi	r24, 0x1F	; 31
     eca:	9e e4       	ldi	r25, 0x4E	; 78
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <lcd_init+0x6a>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <lcd_init+0x70>
     ed2:	00 00       	nop
dm(10);
lcd_send_cmd(entry_mode);
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     eda:	8f ec       	ldi	r24, 0xCF	; 207
     edc:	97 e0       	ldi	r25, 0x07	; 7
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_init+0x7c>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <lcd_init+0x82>
     ee4:	00 00       	nop
dm(1);
lcd_send_cmd(cursor_on_disp_on);
     ee6:	8e e0       	ldi	r24, 0x0E	; 14
     ee8:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     eec:	8f ec       	ldi	r24, 0xCF	; 207
     eee:	97 e0       	ldi	r25, 0x07	; 7
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <lcd_init+0x8e>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <lcd_init+0x94>
     ef6:	00 00       	nop
dm(1);


#endif
}
     ef8:	08 95       	ret

00000efa <lcd_send_char>:
pulse();
dm(1);
#endif
}
void lcd_send_char(char data)
{
     efa:	cf 93       	push	r28
     efc:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,1);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
     efe:	68 2f       	mov	r22, r24
     f00:	62 95       	swap	r22
     f02:	6f 70       	andi	r22, 0x0F	; 15
     f04:	81 e4       	ldi	r24, 0x41	; 65
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,1);
     f0e:	81 e4       	ldi	r24, 0x41	; 65
     f10:	65 e0       	ldi	r22, 0x05	; 5
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
     f18:	0e 94 f3 06 	call	0xde6	; 0xde6 <pulse>
     f1c:	8f ec       	ldi	r24, 0xCF	; 207
     f1e:	97 e0       	ldi	r25, 0x07	; 7
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <lcd_send_char+0x26>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <lcd_send_char+0x2c>
     f26:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
     f28:	81 e4       	ldi	r24, 0x41	; 65
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	6c 2f       	mov	r22, r28
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
     f34:	0e 94 f3 06 	call	0xde6	; 0xde6 <pulse>
     f38:	8f ec       	ldi	r24, 0xCF	; 207
     f3a:	97 e0       	ldi	r25, 0x07	; 7
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <lcd_send_char+0x42>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <lcd_send_char+0x48>
     f42:	00 00       	nop
dm(1);
#endif
}
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <lcd_send_string>:
void lcd_send_string(char * data)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
	while (*data!='\0')
     f4e:	88 81       	ld	r24, Y
     f50:	88 23       	and	r24, r24
     f52:	31 f0       	breq	.+12     	; 0xf60 <lcd_send_string+0x18>
dio_write_lo_level(st1,data);
pulse();
dm(1);
#endif
}
void lcd_send_string(char * data)
     f54:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data!='\0')
	{
	lcd_send_char(*data);
     f56:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_send_char>
dm(1);
#endif
}
void lcd_send_string(char * data)
{
	while (*data!='\0')
     f5a:	89 91       	ld	r24, Y+
     f5c:	88 23       	and	r24, r24
     f5e:	d9 f7       	brne	.-10     	; 0xf56 <lcd_send_string+0xe>
     f60:	8f ec       	ldi	r24, 0xCF	; 207
     f62:	97 e0       	ldi	r25, 0x07	; 7
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <lcd_send_string+0x1c>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <lcd_send_string+0x22>
     f6a:	00 00       	nop

	
	}
		dm(1);
		
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <lcd_clrscrean>:
void lcd_clrscrean(void)
{
	lcd_send_cmd(clr_screen);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     f78:	8f e1       	ldi	r24, 0x1F	; 31
     f7a:	9e e4       	ldi	r25, 0x4E	; 78
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <lcd_clrscrean+0xa>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <lcd_clrscrean+0x10>
     f82:	00 00       	nop
	dm(10);
}
     f84:	08 95       	ret

00000f86 <lcd_move_cursor>:
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
     f86:	28 2f       	mov	r18, r24
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	70 f4       	brcc	.+28     	; 0xfaa <lcd_move_cursor+0x24>
     f8e:	66 23       	and	r22, r22
     f90:	71 f0       	breq	.+28     	; 0xfae <lcd_move_cursor+0x28>
     f92:	61 31       	cpi	r22, 0x11	; 17
     f94:	70 f4       	brcc	.+28     	; 0xfb2 <lcd_move_cursor+0x2c>
	{
	data =0x80;
	}
else if (row==1)
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	19 f4       	brne	.+6      	; 0xfa0 <lcd_move_cursor+0x1a>
{
	data=0x80+coloumn-1;
     f9a:	96 2f       	mov	r25, r22
     f9c:	91 58       	subi	r25, 0x81	; 129
     f9e:	0a c0       	rjmp	.+20     	; 0xfb4 <lcd_move_cursor+0x2e>
}
else if (row==2)
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	41 f4       	brne	.+16     	; 0xfb4 <lcd_move_cursor+0x2e>
{
	data=0xc0+coloumn-1;
     fa4:	96 2f       	mov	r25, r22
     fa6:	91 54       	subi	r25, 0x41	; 65
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <lcd_move_cursor+0x2e>
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
	data =0x80;
     faa:	90 e8       	ldi	r25, 0x80	; 128
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <lcd_move_cursor+0x2e>
     fae:	90 e8       	ldi	r25, 0x80	; 128
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <lcd_move_cursor+0x2e>
     fb2:	90 e8       	ldi	r25, 0x80	; 128
}
else if (row==2)
{
	data=0xc0+coloumn-1;
}
lcd_send_cmd(data);
     fb4:	89 2f       	mov	r24, r25
     fb6:	0e 94 0a 07 	call	0xe14	; 0xe14 <lcd_send_cmd>
     fba:	8f ec       	ldi	r24, 0xCF	; 207
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <lcd_move_cursor+0x38>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <lcd_move_cursor+0x3e>
     fc4:	00 00       	nop
dm(1);
}
     fc6:	08 95       	ret

00000fc8 <motor_selective_mode_init>:
 *  Author: handsa
 */ 
#include "DIO_drives.h"
#include "motor_drives.h"
void motor_selective_mode_init(unsigned char port)
{
     fc8:	cf 93       	push	r28
     fca:	c8 2f       	mov	r28, r24
	#if defined sellective_mode1
	{
		dio_set_pin(port,in11,1);
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
		dio_set_pin(port,in12,1);	
     fd4:	8c 2f       	mov	r24, r28
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
	}

#endif
}
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <clockwise>:
void clockwise(unsigned char port)
{
     fe2:	cf 93       	push	r28
     fe4:	c8 2f       	mov	r28, r24
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,1);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,0);
     fee:	8c 2f       	mov	r24, r28
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif

}
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <anti_clockwise>:
void anti_clockwise(unsigned char port)
{
     ffc:	cf 93       	push	r28
     ffe:	c8 2f       	mov	r28, r24
	
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,0);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,1);
    1008:	8c 2f       	mov	r24, r28
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif
}	
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <stop_motor>:
void stop_motor(unsigned char port)
{
    1016:	cf 93       	push	r28
    1018:	c8 2f       	mov	r28, r24
	
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,0);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,0);
    1022:	8c 2f       	mov	r24, r28
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif
}
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <button_init>:
 *  Author: handsa
 */ 
#include "DIO_drives.h"
void button_init(char port ,char pin)
{
	dio_set_pin(port,pin,0);
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
}
    1036:	08 95       	ret

00001038 <button_read>:
unsigned char button_read(char port ,char pin)
{
	return dio_read_pin(port,pin);
    1038:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <dio_read_pin>
}
    103c:	08 95       	ret

0000103e <_exit>:
    103e:	f8 94       	cli

00001040 <__stop_program>:
    1040:	ff cf       	rjmp	.-2      	; 0x1040 <__stop_program>
