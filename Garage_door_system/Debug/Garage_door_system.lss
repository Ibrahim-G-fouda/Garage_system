
Garage_door_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000145e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000145e  000014f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008000a8  008000a8  0000153a  2**0
                  ALLOC
  3 .stab         0000168c  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00003088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6c  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ab  00000000  00000000  00004e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001075  00000000  00000000  000057df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  00006854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00006d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001009  00000000  00000000  00007217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_1>
       8:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_2>
       c:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 03 	call	0x736	; 0x736 <main>
      8a:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin>:
 */ 
#include <avr/io.h>
#define  F_CPU  8000000Ul
void dio_set_pin(char port,char pin,char dir)
{
	switch (port)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <dio_set_pin+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <dio_set_pin+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <dio_set_pin+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <dio_set_pin+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <dio_set_pin+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <dio_set_pin+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <dio_set_pin+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <dio_set_pin+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <dio_set_pin+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <dio_set_pin+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <dio_set_pin+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <dio_set_pin+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <dio_set_pin+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <dio_set_pin+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <dio_set_pin+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <dio_set_pin+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <dio_set_pin+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <dio_set_pin+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <dio_set_pin+0xe8>
	{
		case 'A':
			case 'a':
			if (dir ==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <dio_set_pin+0x58>
			{
			DDRA|=(1<<pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <dio_set_pin+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <dio_set_pin+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
			}
	else
	{
	DDRA&=(~(1<<pin));	
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
	}break;
	
	case 'B':
	case 'b':
	if (dir ==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <dio_set_pin+0x92>
	{
		DDRB|=(1<<pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <dio_set_pin+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <dio_set_pin+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pin));
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <dio_set_pin+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <dio_set_pin+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
	}break;

case 'C':
case 'c':
if (dir ==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <dio_set_pin+0xcc>
{
	DDRC|=(1<<pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <dio_set_pin+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <dio_set_pin+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
}
else
{
	DDRC&=(~(1<<pin));
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <dio_set_pin+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <dio_set_pin+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
}break;
	
	case 'D':
	case 'd':
	if (dir ==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <dio_set_pin+0x106>
	{
		DDRD|=(1<<pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <dio_set_pin+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <dio_set_pin+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pin));
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <dio_set_pin+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <dio_set_pin+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <dio_write_pin>:
	break;
}
	}
	void dio_write_pin(char port,char pin,char val)
	{
		switch(port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <dio_write_pin+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <dio_write_pin+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <dio_write_pin+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <dio_write_pin+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <dio_write_pin+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <dio_write_pin+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <dio_write_pin+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <dio_write_pin+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <dio_write_pin+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <dio_write_pin+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <dio_write_pin+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <dio_write_pin+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <dio_write_pin+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <dio_write_pin+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <dio_write_pin+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <dio_write_pin+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <dio_write_pin+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <dio_write_pin+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <dio_write_pin+0xe8>
	{
		case  'A':
		case 'a':
		if (val==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <dio_write_pin+0x58>
		{
		PORTA=PORTA|(1<<pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <dio_write_pin+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <dio_write_pin+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
	else
	{
		PORTA=PORTA & (~(1<<pin));
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <dio_write_pin+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <dio_write_pin+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
	}break;
	case  'B':
	case 'b':
	if (val==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <dio_write_pin+0x92>
	{
		PORTB=PORTB|(1<<pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <dio_write_pin+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <dio_write_pin+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
	}
	else
	{
		PORTB=PORTB & (~(1<<pin));
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <dio_write_pin+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <dio_write_pin+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
	}break;
	case 'C':
	case 'c':
	if (val==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <dio_write_pin+0xcc>
	{
		PORTC =PORTC |(1<<pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <dio_write_pin+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <dio_write_pin+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
	}
	else
	{
		PORTC =PORTC  & (~(1<<pin));
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <dio_write_pin+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <dio_write_pin+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
	}break;
	case 'D':
	case 'd':
	if (val==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <dio_write_pin+0x106>
	{
		PORTD =PORTD |(1<<pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <dio_write_pin+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <dio_write_pin+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
	}
	else
	{
		PORTD =PORTD  & (~(1<<pin));
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <dio_write_pin+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <dio_write_pin+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <dio_read_pin>:
	}	
	}
		unsigned char dio_read_pin(	unsigned char port,	unsigned char pin)
		{
		unsigned char val ;
		switch(port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	b1 f1       	breq	.+108    	; 0x346 <dio_read_pin+0x70>
     2da:	85 34       	cpi	r24, 0x45	; 69
     2dc:	38 f4       	brcc	.+14     	; 0x2ec <dio_read_pin+0x16>
     2de:	82 34       	cpi	r24, 0x42	; 66
     2e0:	e1 f0       	breq	.+56     	; 0x31a <dio_read_pin+0x44>
     2e2:	83 34       	cpi	r24, 0x43	; 67
     2e4:	28 f5       	brcc	.+74     	; 0x330 <dio_read_pin+0x5a>
     2e6:	81 34       	cpi	r24, 0x41	; 65
     2e8:	c1 f5       	brne	.+112    	; 0x35a <dio_read_pin+0x84>
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <dio_read_pin+0x2e>
     2ec:	82 36       	cpi	r24, 0x62	; 98
     2ee:	a9 f0       	breq	.+42     	; 0x31a <dio_read_pin+0x44>
     2f0:	83 36       	cpi	r24, 0x63	; 99
     2f2:	18 f4       	brcc	.+6      	; 0x2fa <dio_read_pin+0x24>
     2f4:	81 36       	cpi	r24, 0x61	; 97
     2f6:	89 f5       	brne	.+98     	; 0x35a <dio_read_pin+0x84>
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <dio_read_pin+0x2e>
     2fa:	83 36       	cpi	r24, 0x63	; 99
     2fc:	c9 f0       	breq	.+50     	; 0x330 <dio_read_pin+0x5a>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	61 f5       	brne	.+88     	; 0x35a <dio_read_pin+0x84>
     302:	21 c0       	rjmp	.+66     	; 0x346 <dio_read_pin+0x70>
		{
		case 'A':
		case 'a':	
		val =((PINA>>pin)&1);
     304:	29 b3       	in	r18, 0x19	; 25
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_read_pin+0x3a>
     30c:	95 95       	asr	r25
     30e:	87 95       	ror	r24
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <dio_read_pin+0x36>
     314:	98 2f       	mov	r25, r24
     316:	91 70       	andi	r25, 0x01	; 1
		break;
     318:	20 c0       	rjmp	.+64     	; 0x35a <dio_read_pin+0x84>
		case  'B':
		case 'b':
		val =((PINB>>pin)&1);
     31a:	26 b3       	in	r18, 0x16	; 22
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	c9 01       	movw	r24, r18
     320:	02 c0       	rjmp	.+4      	; 0x326 <dio_read_pin+0x50>
     322:	95 95       	asr	r25
     324:	87 95       	ror	r24
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <dio_read_pin+0x4c>
     32a:	98 2f       	mov	r25, r24
     32c:	91 70       	andi	r25, 0x01	; 1
			break;;
     32e:	15 c0       	rjmp	.+42     	; 0x35a <dio_read_pin+0x84>
		case  'C':
		case 'c':
		val =((PINC>>pin)&1);
     330:	23 b3       	in	r18, 0x13	; 19
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	c9 01       	movw	r24, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <dio_read_pin+0x66>
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	6a 95       	dec	r22
     33e:	e2 f7       	brpl	.-8      	; 0x338 <dio_read_pin+0x62>
     340:	98 2f       	mov	r25, r24
     342:	91 70       	andi	r25, 0x01	; 1
			break;
     344:	0a c0       	rjmp	.+20     	; 0x35a <dio_read_pin+0x84>
			case  'D':
			case 'd':
			val =((PIND>>pin)&1);
     346:	20 b3       	in	r18, 0x10	; 16
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	c9 01       	movw	r24, r18
     34c:	02 c0       	rjmp	.+4      	; 0x352 <dio_read_pin+0x7c>
     34e:	95 95       	asr	r25
     350:	87 95       	ror	r24
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <dio_read_pin+0x78>
     356:	98 2f       	mov	r25, r24
     358:	91 70       	andi	r25, 0x01	; 1
			default:
			break;
		
		}
		return val;
				}		
     35a:	89 2f       	mov	r24, r25
     35c:	08 95       	ret

0000035e <dio_toggle_pin>:
				void dio_toggle_pin(char port,char pin)
				{
					switch (port)
     35e:	84 34       	cpi	r24, 0x44	; 68
     360:	09 f4       	brne	.+2      	; 0x364 <dio_toggle_pin+0x6>
     362:	3d c0       	rjmp	.+122    	; 0x3de <dio_toggle_pin+0x80>
     364:	85 34       	cpi	r24, 0x45	; 69
     366:	40 f4       	brcc	.+16     	; 0x378 <dio_toggle_pin+0x1a>
     368:	82 34       	cpi	r24, 0x42	; 66
     36a:	f9 f0       	breq	.+62     	; 0x3aa <dio_toggle_pin+0x4c>
     36c:	83 34       	cpi	r24, 0x43	; 67
     36e:	50 f5       	brcc	.+84     	; 0x3c4 <dio_toggle_pin+0x66>
     370:	81 34       	cpi	r24, 0x41	; 65
     372:	09 f0       	breq	.+2      	; 0x376 <dio_toggle_pin+0x18>
     374:	40 c0       	rjmp	.+128    	; 0x3f6 <dio_toggle_pin+0x98>
     376:	0c c0       	rjmp	.+24     	; 0x390 <dio_toggle_pin+0x32>
     378:	82 36       	cpi	r24, 0x62	; 98
     37a:	b9 f0       	breq	.+46     	; 0x3aa <dio_toggle_pin+0x4c>
     37c:	83 36       	cpi	r24, 0x63	; 99
     37e:	18 f4       	brcc	.+6      	; 0x386 <dio_toggle_pin+0x28>
     380:	81 36       	cpi	r24, 0x61	; 97
     382:	c9 f5       	brne	.+114    	; 0x3f6 <dio_toggle_pin+0x98>
     384:	05 c0       	rjmp	.+10     	; 0x390 <dio_toggle_pin+0x32>
     386:	83 36       	cpi	r24, 0x63	; 99
     388:	e9 f0       	breq	.+58     	; 0x3c4 <dio_toggle_pin+0x66>
     38a:	84 36       	cpi	r24, 0x64	; 100
     38c:	a1 f5       	brne	.+104    	; 0x3f6 <dio_toggle_pin+0x98>
     38e:	27 c0       	rjmp	.+78     	; 0x3de <dio_toggle_pin+0x80>
					{
					case 'A':
					case 'a':
					PORTA=PORTA^(1<<pin);
     390:	2b b3       	in	r18, 0x1b	; 27
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	ac 01       	movw	r20, r24
     398:	02 c0       	rjmp	.+4      	; 0x39e <dio_toggle_pin+0x40>
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <dio_toggle_pin+0x3c>
     3a2:	ba 01       	movw	r22, r20
     3a4:	62 27       	eor	r22, r18
     3a6:	6b bb       	out	0x1b, r22	; 27
					break;
     3a8:	08 95       	ret
					case 'b':
					case 'B':
					PORTB=PORTB^(1<<pin);
     3aa:	28 b3       	in	r18, 0x18	; 24
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	ac 01       	movw	r20, r24
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_toggle_pin+0x5a>
     3b4:	44 0f       	add	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_toggle_pin+0x56>
     3bc:	ba 01       	movw	r22, r20
     3be:	62 27       	eor	r22, r18
     3c0:	68 bb       	out	0x18, r22	; 24
					break;
     3c2:	08 95       	ret
					case 'C':
					case 'c':
					PORTC=PORTC^(1<<pin);
     3c4:	25 b3       	in	r18, 0x15	; 21
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	ac 01       	movw	r20, r24
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <dio_toggle_pin+0x74>
     3ce:	44 0f       	add	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <dio_toggle_pin+0x70>
     3d6:	ba 01       	movw	r22, r20
     3d8:	62 27       	eor	r22, r18
     3da:	65 bb       	out	0x15, r22	; 21
					break;
     3dc:	08 95       	ret
					case  'D':
					case 'd':
					PORTD=PORTD^(1<<pin);
     3de:	22 b3       	in	r18, 0x12	; 18
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	ac 01       	movw	r20, r24
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <dio_toggle_pin+0x8e>
     3e8:	44 0f       	add	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <dio_toggle_pin+0x8a>
     3f0:	ba 01       	movw	r22, r20
     3f2:	62 27       	eor	r22, r18
     3f4:	62 bb       	out	0x12, r22	; 18
     3f6:	08 95       	ret

000003f8 <dio_set_port>:
					break;
					}
			}
			void dio_set_port(unsigned char port,unsigned char dir)
			{
				switch(port)
     3f8:	84 34       	cpi	r24, 0x44	; 68
     3fa:	d9 f0       	breq	.+54     	; 0x432 <dio_set_port+0x3a>
     3fc:	85 34       	cpi	r24, 0x45	; 69
     3fe:	38 f4       	brcc	.+14     	; 0x40e <dio_set_port+0x16>
     400:	82 34       	cpi	r24, 0x42	; 66
     402:	99 f0       	breq	.+38     	; 0x42a <dio_set_port+0x32>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	98 f4       	brcc	.+38     	; 0x42e <dio_set_port+0x36>
     408:	81 34       	cpi	r24, 0x41	; 65
     40a:	a1 f4       	brne	.+40     	; 0x434 <dio_set_port+0x3c>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <dio_set_port+0x2e>
     40e:	82 36       	cpi	r24, 0x62	; 98
     410:	61 f0       	breq	.+24     	; 0x42a <dio_set_port+0x32>
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	18 f4       	brcc	.+6      	; 0x41c <dio_set_port+0x24>
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	69 f4       	brne	.+26     	; 0x434 <dio_set_port+0x3c>
     41a:	05 c0       	rjmp	.+10     	; 0x426 <dio_set_port+0x2e>
     41c:	83 36       	cpi	r24, 0x63	; 99
     41e:	39 f0       	breq	.+14     	; 0x42e <dio_set_port+0x36>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	41 f4       	brne	.+16     	; 0x434 <dio_set_port+0x3c>
     424:	06 c0       	rjmp	.+12     	; 0x432 <dio_set_port+0x3a>
				{
				case 'A':
				case 'a':
					DDRA=dir;
     426:	6a bb       	out	0x1a, r22	; 26
	break;
     428:	08 95       	ret
	case 'b':
	case 'B':
	DDRB=dir;
     42a:	67 bb       	out	0x17, r22	; 23
	break;
     42c:	08 95       	ret
	case 'C':
	case 'c':
	DDRC=dir;
     42e:	64 bb       	out	0x14, r22	; 20
	break;
     430:	08 95       	ret
	case  'D':
	case 'd':
	DDRD=dir;
     432:	61 bb       	out	0x11, r22	; 17
     434:	08 95       	ret

00000436 <dio_write_port>:
	
	}
}
void dio_write_port(char port,unsigned char val)
{
	switch(port)
     436:	84 34       	cpi	r24, 0x44	; 68
     438:	d9 f0       	breq	.+54     	; 0x470 <dio_write_port+0x3a>
     43a:	85 34       	cpi	r24, 0x45	; 69
     43c:	38 f4       	brcc	.+14     	; 0x44c <dio_write_port+0x16>
     43e:	82 34       	cpi	r24, 0x42	; 66
     440:	99 f0       	breq	.+38     	; 0x468 <dio_write_port+0x32>
     442:	83 34       	cpi	r24, 0x43	; 67
     444:	98 f4       	brcc	.+38     	; 0x46c <dio_write_port+0x36>
     446:	81 34       	cpi	r24, 0x41	; 65
     448:	a1 f4       	brne	.+40     	; 0x472 <dio_write_port+0x3c>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <dio_write_port+0x2e>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	61 f0       	breq	.+24     	; 0x468 <dio_write_port+0x32>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	18 f4       	brcc	.+6      	; 0x45a <dio_write_port+0x24>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	69 f4       	brne	.+26     	; 0x472 <dio_write_port+0x3c>
     458:	05 c0       	rjmp	.+10     	; 0x464 <dio_write_port+0x2e>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	39 f0       	breq	.+14     	; 0x46c <dio_write_port+0x36>
     45e:	84 36       	cpi	r24, 0x64	; 100
     460:	41 f4       	brne	.+16     	; 0x472 <dio_write_port+0x3c>
     462:	06 c0       	rjmp	.+12     	; 0x470 <dio_write_port+0x3a>
	{
	case 'A':
	case 'a':
	PORTA=val;	
     464:	6b bb       	out	0x1b, r22	; 27
	break;
     466:	08 95       	ret
	case 'B':
	case 'b':
	PORTB=val;
     468:	68 bb       	out	0x18, r22	; 24
	break;
     46a:	08 95       	ret
	case 'C':
	case 'c':
	PORTC=val;
     46c:	65 bb       	out	0x15, r22	; 21
	break;
     46e:	08 95       	ret
	case 'D':
	case 'd':
	PORTD=val;
     470:	62 bb       	out	0x12, r22	; 18
     472:	08 95       	ret

00000474 <dio_read_port>:
	}
}
unsigned char dio_read_port(unsigned char port)
{
	unsigned char val;
	switch (port)
     474:	84 34       	cpi	r24, 0x44	; 68
     476:	d9 f0       	breq	.+54     	; 0x4ae <dio_read_port+0x3a>
     478:	85 34       	cpi	r24, 0x45	; 69
     47a:	38 f4       	brcc	.+14     	; 0x48a <dio_read_port+0x16>
     47c:	82 34       	cpi	r24, 0x42	; 66
     47e:	99 f0       	breq	.+38     	; 0x4a6 <dio_read_port+0x32>
     480:	83 34       	cpi	r24, 0x43	; 67
     482:	98 f4       	brcc	.+38     	; 0x4aa <dio_read_port+0x36>
     484:	81 34       	cpi	r24, 0x41	; 65
     486:	a1 f4       	brne	.+40     	; 0x4b0 <dio_read_port+0x3c>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <dio_read_port+0x2e>
     48a:	82 36       	cpi	r24, 0x62	; 98
     48c:	61 f0       	breq	.+24     	; 0x4a6 <dio_read_port+0x32>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	18 f4       	brcc	.+6      	; 0x498 <dio_read_port+0x24>
     492:	81 36       	cpi	r24, 0x61	; 97
     494:	69 f4       	brne	.+26     	; 0x4b0 <dio_read_port+0x3c>
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <dio_read_port+0x2e>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	39 f0       	breq	.+14     	; 0x4aa <dio_read_port+0x36>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	41 f4       	brne	.+16     	; 0x4b0 <dio_read_port+0x3c>
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <dio_read_port+0x3a>
	{
	case 'a' :
	case 'A' :
	val=PINA;
     4a2:	89 b3       	in	r24, 0x19	; 25
	break;
     4a4:	08 95       	ret
	case 'B' :
	case 'b' :
	val=PINB;
     4a6:	86 b3       	in	r24, 0x16	; 22
	break;
     4a8:	08 95       	ret
	case 'C' :
	case 'c' :
	val=PINC;
     4aa:	83 b3       	in	r24, 0x13	; 19
	break;
     4ac:	08 95       	ret
	case 'D' :
	case 'd' :
	val=PIND;
     4ae:	80 b3       	in	r24, 0x10	; 16
	default:
	break;
	
	}
	
}
     4b0:	08 95       	ret

000004b2 <dio_toggle_port>:
void dio_toggle_port(char port)
{
		unsigned char val;
		switch (port)
     4b2:	84 34       	cpi	r24, 0x44	; 68
     4b4:	09 f1       	breq	.+66     	; 0x4f8 <dio_toggle_port+0x46>
     4b6:	85 34       	cpi	r24, 0x45	; 69
     4b8:	38 f4       	brcc	.+14     	; 0x4c8 <dio_toggle_port+0x16>
     4ba:	82 34       	cpi	r24, 0x42	; 66
     4bc:	a9 f0       	breq	.+42     	; 0x4e8 <dio_toggle_port+0x36>
     4be:	83 34       	cpi	r24, 0x43	; 67
     4c0:	b8 f4       	brcc	.+46     	; 0x4f0 <dio_toggle_port+0x3e>
     4c2:	81 34       	cpi	r24, 0x41	; 65
     4c4:	e1 f4       	brne	.+56     	; 0x4fe <dio_toggle_port+0x4c>
     4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <dio_toggle_port+0x2e>
     4c8:	82 36       	cpi	r24, 0x62	; 98
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <dio_toggle_port+0x36>
     4cc:	83 36       	cpi	r24, 0x63	; 99
     4ce:	18 f4       	brcc	.+6      	; 0x4d6 <dio_toggle_port+0x24>
     4d0:	81 36       	cpi	r24, 0x61	; 97
     4d2:	a9 f4       	brne	.+42     	; 0x4fe <dio_toggle_port+0x4c>
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <dio_toggle_port+0x2e>
     4d6:	83 36       	cpi	r24, 0x63	; 99
     4d8:	59 f0       	breq	.+22     	; 0x4f0 <dio_toggle_port+0x3e>
     4da:	84 36       	cpi	r24, 0x64	; 100
     4dc:	81 f4       	brne	.+32     	; 0x4fe <dio_toggle_port+0x4c>
     4de:	0c c0       	rjmp	.+24     	; 0x4f8 <dio_toggle_port+0x46>
		{
			case 'a' :
			case 'A' :
			PORTA=~PORTA;
     4e0:	8b b3       	in	r24, 0x1b	; 27
     4e2:	80 95       	com	r24
     4e4:	8b bb       	out	0x1b, r24	; 27
			break;
     4e6:	08 95       	ret
			case 'B' :
			case 'b' :
				PORTB=~PORTB;
     4e8:	88 b3       	in	r24, 0x18	; 24
     4ea:	80 95       	com	r24
     4ec:	88 bb       	out	0x18, r24	; 24
			break;
     4ee:	08 95       	ret
			case 'C' :
			case 'c' :
				PORTC=~PORTC;
     4f0:	85 b3       	in	r24, 0x15	; 21
     4f2:	80 95       	com	r24
     4f4:	85 bb       	out	0x15, r24	; 21
			break;
     4f6:	08 95       	ret
			case 'D' :
			case 'd' :
		PORTD=~PORTD;
     4f8:	82 b3       	in	r24, 0x12	; 18
     4fa:	80 95       	com	r24
     4fc:	82 bb       	out	0x12, r24	; 18
     4fe:	08 95       	ret

00000500 <dio_pull_up_en>:
		}
}
void dio_pull_up_en (char port,char pin ,char en)
{
	
	switch(port)
     500:	84 34       	cpi	r24, 0x44	; 68
     502:	09 f4       	brne	.+2      	; 0x506 <dio_pull_up_en+0x6>
     504:	80 c0       	rjmp	.+256    	; 0x606 <dio_pull_up_en+0x106>
     506:	85 34       	cpi	r24, 0x45	; 69
     508:	48 f4       	brcc	.+18     	; 0x51c <dio_pull_up_en+0x1c>
     50a:	82 34       	cpi	r24, 0x42	; 66
     50c:	c1 f1       	breq	.+112    	; 0x57e <dio_pull_up_en+0x7e>
     50e:	83 34       	cpi	r24, 0x43	; 67
     510:	08 f0       	brcs	.+2      	; 0x514 <dio_pull_up_en+0x14>
     512:	57 c0       	rjmp	.+174    	; 0x5c2 <dio_pull_up_en+0xc2>
     514:	81 34       	cpi	r24, 0x41	; 65
     516:	09 f0       	breq	.+2      	; 0x51a <dio_pull_up_en+0x1a>
     518:	97 c0       	rjmp	.+302    	; 0x648 <dio_pull_up_en+0x148>
     51a:	0f c0       	rjmp	.+30     	; 0x53a <dio_pull_up_en+0x3a>
     51c:	82 36       	cpi	r24, 0x62	; 98
     51e:	79 f1       	breq	.+94     	; 0x57e <dio_pull_up_en+0x7e>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	20 f4       	brcc	.+8      	; 0x52c <dio_pull_up_en+0x2c>
     524:	81 36       	cpi	r24, 0x61	; 97
     526:	09 f0       	breq	.+2      	; 0x52a <dio_pull_up_en+0x2a>
     528:	8f c0       	rjmp	.+286    	; 0x648 <dio_pull_up_en+0x148>
     52a:	07 c0       	rjmp	.+14     	; 0x53a <dio_pull_up_en+0x3a>
     52c:	83 36       	cpi	r24, 0x63	; 99
     52e:	09 f4       	brne	.+2      	; 0x532 <dio_pull_up_en+0x32>
     530:	48 c0       	rjmp	.+144    	; 0x5c2 <dio_pull_up_en+0xc2>
     532:	84 36       	cpi	r24, 0x64	; 100
     534:	09 f0       	breq	.+2      	; 0x538 <dio_pull_up_en+0x38>
     536:	88 c0       	rjmp	.+272    	; 0x648 <dio_pull_up_en+0x148>
     538:	66 c0       	rjmp	.+204    	; 0x606 <dio_pull_up_en+0x106>
{
	case 'a':
	case 'A':
if (en==1)
     53a:	41 30       	cpi	r20, 0x01	; 1
     53c:	91 f4       	brne	.+36     	; 0x562 <dio_pull_up_en+0x62>
{
PORTA=PORTA|(1<<pin);
     53e:	2b b3       	in	r18, 0x1b	; 27
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	ac 01       	movw	r20, r24
     546:	02 c0       	rjmp	.+4      	; 0x54c <dio_pull_up_en+0x4c>
     548:	44 0f       	add	r20, r20
     54a:	55 1f       	adc	r21, r21
     54c:	6a 95       	dec	r22
     54e:	e2 f7       	brpl	.-8      	; 0x548 <dio_pull_up_en+0x48>
     550:	ba 01       	movw	r22, r20
     552:	82 2f       	mov	r24, r18
     554:	84 2b       	or	r24, r20
     556:	8b bb       	out	0x1b, r24	; 27
DDRA=DDRA&(~(1<<pin));
     558:	8a b3       	in	r24, 0x1a	; 26
     55a:	60 95       	com	r22
     55c:	68 23       	and	r22, r24
     55e:	6a bb       	out	0x1a, r22	; 26
     560:	08 95       	ret
}
else
{
	PORTA=PORTA&(~(1<<pin));
     562:	2b b3       	in	r18, 0x1b	; 27
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	ac 01       	movw	r20, r24
     56a:	02 c0       	rjmp	.+4      	; 0x570 <dio_pull_up_en+0x70>
     56c:	44 0f       	add	r20, r20
     56e:	55 1f       	adc	r21, r21
     570:	6a 95       	dec	r22
     572:	e2 f7       	brpl	.-8      	; 0x56c <dio_pull_up_en+0x6c>
     574:	ba 01       	movw	r22, r20
     576:	60 95       	com	r22
     578:	62 23       	and	r22, r18
     57a:	6b bb       	out	0x1b, r22	; 27
     57c:	08 95       	ret
}break;
case 'b':
case 'B':
if (en==1)
     57e:	41 30       	cpi	r20, 0x01	; 1
     580:	91 f4       	brne	.+36     	; 0x5a6 <dio_pull_up_en+0xa6>
{
	PORTB=PORTB|(1<<pin);
     582:	28 b3       	in	r18, 0x18	; 24
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	ac 01       	movw	r20, r24
     58a:	02 c0       	rjmp	.+4      	; 0x590 <dio_pull_up_en+0x90>
     58c:	44 0f       	add	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	6a 95       	dec	r22
     592:	e2 f7       	brpl	.-8      	; 0x58c <dio_pull_up_en+0x8c>
     594:	ba 01       	movw	r22, r20
     596:	82 2f       	mov	r24, r18
     598:	84 2b       	or	r24, r20
     59a:	88 bb       	out	0x18, r24	; 24
	DDRB=DDRB&(~(1<<pin));
     59c:	87 b3       	in	r24, 0x17	; 23
     59e:	60 95       	com	r22
     5a0:	68 23       	and	r22, r24
     5a2:	67 bb       	out	0x17, r22	; 23
     5a4:	08 95       	ret
}
else
{
	PORTB=PORTB&(~(1<<pin));
     5a6:	28 b3       	in	r18, 0x18	; 24
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <dio_pull_up_en+0xb4>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <dio_pull_up_en+0xb0>
     5b8:	ba 01       	movw	r22, r20
     5ba:	60 95       	com	r22
     5bc:	62 23       	and	r22, r18
     5be:	68 bb       	out	0x18, r22	; 24
     5c0:	08 95       	ret
}break;
case 'c':
case 'C':
if (en==1)
     5c2:	41 30       	cpi	r20, 0x01	; 1
     5c4:	91 f4       	brne	.+36     	; 0x5ea <dio_pull_up_en+0xea>
{
	PORTC=PORTC|(1<<pin);
     5c6:	25 b3       	in	r18, 0x15	; 21
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	ac 01       	movw	r20, r24
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <dio_pull_up_en+0xd4>
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <dio_pull_up_en+0xd0>
     5d8:	ba 01       	movw	r22, r20
     5da:	82 2f       	mov	r24, r18
     5dc:	84 2b       	or	r24, r20
     5de:	85 bb       	out	0x15, r24	; 21
	DDRC=DDRC&(~(1<<pin));
     5e0:	84 b3       	in	r24, 0x14	; 20
     5e2:	60 95       	com	r22
     5e4:	68 23       	and	r22, r24
     5e6:	64 bb       	out	0x14, r22	; 20
     5e8:	08 95       	ret
}
else
{
	PORTC=PORTC&(~(1<<pin));
     5ea:	25 b3       	in	r18, 0x15	; 21
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	ac 01       	movw	r20, r24
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <dio_pull_up_en+0xf8>
     5f4:	44 0f       	add	r20, r20
     5f6:	55 1f       	adc	r21, r21
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <dio_pull_up_en+0xf4>
     5fc:	ba 01       	movw	r22, r20
     5fe:	60 95       	com	r22
     600:	62 23       	and	r22, r18
     602:	65 bb       	out	0x15, r22	; 21
     604:	08 95       	ret
}break;
case 'd':
case 'D':
if (en==1)
     606:	41 30       	cpi	r20, 0x01	; 1
     608:	91 f4       	brne	.+36     	; 0x62e <dio_pull_up_en+0x12e>
{
	PORTD=PORTD|(1<<pin);
     60a:	22 b3       	in	r18, 0x12	; 18
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	ac 01       	movw	r20, r24
     612:	02 c0       	rjmp	.+4      	; 0x618 <dio_pull_up_en+0x118>
     614:	44 0f       	add	r20, r20
     616:	55 1f       	adc	r21, r21
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <dio_pull_up_en+0x114>
     61c:	ba 01       	movw	r22, r20
     61e:	82 2f       	mov	r24, r18
     620:	84 2b       	or	r24, r20
     622:	82 bb       	out	0x12, r24	; 18
	DDRD=DDRD&(~(1<<pin));
     624:	81 b3       	in	r24, 0x11	; 17
     626:	60 95       	com	r22
     628:	68 23       	and	r22, r24
     62a:	61 bb       	out	0x11, r22	; 17
     62c:	08 95       	ret
}
else
{
	PORTD=PORTD&(~(1<<pin));
     62e:	22 b3       	in	r18, 0x12	; 18
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ac 01       	movw	r20, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <dio_pull_up_en+0x13c>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <dio_pull_up_en+0x138>
     640:	ba 01       	movw	r22, r20
     642:	60 95       	com	r22
     644:	62 23       	and	r22, r18
     646:	62 bb       	out	0x12, r22	; 18
     648:	08 95       	ret

0000064a <dio_write_lo_level>:
break;
}
}
void dio_write_lo_level(char port,unsigned char val)
{
	val=val & 0x0f;
     64a:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     64c:	84 34       	cpi	r24, 0x44	; 68
     64e:	51 f1       	breq	.+84     	; 0x6a4 <dio_write_lo_level+0x5a>
     650:	85 34       	cpi	r24, 0x45	; 69
     652:	38 f4       	brcc	.+14     	; 0x662 <dio_write_lo_level+0x18>
     654:	82 34       	cpi	r24, 0x42	; 66
     656:	c1 f0       	breq	.+48     	; 0x688 <dio_write_lo_level+0x3e>
     658:	83 34       	cpi	r24, 0x43	; 67
     65a:	e8 f4       	brcc	.+58     	; 0x696 <dio_write_lo_level+0x4c>
     65c:	81 34       	cpi	r24, 0x41	; 65
     65e:	41 f5       	brne	.+80     	; 0x6b0 <dio_write_lo_level+0x66>
     660:	0c c0       	rjmp	.+24     	; 0x67a <dio_write_lo_level+0x30>
     662:	82 36       	cpi	r24, 0x62	; 98
     664:	89 f0       	breq	.+34     	; 0x688 <dio_write_lo_level+0x3e>
     666:	83 36       	cpi	r24, 0x63	; 99
     668:	18 f4       	brcc	.+6      	; 0x670 <dio_write_lo_level+0x26>
     66a:	81 36       	cpi	r24, 0x61	; 97
     66c:	09 f5       	brne	.+66     	; 0x6b0 <dio_write_lo_level+0x66>
     66e:	05 c0       	rjmp	.+10     	; 0x67a <dio_write_lo_level+0x30>
     670:	83 36       	cpi	r24, 0x63	; 99
     672:	89 f0       	breq	.+34     	; 0x696 <dio_write_lo_level+0x4c>
     674:	84 36       	cpi	r24, 0x64	; 100
     676:	e1 f4       	brne	.+56     	; 0x6b0 <dio_write_lo_level+0x66>
     678:	15 c0       	rjmp	.+42     	; 0x6a4 <dio_write_lo_level+0x5a>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0xf0;
     67a:	8b b3       	in	r24, 0x1b	; 27
     67c:	80 7f       	andi	r24, 0xF0	; 240
     67e:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     680:	8b b3       	in	r24, 0x1b	; 27
     682:	68 2b       	or	r22, r24
     684:	6b bb       	out	0x1b, r22	; 27
		break;
     686:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0xf0;
     688:	88 b3       	in	r24, 0x18	; 24
     68a:	80 7f       	andi	r24, 0xF0	; 240
     68c:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     68e:	88 b3       	in	r24, 0x18	; 24
     690:	68 2b       	or	r22, r24
     692:	68 bb       	out	0x18, r22	; 24
		break;
     694:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0xf0;
     696:	85 b3       	in	r24, 0x15	; 21
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     69c:	85 b3       	in	r24, 0x15	; 21
     69e:	68 2b       	or	r22, r24
     6a0:	65 bb       	out	0x15, r22	; 21
		break;
     6a2:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0xf0;
     6a4:	82 b3       	in	r24, 0x12	; 18
     6a6:	80 7f       	andi	r24, 0xF0	; 240
     6a8:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     6aa:	82 b3       	in	r24, 0x12	; 18
     6ac:	68 2b       	or	r22, r24
     6ae:	62 bb       	out	0x12, r22	; 18
     6b0:	08 95       	ret

000006b2 <dio_write_hi_level>:

}
void dio_write_hi_level(char port,unsigned char val)
{
	val =val <<4;
	val=val & 0xf0;
     6b2:	62 95       	swap	r22
     6b4:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
     6b6:	84 34       	cpi	r24, 0x44	; 68
     6b8:	51 f1       	breq	.+84     	; 0x70e <dio_write_hi_level+0x5c>
     6ba:	85 34       	cpi	r24, 0x45	; 69
     6bc:	38 f4       	brcc	.+14     	; 0x6cc <dio_write_hi_level+0x1a>
     6be:	82 34       	cpi	r24, 0x42	; 66
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <dio_write_hi_level+0x40>
     6c2:	83 34       	cpi	r24, 0x43	; 67
     6c4:	e8 f4       	brcc	.+58     	; 0x700 <dio_write_hi_level+0x4e>
     6c6:	81 34       	cpi	r24, 0x41	; 65
     6c8:	41 f5       	brne	.+80     	; 0x71a <dio_write_hi_level+0x68>
     6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <dio_write_hi_level+0x32>
     6cc:	82 36       	cpi	r24, 0x62	; 98
     6ce:	89 f0       	breq	.+34     	; 0x6f2 <dio_write_hi_level+0x40>
     6d0:	83 36       	cpi	r24, 0x63	; 99
     6d2:	18 f4       	brcc	.+6      	; 0x6da <dio_write_hi_level+0x28>
     6d4:	81 36       	cpi	r24, 0x61	; 97
     6d6:	09 f5       	brne	.+66     	; 0x71a <dio_write_hi_level+0x68>
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <dio_write_hi_level+0x32>
     6da:	83 36       	cpi	r24, 0x63	; 99
     6dc:	89 f0       	breq	.+34     	; 0x700 <dio_write_hi_level+0x4e>
     6de:	84 36       	cpi	r24, 0x64	; 100
     6e0:	e1 f4       	brne	.+56     	; 0x71a <dio_write_hi_level+0x68>
     6e2:	15 c0       	rjmp	.+42     	; 0x70e <dio_write_hi_level+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0x0f;
     6e4:	8b b3       	in	r24, 0x1b	; 27
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     6ea:	8b b3       	in	r24, 0x1b	; 27
     6ec:	68 2b       	or	r22, r24
     6ee:	6b bb       	out	0x1b, r22	; 27
		break;
     6f0:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0x0f;
     6f2:	88 b3       	in	r24, 0x18	; 24
     6f4:	8f 70       	andi	r24, 0x0F	; 15
     6f6:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     6f8:	88 b3       	in	r24, 0x18	; 24
     6fa:	68 2b       	or	r22, r24
     6fc:	68 bb       	out	0x18, r22	; 24
		break;
     6fe:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0x0f;
     700:	85 b3       	in	r24, 0x15	; 21
     702:	8f 70       	andi	r24, 0x0F	; 15
     704:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     706:	85 b3       	in	r24, 0x15	; 21
     708:	68 2b       	or	r22, r24
     70a:	65 bb       	out	0x15, r22	; 21
		break;
     70c:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0x0f;
     70e:	82 b3       	in	r24, 0x12	; 18
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     714:	82 b3       	in	r24, 0x12	; 18
     716:	68 2b       	or	r22, r24
     718:	62 bb       	out	0x12, r22	; 18
     71a:	08 95       	ret

0000071c <EEPROM_write>:
 */ 
#include <avr/io.h>	
#include "std_macros1.h"
void EEPROM_write(const unsigned short address,unsigned char data)
{
	EEAR=address;
     71c:	9f bb       	out	0x1f, r25	; 31
     71e:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;
     720:	6d bb       	out	0x1d, r22	; 29
	set_bit(EECR,EEMWE);
     722:	e2 9a       	sbi	0x1c, 2	; 28
	set_bit(EECR,EEWE);
     724:	e1 9a       	sbi	0x1c, 1	; 28
	while(read_bit(EECR,EEWE)==1);
     726:	e1 99       	sbic	0x1c, 1	; 28
     728:	fe cf       	rjmp	.-4      	; 0x726 <EEPROM_write+0xa>
	{
		
	}
}
     72a:	08 95       	ret

0000072c <EEPROM_read>:
unsigned char EEPROM_read(const unsigned short address)
{
EEAR=address;
     72c:	9f bb       	out	0x1f, r25	; 31
     72e:	8e bb       	out	0x1e, r24	; 30
set_bit(EECR,EERE);
     730:	e0 9a       	sbi	0x1c, 0	; 28
return EEDR;
     732:	8d b3       	in	r24, 0x1d	; 29
	
     734:	08 95       	ret

00000736 <main>:

#ifndef INT0POS_E_H_
#define INT0POS_E_H_


sei();//SREG|=(1<<7) ; 
     736:	78 94       	sei
MCUCR=MCUCR|(1<<ISC00)|(1<<ISC01);
     738:	85 b7       	in	r24, 0x35	; 53
     73a:	83 60       	ori	r24, 0x03	; 3
     73c:	85 bf       	out	0x35, r24	; 53
GICR=GICR|(1<<INT0);
     73e:	8b b7       	in	r24, 0x3b	; 59
     740:	80 64       	ori	r24, 0x40	; 64
     742:	8b bf       	out	0x3b, r24	; 59


#ifndef INT1POS_E_H_
#define INT1POS_E_H_

MCUCR=MCUCR|(1<<ISC10)|(1<<ISC11);
     744:	85 b7       	in	r24, 0x35	; 53
     746:	8c 60       	ori	r24, 0x0C	; 12
     748:	85 bf       	out	0x35, r24	; 53
GICR=GICR|(1<<INT1);
     74a:	8b b7       	in	r24, 0x3b	; 59
     74c:	80 68       	ori	r24, 0x80	; 128
     74e:	8b bf       	out	0x3b, r24	; 59
sei();
     750:	78 94       	sei
 */ 


#ifndef INCFILE1_H_
#define INCFILE1_H_
sei();//SREG|=(1<<7) ; 
     752:	78 94       	sei
set_bit(MCUCSR,ISC2);
     754:	84 b7       	in	r24, 0x34	; 52
     756:	80 64       	ori	r24, 0x40	; 64
     758:	84 bf       	out	0x34, r24	; 52
GICR=GICR|(1<<INT2);
     75a:	8b b7       	in	r24, 0x3b	; 59
     75c:	80 62       	ori	r24, 0x20	; 32
     75e:	8b bf       	out	0x3b, r24	; 59

   #include "int0pos_e.h"
   #include "int1pos_e.h"
   #include "int2pos_e.h"
 
   flag=1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 ad 00 	sts	0x00AD, r24
  unsigned short dist;
  motor_selective_mode_init('b');
     766:	82 e6       	ldi	r24, 0x62	; 98
     768:	0e 94 ae 07 	call	0xf5c	; 0xf5c <motor_selective_mode_init>
 
  button_init('a',6);
     76c:	81 e6       	ldi	r24, 0x61	; 97
     76e:	66 e0       	ldi	r22, 0x06	; 6
     770:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <button_init>
 lcd_init();
     774:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <lcd_init>
 lcd_send_cmd(disp_on_cursor_off);
     778:	8c e0       	ldi	r24, 0x0C	; 12
     77a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
 i2c_clock_init(50000);
     77e:	60 e5       	ldi	r22, 0x50	; 80
     780:	73 ec       	ldi	r23, 0xC3	; 195
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 61 05 	call	0xac2	; 0xac2 <i2c_clock_init>

	i2c_start();
     78a:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
	i2c_adress(0b10100000);
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
i2c_data(0x21);
     794:	81 e2       	ldi	r24, 0x21	; 33
     796:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
i2c_stop();
     79a:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	90 e7       	ldi	r25, 0x70	; 112
     7a2:	a2 e0       	ldi	r26, 0x02	; 2
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	90 40       	sbci	r25, 0x00	; 0
     7a8:	a0 40       	sbci	r26, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x6e>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x78>
     7ae:	00 00       	nop
				lcd_clrscrean();
				lcd_send_string("door close...");
					
			
		latch1=0;
		latch3=1;
     7b0:	01 e0       	ldi	r16, 0x01	; 1
		i2c_stop();
		dm(150);
		if (car_count==max)
		{
		 lcd_send_cmd(clr_screen);
		 lcd_send_string("The garage is full");
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f5 e8       	ldi	r31, 0x85	; 133
     7b6:	8f 2e       	mov	r8, r31
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	9f 2e       	mov	r9, r31
     7bc:	f0 2d       	mov	r31, r0
			
			clockwise('b');
			//flag=1;
			
				lcd_clrscrean();
				lcd_send_string("door close...");
     7be:	0f 2e       	mov	r0, r31
     7c0:	f7 e7       	ldi	r31, 0x77	; 119
     7c2:	ef 2e       	mov	r14, r31
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	ff 2e       	mov	r15, r31
     7c8:	f0 2d       	mov	r31, r0
					
			
		latch1=0;
		latch3=1;
     7ca:	10 2f       	mov	r17, r16
	i2c_adress(0b10100000);
	i2c_data(car_count+48);
	i2c_stop();
	dm(100);
lcd_move_cursor(1,1);
lcd_send_string("distance:");
     7cc:	0f 2e       	mov	r0, r31
     7ce:	f0 e6       	ldi	r31, 0x60	; 96
     7d0:	af 2e       	mov	r10, r31
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	bf 2e       	mov	r11, r31
     7d6:	f0 2d       	mov	r31, r0
		lcd_move_cursor(1,10);
		dist=ultra_sonic_read();
		tostring(str,dist);
     7d8:	0f 2e       	mov	r0, r31
     7da:	ff ea       	ldi	r31, 0xAF	; 175
     7dc:	cf 2e       	mov	r12, r31
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	df 2e       	mov	r13, r31
     7e2:	f0 2d       	mov	r31, r0
		if ((dist<=20))
		{
	anti_clockwise('b');
	flag=0;
	lcd_move_cursor(2,1);
	lcd_send_string("Door open...");
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa e6       	ldi	r31, 0x6A	; 106
     7e8:	6f 2e       	mov	r6, r31
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	7f 2e       	mov	r7, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	67 c0       	rjmp	.+206    	; 0x8c0 <__stack+0x61>
{
	
	
	while(flag==1)
	{
	i2c_start();
     7f2:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
	i2c_adress(0b10100000);
     7f6:	80 ea       	ldi	r24, 0xA0	; 160
     7f8:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
	i2c_data(0x21);
     7fc:	81 e2       	ldi	r24, 0x21	; 33
     7fe:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
	i2c_stop();
     802:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	90 e7       	ldi	r25, 0x70	; 112
     80a:	a2 e0       	ldi	r26, 0x02	; 2
     80c:	81 50       	subi	r24, 0x01	; 1
     80e:	90 40       	sbci	r25, 0x00	; 0
     810:	a0 40       	sbci	r26, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <main+0xd6>
     814:	00 c0       	rjmp	.+0      	; 0x816 <main+0xe0>
     816:	00 00       	nop
	dm(100);
	
	i2c_start();
     818:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
	i2c_adress(0b10100000);
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
	i2c_data(car_count+48);
     822:	80 91 a8 00 	lds	r24, 0x00A8
     826:	80 5d       	subi	r24, 0xD0	; 208
     828:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
	i2c_stop();
     82c:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	90 e7       	ldi	r25, 0x70	; 112
     834:	a2 e0       	ldi	r26, 0x02	; 2
     836:	81 50       	subi	r24, 0x01	; 1
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	a0 40       	sbci	r26, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <main+0x100>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0x10a>
     840:	00 00       	nop
	dm(100);
lcd_move_cursor(1,1);
     842:	80 2f       	mov	r24, r16
     844:	60 2f       	mov	r22, r16
     846:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_move_cursor>
lcd_send_string("distance:");
     84a:	c5 01       	movw	r24, r10
     84c:	0e 94 6e 07 	call	0xedc	; 0xedc <lcd_send_string>
		lcd_move_cursor(1,10);
     850:	80 2f       	mov	r24, r16
     852:	6a e0       	ldi	r22, 0x0A	; 10
     854:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_move_cursor>
		dist=ultra_sonic_read();
     858:	0e 94 57 08 	call	0x10ae	; 0x10ae <ultra_sonic_read>
     85c:	ec 01       	movw	r28, r24
		tostring(str,dist);
     85e:	c6 01       	movw	r24, r12
     860:	be 01       	movw	r22, r28
     862:	0e 94 ae 05 	call	0xb5c	; 0xb5c <tostring>
		lcd_send_string(str);
     866:	c6 01       	movw	r24, r12
     868:	0e 94 6e 07 	call	0xedc	; 0xedc <lcd_send_string>
		lcd_send_char(0x20);
     86c:	80 e2       	ldi	r24, 0x20	; 32
     86e:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		lcd_send_char(0x20);
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		lcd_send_char(0x20);
     878:	80 e2       	ldi	r24, 0x20	; 32
     87a:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		lcd_send_char(0x20);
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		lcd_send_char(0x20);
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		lcd_send_char(0x20);
     88a:	80 e2       	ldi	r24, 0x20	; 32
     88c:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
			lcd_send_char(0x20);
     890:	80 e2       	ldi	r24, 0x20	; 32
     892:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
			lcd_send_char(0x20);
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
		if ((dist<=20))
     89c:	c5 31       	cpi	r28, 0x15	; 21
     89e:	d1 05       	cpc	r29, r1
     8a0:	78 f4       	brcc	.+30     	; 0x8c0 <__stack+0x61>
		{
	anti_clockwise('b');
     8a2:	82 e6       	ldi	r24, 0x62	; 98
     8a4:	0e 94 c8 07 	call	0xf90	; 0xf90 <anti_clockwise>
	flag=0;
     8a8:	10 92 ad 00 	sts	0x00AD, r1
	lcd_move_cursor(2,1);
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	60 2f       	mov	r22, r16
     8b0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_move_cursor>
	lcd_send_string("Door open...");
     8b4:	c3 01       	movw	r24, r6
     8b6:	0e 94 6e 07 	call	0xedc	; 0xedc <lcd_send_string>
	
	
	door_status=0x20;
     8ba:	80 e2       	ldi	r24, 0x20	; 32
     8bc:	80 93 a9 00 	sts	0x00A9, r24
dm(100);
while(1)
{
	
	
	while(flag==1)
     8c0:	80 91 ad 00 	lds	r24, 0x00AD
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	19 f5       	brne	.+70     	; 0x90e <__stack+0xaf>
     8c8:	94 cf       	rjmp	.-216    	; 0x7f2 <main+0xbc>
	
		}
		
while((flag==0)&&(latch1==1))	//while((flag==0)&&(latch1==0)&&(latch3==1))//door close region 
	{
		if(button_read('a',6)==1)
     8ca:	81 e6       	ldi	r24, 0x61	; 97
     8cc:	66 e0       	ldi	r22, 0x06	; 6
     8ce:	0e 94 e6 07 	call	0xfcc	; 0xfcc <button_read>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	e1 f4       	brne	.+56     	; 0x90e <__stack+0xaf>
		{
			
			clockwise('b');
     8d6:	82 e6       	ldi	r24, 0x62	; 98
     8d8:	0e 94 bb 07 	call	0xf76	; 0xf76 <clockwise>
			//flag=1;
			
				lcd_clrscrean();
     8dc:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_clrscrean>
				lcd_send_string("door close...");
     8e0:	c7 01       	movw	r24, r14
     8e2:	0e 94 6e 07 	call	0xedc	; 0xedc <lcd_send_string>
					
			
		latch1=0;
     8e6:	10 92 ae 00 	sts	0x00AE, r1
		latch3=1;
     8ea:	10 93 ac 00 	sts	0x00AC, r17
		latch4=1;
     8ee:	10 93 ab 00 	sts	0x00AB, r17
		car_count++;
     8f2:	80 91 a8 00 	lds	r24, 0x00A8
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 93 a8 00 	sts	0x00A8, r24
     8fc:	8f e7       	ldi	r24, 0x7F	; 127
     8fe:	9f e4       	ldi	r25, 0x4F	; 79
     900:	a2 e1       	ldi	r26, 0x12	; 18
     902:	81 50       	subi	r24, 0x01	; 1
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	a0 40       	sbci	r26, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0xa3>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
     90c:	00 00       	nop
		}
		
	
		}
		
while((flag==0)&&(latch1==1))	//while((flag==0)&&(latch1==0)&&(latch3==1))//door close region 
     90e:	80 91 ad 00 	lds	r24, 0x00AD
     912:	88 23       	and	r24, r24
     914:	21 f4       	brne	.+8      	; 0x91e <__stack+0xbf>
     916:	80 91 ae 00 	lds	r24, 0x00AE
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	b1 f2       	breq	.-84     	; 0x8ca <__stack+0x6b>
		}
		

	
	//while flah ==1
	if (car_count<=max)
     91e:	80 91 a8 00 	lds	r24, 0x00A8
     922:	83 30       	cpi	r24, 0x03	; 3
     924:	b4 f5       	brge	.+108    	; 0x992 <__stack+0x133>
	{
		
	
		i2c_start();
     926:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
		i2c_adress(0b10100000);
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
		i2c_data(car_count+48);
     930:	80 91 a8 00 	lds	r24, 0x00A8
     934:	80 5d       	subi	r24, 0xD0	; 208
     936:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
		i2c_stop();
     93a:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
     93e:	8f e7       	ldi	r24, 0x7F	; 127
     940:	99 ea       	ldi	r25, 0xA9	; 169
     942:	a3 e0       	ldi	r26, 0x03	; 3
     944:	81 50       	subi	r24, 0x01	; 1
     946:	90 40       	sbci	r25, 0x00	; 0
     948:	a0 40       	sbci	r26, 0x00	; 0
     94a:	e1 f7       	brne	.-8      	; 0x944 <__stack+0xe5>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <__stack+0xef>
     94e:	00 00       	nop
		dm(150);
		if (car_count==max)
     950:	80 91 a8 00 	lds	r24, 0x00A8
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	e9 f4       	brne	.+58     	; 0x992 <__stack+0x133>
		{
		 lcd_send_cmd(clr_screen);
     958:	80 2f       	mov	r24, r16
     95a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
		 lcd_send_string("The garage is full");
     95e:	c4 01       	movw	r24, r8
     960:	0e 94 6e 07 	call	0xedc	; 0xedc <lcd_send_string>
		
		i2c_start();
     964:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
		i2c_adress(0b10100000);
     968:	80 ea       	ldi	r24, 0xA0	; 160
     96a:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
		i2c_data(0x21);
     96e:	81 e2       	ldi	r24, 0x21	; 33
     970:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
		i2c_stop();
     974:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	90 e7       	ldi	r25, 0x70	; 112
     97c:	a2 e0       	ldi	r26, 0x02	; 2
     97e:	81 50       	subi	r24, 0x01	; 1
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	a0 40       	sbci	r26, 0x00	; 0
     984:	e1 f7       	brne	.-8      	; 0x97e <__stack+0x11f>
     986:	00 c0       	rjmp	.+0      	; 0x988 <__stack+0x129>
     988:	00 00       	nop
		dm(100);  while(car_count==max)
     98a:	80 91 a8 00 	lds	r24, 0x00A8
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	e1 f3       	breq	.-8      	; 0x98a <__stack+0x12b>
		}
		
	
	}

i2c_start();
     992:	0e 94 75 05 	call	0xaea	; 0xaea <i2c_start>
	i2c_adress(0b10100000);
     996:	80 ea       	ldi	r24, 0xA0	; 160
     998:	0e 94 7f 05 	call	0xafe	; 0xafe <i2c_adress>
	i2c_data(door_status);
     99c:	80 91 a9 00 	lds	r24, 0x00A9
     9a0:	0e 94 8a 05 	call	0xb14	; 0xb14 <i2c_data>
	i2c_stop();
     9a4:	0e 94 95 05 	call	0xb2a	; 0xb2a <i2c_stop>
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	90 e7       	ldi	r25, 0x70	; 112
     9ac:	a2 e0       	ldi	r26, 0x02	; 2
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	a0 40       	sbci	r26, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <__stack+0x14f>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <__stack+0x159>
     9b8:	00 00       	nop
     9ba:	82 cf       	rjmp	.-252    	; 0x8c0 <__stack+0x61>

000009bc <__vector_1>:
	dm(100);
	}			 
	
	}
	ISR(INT0_vect)//close direction limit switch
		{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
	if (latch3==1)	//if ((latch4==1)&&(latch5==1))
     9de:	80 91 ac 00 	lds	r24, 0x00AC
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	69 f4       	brne	.+26     	; 0xa00 <__vector_1+0x44>
		{
		stop_motor('b');
     9e6:	82 e6       	ldi	r24, 0x62	; 98
     9e8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <stop_motor>
		//latch1=1;
		flag=1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 ad 00 	sts	0x00AD, r24
		latch3=0;
     9f2:	10 92 ac 00 	sts	0x00AC, r1
		latch4=0;
     9f6:	10 92 ab 00 	sts	0x00AB, r1
		//latch5=0;
		door_status=0x21;
     9fa:	81 e2       	ldi	r24, 0x21	; 33
     9fc:	80 93 a9 00 	sts	0x00A9, r24
		}
		
	}
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <__vector_2>:
	ISR(INT1_vect)//open direction limit switch
	{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
		if ((flag==0)&&(latch4==0))
     a44:	80 91 ad 00 	lds	r24, 0x00AD
     a48:	88 23       	and	r24, r24
     a4a:	99 f4       	brne	.+38     	; 0xa72 <__vector_2+0x50>
     a4c:	80 91 ab 00 	lds	r24, 0x00AB
     a50:	88 23       	and	r24, r24
     a52:	79 f4       	brne	.+30     	; 0xa72 <__vector_2+0x50>
		{
		stop_motor('b');
     a54:	82 e6       	ldi	r24, 0x62	; 98
     a56:	0e 94 d5 07 	call	0xfaa	; 0xfaa <stop_motor>
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	99 e6       	ldi	r25, 0x69	; 105
     a5e:	a8 e1       	ldi	r26, 0x18	; 24
     a60:	81 50       	subi	r24, 0x01	; 1
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	a0 40       	sbci	r26, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <__vector_2+0x3e>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <__vector_2+0x48>
     a6a:	00 00       	nop
		dm(1000);
latch1=1;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 ae 00 	sts	0x00AE, r24
	open limit switch  is pressed*/		
		
			
	
			
	}
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_3>:
	ISR(INT2_vect)
	{
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	8f 93       	push	r24
	car_count--;
     aa0:	80 91 a8 00 	lds	r24, 0x00A8
     aa4:	81 50       	subi	r24, 0x01	; 1
     aa6:	80 93 a8 00 	sts	0x00A8, r24
	if (car_count<0)
     aaa:	80 91 a8 00 	lds	r24, 0x00A8
     aae:	88 23       	and	r24, r24
     ab0:	14 f4       	brge	.+4      	; 0xab6 <__vector_3+0x22>
	{
	car_count=0;
     ab2:	10 92 a8 00 	sts	0x00A8, r1
	}
	
	
	
     ab6:	8f 91       	pop	r24
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <i2c_clock_init>:
 * Created: 20/10/2023 02:04:51 م
 *  Author: handsa
 */ #include "prog init.h"
#define prescaller 1
void i2c_clock_init(unsigned long scl)
{
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
	TWBR=(unsigned char) (((F_CPU/scl)-16)/(2*prescaller));
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	72 e1       	ldi	r23, 0x12	; 18
     aca:	8a e7       	ldi	r24, 0x7A	; 122
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodsi4>
     ad2:	da 01       	movw	r26, r20
     ad4:	c9 01       	movw	r24, r18
     ad6:	40 97       	sbiw	r24, 0x10	; 16
     ad8:	a1 09       	sbc	r26, r1
     ada:	b1 09       	sbc	r27, r1
     adc:	b6 95       	lsr	r27
     ade:	a7 95       	ror	r26
     ae0:	97 95       	ror	r25
     ae2:	87 95       	ror	r24
     ae4:	80 b9       	out	0x00, r24	; 0
	if (prescaller==1)
	{
	TWSR=0;
     ae6:	11 b8       	out	0x01, r1	; 1
}
else if (prescaller==64)
{
	TWSR=3;
}
}
     ae8:	08 95       	ret

00000aea <i2c_start>:
void i2c_start(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWSTA));
     aea:	84 ea       	ldi	r24, 0xA4	; 164
     aec:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT)==0);
     aee:	06 b6       	in	r0, 0x36	; 54
     af0:	07 fe       	sbrs	r0, 7
     af2:	fd cf       	rjmp	.-6      	; 0xaee <i2c_start+0x4>
	while((TWSR &0xf8)!=0x08); 
     af4:	81 b1       	in	r24, 0x01	; 1
     af6:	88 7f       	andi	r24, 0xF8	; 248
     af8:	88 30       	cpi	r24, 0x08	; 8
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <i2c_start+0xa>
//clr_bit(TWCR,TWSTA);
}
     afc:	08 95       	ret

00000afe <i2c_adress>:
void i2c_adress(unsigned char address)
{

TWDR=address;
     afe:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
     b00:	84 e8       	ldi	r24, 0x84	; 132
     b02:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT)==0);
     b04:	06 b6       	in	r0, 0x36	; 54
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <i2c_adress+0x6>
//while(1);
	//lcd_clrscrean();
		while((TWSR &0xf8)!=0x18); 
     b0a:	81 b1       	in	r24, 0x01	; 1
     b0c:	88 7f       	andi	r24, 0xF8	; 248
     b0e:	88 31       	cpi	r24, 0x18	; 24
     b10:	e1 f7       	brne	.-8      	; 0xb0a <i2c_adress+0xc>
		//lcd_clrscrean();
}
     b12:	08 95       	ret

00000b14 <i2c_data>:
void i2c_data(unsigned char data)
{
	TWDR=data;
     b14:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
     b16:	84 e8       	ldi	r24, 0x84	; 132
     b18:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT)==0);
     b1a:	06 b6       	in	r0, 0x36	; 54
     b1c:	07 fe       	sbrs	r0, 7
     b1e:	fd cf       	rjmp	.-6      	; 0xb1a <i2c_data+0x6>
	while((TWSR &0xf8)!=0x28);
     b20:	81 b1       	in	r24, 0x01	; 1
     b22:	88 7f       	andi	r24, 0xF8	; 248
     b24:	88 32       	cpi	r24, 0x28	; 40
     b26:	e1 f7       	brne	.-8      	; 0xb20 <i2c_data+0xc>
	
	
}
     b28:	08 95       	ret

00000b2a <i2c_stop>:
void i2c_stop(void)
{
TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWSTO));	
     b2a:	84 e9       	ldi	r24, 0x94	; 148
     b2c:	86 bf       	out	0x36, r24	; 54
}
     b2e:	08 95       	ret

00000b30 <i2c_set_address>:
void i2c_set_address(unsigned char addres)
{
	TWAR=addres;
     b30:	82 b9       	out	0x02, r24	; 2

}
     b32:	08 95       	ret

00000b34 <i2c_slave_read>:
unsigned char i2c_slave_read(void)
{
		TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWEA));
     b34:	84 ec       	ldi	r24, 0xC4	; 196
     b36:	86 bf       	out	0x36, r24	; 54
			while(read_bit(TWCR,TWINT)==0);
     b38:	06 b6       	in	r0, 0x36	; 54
     b3a:	07 fe       	sbrs	r0, 7
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <i2c_slave_read+0x4>
			while((TWSR &0xf8)!=0x60);
     b3e:	81 b1       	in	r24, 0x01	; 1
     b40:	88 7f       	andi	r24, 0xF8	; 248
     b42:	80 36       	cpi	r24, 0x60	; 96
     b44:	e1 f7       	brne	.-8      	; 0xb3e <i2c_slave_read+0xa>
			TWCR=(1<<TWINT)|(1<<TWEN)|((1<<TWEA));
     b46:	84 ec       	ldi	r24, 0xC4	; 196
     b48:	86 bf       	out	0x36, r24	; 54
			while(read_bit(TWCR,TWINT)==0);
     b4a:	06 b6       	in	r0, 0x36	; 54
     b4c:	07 fe       	sbrs	r0, 7
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <i2c_slave_read+0x16>
				while((TWSR &0xf8)!=0x80);
     b50:	81 b1       	in	r24, 0x01	; 1
     b52:	88 7f       	andi	r24, 0xF8	; 248
     b54:	80 38       	cpi	r24, 0x80	; 128
     b56:	e1 f7       	brne	.-8      	; 0xb50 <i2c_slave_read+0x1c>
				return TWDR;
     b58:	83 b1       	in	r24, 0x03	; 3
		
     b5a:	08 95       	ret

00000b5c <tostring>:
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	6c 01       	movw	r12, r24
     b6e:	fb 01       	movw	r30, r22
	int i,rem,len=0,n;
	n=c;
	if (n!=0)
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	61 f1       	breq	.+88     	; 0xbcc <tostring+0x70>
     b74:	cb 01       	movw	r24, r22
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d0 e0       	ldi	r29, 0x00	; 0
	{
	while(n!=0)
	{
		len++;
		n/=10;
     b7a:	2a e0       	ldi	r18, 0x0A	; 10
     b7c:	30 e0       	ldi	r19, 0x00	; 0
	n=c;
	if (n!=0)
	{
	while(n!=0)
	{
		len++;
     b7e:	21 96       	adiw	r28, 0x01	; 1
		n/=10;
     b80:	b9 01       	movw	r22, r18
     b82:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
     b86:	cb 01       	movw	r24, r22
{
	int i,rem,len=0,n;
	n=c;
	if (n!=0)
	{
	while(n!=0)
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	c9 f7       	brne	.-14     	; 0xb7e <tostring+0x22>
	{
		len++;
		n/=10;
	}
	
	for(i=0;i<len;i++)
     b8c:	1c 16       	cp	r1, r28
     b8e:	1d 06       	cpc	r1, r29
     b90:	cc f4       	brge	.+50     	; 0xbc4 <tostring+0x68>
 * int_to_string1.c
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
     b92:	86 01       	movw	r16, r12
     b94:	0c 0f       	add	r16, r28
     b96:	1d 1f       	adc	r17, r29
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
		n/=10;
	}
	
	for(i=0;i<len;i++)
	{
		rem=c%10;
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fa e0       	ldi	r31, 0x0A	; 10
     ba0:	ef 2e       	mov	r14, r31
     ba2:	ff 24       	eor	r15, r15
     ba4:	f0 2d       	mov	r31, r0
     ba6:	cf 01       	movw	r24, r30
     ba8:	b7 01       	movw	r22, r14
     baa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divmodhi4>
		c=c/10;
     bae:	e6 2f       	mov	r30, r22
     bb0:	f7 2f       	mov	r31, r23
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
     bb2:	80 5d       	subi	r24, 0xD0	; 208
     bb4:	d8 01       	movw	r26, r16
     bb6:	8e 93       	st	-X, r24
     bb8:	8d 01       	movw	r16, r26
	{
		len++;
		n/=10;
	}
	
	for(i=0;i<len;i++)
     bba:	2f 5f       	subi	r18, 0xFF	; 255
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	2c 17       	cp	r18, r28
     bc0:	3d 07       	cpc	r19, r29
     bc2:	89 f7       	brne	.-30     	; 0xba6 <tostring+0x4a>
		rem=c%10;
		c=c/10;
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
	}
	
	str[len]='\0';
     bc4:	cc 0d       	add	r28, r12
     bc6:	dd 1d       	adc	r29, r13
     bc8:	18 82       	st	Y, r1
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <tostring+0x78>
	}
	else
	{
	str[0]='0';
     bcc:	80 e3       	ldi	r24, 0x30	; 48
     bce:	f6 01       	movw	r30, r12
     bd0:	80 83       	st	Z, r24
	str[1]='\0'	;
     bd2:	11 82       	std	Z+1, r1	; 0x01
	}

     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <keypad_init>:

#include "keyPad_drives.h"


void keypad_init(unsigned char port)
{
     be6:	cf 93       	push	r28
     be8:	c8 2f       	mov	r28, r24
	dio_set_pin(port,0,1);
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
	dio_set_pin(port,1,1);
     bf8:	8c 2f       	mov	r24, r28
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_set_pin(port,2,1);
     c08:	8c 2f       	mov	r24, r28
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	62 e0       	ldi	r22, 0x02	; 2
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_set_pin(port,3,1);
     c18:	8c 2f       	mov	r24, r28
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	63 e0       	ldi	r22, 0x03	; 3
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
    dio_pull_up_en(port,4,1);
     c28:	8c 2f       	mov	r24, r28
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	64 e0       	ldi	r22, 0x04	; 4
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
    dio_pull_up_en(port,5,1);
     c38:	8c 2f       	mov	r24, r28
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	65 e0       	ldi	r22, 0x05	; 5
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
     dio_pull_up_en(port,6,1);
     c48:	8c 2f       	mov	r24, r28
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	66 e0       	ldi	r22, 0x06	; 6
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>
	  dio_pull_up_en(port,7,1);
     c58:	8c 2f       	mov	r24, r28
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	67 e0       	ldi	r22, 0x07	; 7
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	0e 94 80 02 	call	0x500	; 0x500 <dio_pull_up_en>

}
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <keypad_read>:
unsigned char keypad_read(unsigned char port)
{
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	61 97       	sbiw	r28, 0x11	; 17
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','4'},{'A','0','=','+'}};
     c94:	de 01       	movw	r26, r28
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	e8 e9       	ldi	r30, 0x98	; 152
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	90 e1       	ldi	r25, 0x10	; 16
     c9e:	01 90       	ld	r0, Z+
     ca0:	0d 92       	st	X+, r0
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <keypad_read+0x32>
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
     ca8:	99 8b       	std	Y+17, r25	; 0x11
     caa:	cc 24       	eor	r12, r12
     cac:	dd 24       	eor	r13, r13
		
		for (raw=0;raw<=3;raw++)
		{
		dio_write_pin(port,0,1);
     cae:	f8 2e       	mov	r15, r24
     cb0:	ee 24       	eor	r14, r14
     cb2:	8f 2d       	mov	r24, r15
     cb4:	9e 2d       	mov	r25, r14
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,1,1);
     cc2:	8f 2d       	mov	r24, r15
     cc4:	9e 2d       	mov	r25, r14
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,2,1);
     cd2:	8f 2d       	mov	r24, r15
     cd4:	9e 2d       	mov	r25, r14
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,3,1);
     ce2:	8f 2d       	mov	r24, r15
     ce4:	9e 2d       	mov	r25, r14
     ce6:	63 e0       	ldi	r22, 0x03	; 3
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,raw,0);
     cf2:	46 01       	movw	r8, r12
     cf4:	8f 2d       	mov	r24, r15
     cf6:	9e 2d       	mov	r25, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	10 e0       	ldi	r17, 0x00	; 0
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
     d06:	58 01       	movw	r10, r16
    dio_pull_up_en(port,5,1);
     dio_pull_up_en(port,6,1);
	  dio_pull_up_en(port,7,1);

}
unsigned char keypad_read(unsigned char port)
     d08:	b8 01       	movw	r22, r16
     d0a:	6c 5f       	subi	r22, 0xFC	; 252
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
     d0e:	8f 2d       	mov	r24, r15
     d10:	9e 2d       	mov	r25, r14
     d12:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <dio_read_pin>
			
			if ((x==0))
     d16:	88 23       	and	r24, r24
     d18:	69 f4       	brne	.+26     	; 0xd34 <keypad_read+0xc8>
			{
			ret=arr[raw][col];
     d1a:	f4 01       	movw	r30, r8
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	ae 0e       	add	r10, r30
     d26:	bf 1e       	adc	r11, r31
     d28:	fe 01       	movw	r30, r28
     d2a:	ea 0d       	add	r30, r10
     d2c:	fb 1d       	adc	r31, r11
     d2e:	81 81       	ldd	r24, Z+1	; 0x01
     d30:	89 8b       	std	Y+17, r24	; 0x11
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <keypad_read+0xd4>
     d34:	0f 5f       	subi	r16, 0xFF	; 255
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
		dio_write_pin(port,1,1);
		dio_write_pin(port,2,1);
		dio_write_pin(port,3,1);
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
     d38:	04 30       	cpi	r16, 0x04	; 4
     d3a:	11 05       	cpc	r17, r1
     d3c:	21 f7       	brne	.-56     	; 0xd06 <keypad_read+0x9a>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <keypad_read+0xfc>
		

		}


return ret;
     d40:	89 89       	ldd	r24, Y+17	; 0x11

}
     d42:	61 96       	adiw	r28, 0x11	; 17
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	08 95       	ret
		

		}


return ret;
     d68:	08 94       	sec
     d6a:	c1 1c       	adc	r12, r1
     d6c:	d1 1c       	adc	r13, r1
{
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','4'},{'A','0','=','+'}};
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
		
		for (raw=0;raw<=3;raw++)
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	c8 16       	cp	r12, r24
     d72:	d1 04       	cpc	r13, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <keypad_read+0x10c>
     d76:	9d cf       	rjmp	.-198    	; 0xcb2 <keypad_read+0x46>
     d78:	e3 cf       	rjmp	.-58     	; 0xd40 <keypad_read+0xd4>

00000d7a <pulse>:
		dio_write_pin(st2,en,0);
		dm(2);
	}
	#elif defined four_bits_mode
	{
		dio_write_pin(st1,en,1);
     d7a:	81 e4       	ldi	r24, 0x41	; 65
     d7c:	64 e0       	ldi	r22, 0x04	; 4
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     d84:	8f e9       	ldi	r24, 0x9F	; 159
     d86:	9f e0       	ldi	r25, 0x0F	; 15
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <pulse+0xe>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <pulse+0x14>
     d8e:	00 00       	nop
		dm(2);
		dio_write_pin(st1,en,0);
     d90:	81 e4       	ldi	r24, 0x41	; 65
     d92:	64 e0       	ldi	r22, 0x04	; 4
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
     d9a:	8f e9       	ldi	r24, 0x9F	; 159
     d9c:	9f e0       	ldi	r25, 0x0F	; 15
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <pulse+0x24>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <pulse+0x2a>
     da4:	00 00       	nop
		dm(2);
	}
#endif
}
     da6:	08 95       	ret

00000da8 <lcd_send_cmd>:
void lcd_send_cmd(char data)
{
     da8:	cf 93       	push	r28
     daa:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,0);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
     dac:	68 2f       	mov	r22, r24
     dae:	62 95       	swap	r22
     db0:	6f 70       	andi	r22, 0x0F	; 15
     db2:	81 e4       	ldi	r24, 0x41	; 65
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,0);
     dbc:	81 e4       	ldi	r24, 0x41	; 65
     dbe:	65 e0       	ldi	r22, 0x05	; 5
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
     dc6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pulse>
     dca:	8f ec       	ldi	r24, 0xCF	; 207
     dcc:	97 e0       	ldi	r25, 0x07	; 7
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <lcd_send_cmd+0x26>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <lcd_send_cmd+0x2c>
     dd4:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
     dd6:	81 e4       	ldi	r24, 0x41	; 65
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	6c 2f       	mov	r22, r28
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
     de2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pulse>
     de6:	8f ec       	ldi	r24, 0xCF	; 207
     de8:	97 e0       	ldi	r25, 0x07	; 7
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <lcd_send_cmd+0x42>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <lcd_send_cmd+0x48>
     df0:	00 00       	nop
dm(1);
#endif
}
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <lcd_init>:
		//lcd_send_cmd(0x04);
lcd_send_cmd(entry_mode);
	dm(1);

#elif defined four_bits_mode
dio_set_pin(st1,0,1);
     df6:	81 e4       	ldi	r24, 0x41	; 65
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,1,1);
     e00:	81 e4       	ldi	r24, 0x41	; 65
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,2,1);
     e0a:	81 e4       	ldi	r24, 0x41	; 65
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,3,1);
     e14:	81 e4       	ldi	r24, 0x41	; 65
     e16:	63 e0       	ldi	r22, 0x03	; 3
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,en,1);
     e1e:	81 e4       	ldi	r24, 0x41	; 65
     e20:	64 e0       	ldi	r22, 0x04	; 4
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
dio_set_pin(st1,rs,1);
     e28:	81 e4       	ldi	r24, 0x41	; 65
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>


lcd_send_cmd(return_home);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     e38:	8f e1       	ldi	r24, 0x1F	; 31
     e3a:	9e e4       	ldi	r25, 0x4E	; 78
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <lcd_init+0x46>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <lcd_init+0x4c>
     e42:	00 00       	nop

dm(10);
lcd_send_cmd(four_bits);
     e44:	88 e2       	ldi	r24, 0x28	; 40
     e46:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     e4a:	8f ec       	ldi	r24, 0xCF	; 207
     e4c:	97 e0       	ldi	r25, 0x07	; 7
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <lcd_init+0x58>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <lcd_init+0x5e>
     e54:	00 00       	nop
dm(1);

lcd_send_cmd(clr_screen);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     e5c:	8f e1       	ldi	r24, 0x1F	; 31
     e5e:	9e e4       	ldi	r25, 0x4E	; 78
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <lcd_init+0x6a>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <lcd_init+0x70>
     e66:	00 00       	nop
dm(10);
lcd_send_cmd(entry_mode);
     e68:	86 e0       	ldi	r24, 0x06	; 6
     e6a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     e6e:	8f ec       	ldi	r24, 0xCF	; 207
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <lcd_init+0x7c>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <lcd_init+0x82>
     e78:	00 00       	nop
dm(1);
lcd_send_cmd(cursor_on_disp_on);
     e7a:	8e e0       	ldi	r24, 0x0E	; 14
     e7c:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     e80:	8f ec       	ldi	r24, 0xCF	; 207
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <lcd_init+0x8e>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <lcd_init+0x94>
     e8a:	00 00       	nop
dm(1);


#endif
}
     e8c:	08 95       	ret

00000e8e <lcd_send_char>:
pulse();
dm(1);
#endif
}
void lcd_send_char(char data)
{
     e8e:	cf 93       	push	r28
     e90:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,1);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
     e92:	68 2f       	mov	r22, r24
     e94:	62 95       	swap	r22
     e96:	6f 70       	andi	r22, 0x0F	; 15
     e98:	81 e4       	ldi	r24, 0x41	; 65
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
dio_write_pin(st1,rs,1);
     ea2:	81 e4       	ldi	r24, 0x41	; 65
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
pulse();
     eac:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pulse>
     eb0:	8f ec       	ldi	r24, 0xCF	; 207
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <lcd_send_char+0x26>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <lcd_send_char+0x2c>
     eba:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
     ebc:	81 e4       	ldi	r24, 0x41	; 65
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	6c 2f       	mov	r22, r28
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	0e 94 25 03 	call	0x64a	; 0x64a <dio_write_lo_level>
pulse();
     ec8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pulse>
     ecc:	8f ec       	ldi	r24, 0xCF	; 207
     ece:	97 e0       	ldi	r25, 0x07	; 7
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <lcd_send_char+0x42>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <lcd_send_char+0x48>
     ed6:	00 00       	nop
dm(1);
#endif
}
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <lcd_send_string>:
void lcd_send_string(char * data)
{
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
	while (*data!='\0')
     ee2:	88 81       	ld	r24, Y
     ee4:	88 23       	and	r24, r24
     ee6:	31 f0       	breq	.+12     	; 0xef4 <lcd_send_string+0x18>
dio_write_lo_level(st1,data);
pulse();
dm(1);
#endif
}
void lcd_send_string(char * data)
     ee8:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data!='\0')
	{
	lcd_send_char(*data);
     eea:	0e 94 47 07 	call	0xe8e	; 0xe8e <lcd_send_char>
dm(1);
#endif
}
void lcd_send_string(char * data)
{
	while (*data!='\0')
     eee:	89 91       	ld	r24, Y+
     ef0:	88 23       	and	r24, r24
     ef2:	d9 f7       	brne	.-10     	; 0xeea <lcd_send_string+0xe>
     ef4:	8f ec       	ldi	r24, 0xCF	; 207
     ef6:	97 e0       	ldi	r25, 0x07	; 7
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <lcd_send_string+0x1c>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <lcd_send_string+0x22>
     efe:	00 00       	nop

	
	}
		dm(1);
		
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <lcd_clrscrean>:
void lcd_clrscrean(void)
{
	lcd_send_cmd(clr_screen);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     f0c:	8f e1       	ldi	r24, 0x1F	; 31
     f0e:	9e e4       	ldi	r25, 0x4E	; 78
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <lcd_clrscrean+0xa>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <lcd_clrscrean+0x10>
     f16:	00 00       	nop
	dm(10);
}
     f18:	08 95       	ret

00000f1a <lcd_move_cursor>:
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
     f1a:	28 2f       	mov	r18, r24
     f1c:	21 50       	subi	r18, 0x01	; 1
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	70 f4       	brcc	.+28     	; 0xf3e <lcd_move_cursor+0x24>
     f22:	66 23       	and	r22, r22
     f24:	71 f0       	breq	.+28     	; 0xf42 <lcd_move_cursor+0x28>
     f26:	61 31       	cpi	r22, 0x11	; 17
     f28:	70 f4       	brcc	.+28     	; 0xf46 <lcd_move_cursor+0x2c>
	{
	data =0x80;
	}
else if (row==1)
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	19 f4       	brne	.+6      	; 0xf34 <lcd_move_cursor+0x1a>
{
	data=0x80+coloumn-1;
     f2e:	96 2f       	mov	r25, r22
     f30:	91 58       	subi	r25, 0x81	; 129
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <lcd_move_cursor+0x2e>
}
else if (row==2)
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	41 f4       	brne	.+16     	; 0xf48 <lcd_move_cursor+0x2e>
{
	data=0xc0+coloumn-1;
     f38:	96 2f       	mov	r25, r22
     f3a:	91 54       	subi	r25, 0x41	; 65
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <lcd_move_cursor+0x2e>
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
	data =0x80;
     f3e:	90 e8       	ldi	r25, 0x80	; 128
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <lcd_move_cursor+0x2e>
     f42:	90 e8       	ldi	r25, 0x80	; 128
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <lcd_move_cursor+0x2e>
     f46:	90 e8       	ldi	r25, 0x80	; 128
}
else if (row==2)
{
	data=0xc0+coloumn-1;
}
lcd_send_cmd(data);
     f48:	89 2f       	mov	r24, r25
     f4a:	0e 94 d4 06 	call	0xda8	; 0xda8 <lcd_send_cmd>
     f4e:	8f ec       	ldi	r24, 0xCF	; 207
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <lcd_move_cursor+0x38>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <lcd_move_cursor+0x3e>
     f58:	00 00       	nop
dm(1);
}
     f5a:	08 95       	ret

00000f5c <motor_selective_mode_init>:
 *  Author: handsa
 */ 
#include "DIO_drives.h"
#include "motor_drives.h"
void motor_selective_mode_init(unsigned char port)
{
     f5c:	cf 93       	push	r28
     f5e:	c8 2f       	mov	r28, r24
	#if defined sellective_mode1
	{
		dio_set_pin(port,in11,1);
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
		dio_set_pin(port,in12,1);	
     f68:	8c 2f       	mov	r24, r28
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
	}

#endif
}
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <clockwise>:
void clockwise(unsigned char port)
{
     f76:	cf 93       	push	r28
     f78:	c8 2f       	mov	r28, r24
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,1);
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,0);
     f82:	8c 2f       	mov	r24, r28
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif

}
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <anti_clockwise>:
void anti_clockwise(unsigned char port)
{
     f90:	cf 93       	push	r28
     f92:	c8 2f       	mov	r28, r24
	
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,0);
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,1);
     f9c:	8c 2f       	mov	r24, r28
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif
}	
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <stop_motor>:
void stop_motor(unsigned char port)
{
     faa:	cf 93       	push	r28
     fac:	c8 2f       	mov	r28, r24
	
	#if defined sellective_mode1
	{
		dio_write_pin(port,in11,0);
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
		dio_write_pin(port,in12,0);
     fb6:	8c 2f       	mov	r24, r28
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <dio_write_pin>
	}
	#endif
}
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <button_init>:
 *  Author: handsa
 */ 
#include "DIO_drives.h"
void button_init(char port ,char pin)
{
	dio_set_pin(port,pin,0);
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
}
     fca:	08 95       	ret

00000fcc <button_read>:
unsigned char button_read(char port ,char pin)
{
	return dio_read_pin(port,pin);
     fcc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <dio_read_pin>
}
     fd0:	08 95       	ret

00000fd2 <timer_ctc_init>:

#include <util/delay.h>
#include <avr/interrupt.h>
void timer_ctc_init(void)
{
	set_bit(TCCR0,WGM01);
     fd2:	83 b7       	in	r24, 0x33	; 51
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	83 bf       	out	0x33, r24	; 51
	OCR0=80;
     fd8:	80 e5       	ldi	r24, 0x50	; 80
     fda:	8c bf       	out	0x3c, r24	; 60
	set_bit(TCCR0,CS00);
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,CS02);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	84 60       	ori	r24, 0x04	; 4
     fe6:	83 bf       	out	0x33, r24	; 51
	sei();
     fe8:	78 94       	sei
	set_bit(TIMSK,OCIE0);
     fea:	89 b7       	in	r24, 0x39	; 57
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	89 bf       	out	0x39, r24	; 57
}
     ff0:	08 95       	ret

00000ff2 <pwm_ctc>:
void pwm_ctc(unsigned short freq,unsigned short prescaller)
{
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
     ffc:	8b 01       	movw	r16, r22
	char ocr;
	dio_set_pin('b',3,1);
     ffe:	82 e6       	ldi	r24, 0x62	; 98
    1000:	63 e0       	ldi	r22, 0x03	; 3
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin>
	set_bit(TCCR0,WGM01);
    1008:	83 b7       	in	r24, 0x33	; 51
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	83 bf       	out	0x33, r24	; 51
	ocr=((float)(F_CPU/(2*prescaller*freq))-1);
    100e:	cc 0f       	add	r28, r28
    1010:	dd 1f       	adc	r29, r29
    1012:	c0 9f       	mul	r28, r16
    1014:	90 01       	movw	r18, r0
    1016:	c1 9f       	mul	r28, r17
    1018:	30 0d       	add	r19, r0
    101a:	d0 9f       	mul	r29, r16
    101c:	30 0d       	add	r19, r0
    101e:	11 24       	eor	r1, r1
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	72 e1       	ldi	r23, 0x12	; 18
    1028:	8a e7       	ldi	r24, 0x7A	; 122
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodsi4>
    1030:	ca 01       	movw	r24, r20
    1032:	b9 01       	movw	r22, r18
    1034:	0e 94 37 09 	call	0x126e	; 0x126e <__floatunsisf>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
    1044:	0e 94 0b 09 	call	0x1216	; 0x1216 <__fixunssfsi>
OCR0=ocr;
    1048:	6c bf       	out	0x3c, r22	; 60
	set_bit(TCCR0,CS00);
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,CS02);
    1050:	83 b7       	in	r24, 0x33	; 51
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,COM00);
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	80 61       	ori	r24, 0x10	; 16
    105a:	83 bf       	out	0x33, r24	; 51
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <timer2_ovf_sec_init>:
void timer2_ovf_sec_init(void)
{
	set_bit(ASSR,AS2);//clock sellect from TCSC1,TCST2
    1066:	82 b5       	in	r24, 0x22	; 34
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	82 bd       	out	0x22, r24	; 34
	set_bit(TCCR2,CS20);//prescaller 128
    106c:	85 b5       	in	r24, 0x25	; 37
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	85 bd       	out	0x25, r24	; 37
	set_bit(TCCR2,CS22);
    1072:	85 b5       	in	r24, 0x25	; 37
    1074:	84 60       	ori	r24, 0x04	; 4
    1076:	85 bd       	out	0x25, r24	; 37
	sei();
    1078:	78 94       	sei
	set_bit(TIMSK,TOIE2);
    107a:	89 b7       	in	r24, 0x39	; 57
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	89 bf       	out	0x39, r24	; 57
	
	
	
	
	
}
    1080:	08 95       	ret

00001082 <tim0_fast_pwm>:
void tim0_fast_pwm(unsigned char oocr)
{
	sei();//enable interrupt
    1082:	78 94       	sei
	set_bit(TIMSK,TOIE0);//enable overflow interrupt
    1084:	89 b7       	in	r24, 0x39	; 57
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	89 bf       	out	0x39, r24	; 57
	
	//set_bit(DDRB,3);//set oc1 as output
	set_bit(TCCR0,WGM00);
    108a:	83 b7       	in	r24, 0x33	; 51
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,WGM01);
    1090:	83 b7       	in	r24, 0x33	; 51
    1092:	88 60       	ori	r24, 0x08	; 8
    1094:	83 bf       	out	0x33, r24	; 51
		OCR0=64;// duty cycle =25%
    1096:	80 e4       	ldi	r24, 0x40	; 64
    1098:	8c bf       	out	0x3c, r24	; 60
		set_bit(TCCR0,CS00);/*prescaller =1024
    109a:	83 b7       	in	r24, 0x33	; 51
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	83 bf       	out	0x33, r24	; 51
		*/
		set_bit(TCCR0,CS02);
    10a0:	83 b7       	in	r24, 0x33	; 51
    10a2:	84 60       	ori	r24, 0x04	; 4
    10a4:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM01);
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	80 62       	ori	r24, 0x20	; 32
    10aa:	83 bf       	out	0x33, r24	; 51
				

}
    10ac:	08 95       	ret

000010ae <ultra_sonic_read>:
#include "i_to_string.h"
unsigned short A,B,HIGH,DISTANCE;
extern char arr[10];
unsigned short ultra_sonic_read(void)
{
	TCCR1A=0;
    10ae:	1f bc       	out	0x2f, r1	; 47
	TIFR|=(1<<ICF1);
    10b0:	88 b7       	in	r24, 0x38	; 56
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	88 bf       	out	0x38, r24	; 56
	set_bit(DDRC,2);
    10b6:	a2 9a       	sbi	0x14, 2	; 20
	TIFR|=(1<<ICF1);
    10b8:	88 b7       	in	r24, 0x38	; 56
    10ba:	80 62       	ori	r24, 0x20	; 32
    10bc:	88 bf       	out	0x38, r24	; 56
	set_bit(PORTC,2);
    10be:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c0:	85 e8       	ldi	r24, 0x85	; 133
    10c2:	8a 95       	dec	r24
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <ultra_sonic_read+0x14>
    10c6:	00 00       	nop
	_delay_us(50);
	clr_bit(PORTC,2);
    10c8:	aa 98       	cbi	0x15, 2	; 21
    10ca:	85 e8       	ldi	r24, 0x85	; 133
    10cc:	8a 95       	dec	r24
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <ultra_sonic_read+0x1e>
    10d0:	00 00       	nop
	_delay_us(50);
	TCCR1B=0xc1;
    10d2:	81 ec       	ldi	r24, 0xC1	; 193
    10d4:	8e bd       	out	0x2e, r24	; 46
	while((TIFR&(1<<ICF1))==0);//wait for rising edge
    10d6:	08 b6       	in	r0, 0x38	; 56
    10d8:	05 fe       	sbrs	r0, 5
    10da:	fd cf       	rjmp	.-6      	; 0x10d6 <ultra_sonic_read+0x28>
	A=ICR1;
    10dc:	86 b5       	in	r24, 0x26	; 38
    10de:	97 b5       	in	r25, 0x27	; 39
    10e0:	90 93 ba 00 	sts	0x00BA, r25
    10e4:	80 93 b9 00 	sts	0x00B9, r24
	TIFR|=(1<<ICF1);
    10e8:	88 b7       	in	r24, 0x38	; 56
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	88 bf       	out	0x38, r24	; 56
	TCCR1B=0x81;
    10ee:	81 e8       	ldi	r24, 0x81	; 129
    10f0:	8e bd       	out	0x2e, r24	; 46
		while((TIFR&(1<<ICF1))==0);//wait for falling edge
    10f2:	08 b6       	in	r0, 0x38	; 56
    10f4:	05 fe       	sbrs	r0, 5
    10f6:	fd cf       	rjmp	.-6      	; 0x10f2 <ultra_sonic_read+0x44>
		B=ICR1;
    10f8:	66 b5       	in	r22, 0x26	; 38
    10fa:	77 b5       	in	r23, 0x27	; 39
    10fc:	70 93 c0 00 	sts	0x00C0, r23
    1100:	60 93 bf 00 	sts	0x00BF, r22
			TIFR|=(1<<ICF1);
    1104:	88 b7       	in	r24, 0x38	; 56
    1106:	80 62       	ori	r24, 0x20	; 32
    1108:	88 bf       	out	0x38, r24	; 56
			TCCR1B=0;
    110a:	1e bc       	out	0x2e, r1	; 46
			TCNT0=0;
    110c:	12 be       	out	0x32, r1	; 50
			HIGH=B-A;
    110e:	80 91 b9 00 	lds	r24, 0x00B9
    1112:	90 91 ba 00 	lds	r25, 0x00BA
    1116:	68 1b       	sub	r22, r24
    1118:	79 0b       	sbc	r23, r25
    111a:	70 93 be 00 	sts	0x00BE, r23
    111e:	60 93 bd 00 	sts	0x00BD, r22
			DISTANCE=((34600*HIGH)/(F_CPU*2));
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	28 e2       	ldi	r18, 0x28	; 40
    1128:	37 e8       	ldi	r19, 0x87	; 135
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	0e 94 c5 09 	call	0x138a	; 0x138a <__mulsi3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	34 e2       	ldi	r19, 0x24	; 36
    1136:	44 ef       	ldi	r20, 0xF4	; 244
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__udivmodsi4>
    113e:	20 93 bb 00 	sts	0x00BB, r18
    1142:	30 93 bc 00 	sts	0x00BC, r19
		return DISTANCE;
	
	
    1146:	82 2f       	mov	r24, r18
    1148:	93 2f       	mov	r25, r19
    114a:	08 95       	ret

0000114c <__subsf3>:
    114c:	50 58       	subi	r21, 0x80	; 128

0000114e <__addsf3>:
    114e:	bb 27       	eor	r27, r27
    1150:	aa 27       	eor	r26, r26
    1152:	0e d0       	rcall	.+28     	; 0x1170 <__addsf3x>
    1154:	e0 c0       	rjmp	.+448    	; 0x1316 <__fp_round>
    1156:	d1 d0       	rcall	.+418    	; 0x12fa <__fp_pscA>
    1158:	30 f0       	brcs	.+12     	; 0x1166 <__addsf3+0x18>
    115a:	d6 d0       	rcall	.+428    	; 0x1308 <__fp_pscB>
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__addsf3+0x18>
    115e:	31 f4       	brne	.+12     	; 0x116c <__addsf3+0x1e>
    1160:	9f 3f       	cpi	r25, 0xFF	; 255
    1162:	11 f4       	brne	.+4      	; 0x1168 <__addsf3+0x1a>
    1164:	1e f4       	brtc	.+6      	; 0x116c <__addsf3+0x1e>
    1166:	c6 c0       	rjmp	.+396    	; 0x12f4 <__fp_nan>
    1168:	0e f4       	brtc	.+2      	; 0x116c <__addsf3+0x1e>
    116a:	e0 95       	com	r30
    116c:	e7 fb       	bst	r30, 7
    116e:	bc c0       	rjmp	.+376    	; 0x12e8 <__fp_inf>

00001170 <__addsf3x>:
    1170:	e9 2f       	mov	r30, r25
    1172:	e2 d0       	rcall	.+452    	; 0x1338 <__fp_split3>
    1174:	80 f3       	brcs	.-32     	; 0x1156 <__addsf3+0x8>
    1176:	ba 17       	cp	r27, r26
    1178:	62 07       	cpc	r22, r18
    117a:	73 07       	cpc	r23, r19
    117c:	84 07       	cpc	r24, r20
    117e:	95 07       	cpc	r25, r21
    1180:	18 f0       	brcs	.+6      	; 0x1188 <__addsf3x+0x18>
    1182:	71 f4       	brne	.+28     	; 0x11a0 <__addsf3x+0x30>
    1184:	9e f5       	brtc	.+102    	; 0x11ec <__addsf3x+0x7c>
    1186:	fa c0       	rjmp	.+500    	; 0x137c <__fp_zero>
    1188:	0e f4       	brtc	.+2      	; 0x118c <__addsf3x+0x1c>
    118a:	e0 95       	com	r30
    118c:	0b 2e       	mov	r0, r27
    118e:	ba 2f       	mov	r27, r26
    1190:	a0 2d       	mov	r26, r0
    1192:	0b 01       	movw	r0, r22
    1194:	b9 01       	movw	r22, r18
    1196:	90 01       	movw	r18, r0
    1198:	0c 01       	movw	r0, r24
    119a:	ca 01       	movw	r24, r20
    119c:	a0 01       	movw	r20, r0
    119e:	11 24       	eor	r1, r1
    11a0:	ff 27       	eor	r31, r31
    11a2:	59 1b       	sub	r21, r25
    11a4:	99 f0       	breq	.+38     	; 0x11cc <__addsf3x+0x5c>
    11a6:	59 3f       	cpi	r21, 0xF9	; 249
    11a8:	50 f4       	brcc	.+20     	; 0x11be <__addsf3x+0x4e>
    11aa:	50 3e       	cpi	r21, 0xE0	; 224
    11ac:	68 f1       	brcs	.+90     	; 0x1208 <__addsf3x+0x98>
    11ae:	1a 16       	cp	r1, r26
    11b0:	f0 40       	sbci	r31, 0x00	; 0
    11b2:	a2 2f       	mov	r26, r18
    11b4:	23 2f       	mov	r18, r19
    11b6:	34 2f       	mov	r19, r20
    11b8:	44 27       	eor	r20, r20
    11ba:	58 5f       	subi	r21, 0xF8	; 248
    11bc:	f3 cf       	rjmp	.-26     	; 0x11a4 <__addsf3x+0x34>
    11be:	46 95       	lsr	r20
    11c0:	37 95       	ror	r19
    11c2:	27 95       	ror	r18
    11c4:	a7 95       	ror	r26
    11c6:	f0 40       	sbci	r31, 0x00	; 0
    11c8:	53 95       	inc	r21
    11ca:	c9 f7       	brne	.-14     	; 0x11be <__addsf3x+0x4e>
    11cc:	7e f4       	brtc	.+30     	; 0x11ec <__addsf3x+0x7c>
    11ce:	1f 16       	cp	r1, r31
    11d0:	ba 0b       	sbc	r27, r26
    11d2:	62 0b       	sbc	r22, r18
    11d4:	73 0b       	sbc	r23, r19
    11d6:	84 0b       	sbc	r24, r20
    11d8:	ba f0       	brmi	.+46     	; 0x1208 <__addsf3x+0x98>
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	a1 f0       	breq	.+40     	; 0x1206 <__addsf3x+0x96>
    11de:	ff 0f       	add	r31, r31
    11e0:	bb 1f       	adc	r27, r27
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	c2 f7       	brpl	.-16     	; 0x11da <__addsf3x+0x6a>
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <__addsf3x+0x98>
    11ec:	ba 0f       	add	r27, r26
    11ee:	62 1f       	adc	r22, r18
    11f0:	73 1f       	adc	r23, r19
    11f2:	84 1f       	adc	r24, r20
    11f4:	48 f4       	brcc	.+18     	; 0x1208 <__addsf3x+0x98>
    11f6:	87 95       	ror	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f7 95       	ror	r31
    1200:	9e 3f       	cpi	r25, 0xFE	; 254
    1202:	08 f0       	brcs	.+2      	; 0x1206 <__addsf3x+0x96>
    1204:	b3 cf       	rjmp	.-154    	; 0x116c <__addsf3+0x1e>
    1206:	93 95       	inc	r25
    1208:	88 0f       	add	r24, r24
    120a:	08 f0       	brcs	.+2      	; 0x120e <__addsf3x+0x9e>
    120c:	99 27       	eor	r25, r25
    120e:	ee 0f       	add	r30, r30
    1210:	97 95       	ror	r25
    1212:	87 95       	ror	r24
    1214:	08 95       	ret

00001216 <__fixunssfsi>:
    1216:	98 d0       	rcall	.+304    	; 0x1348 <__fp_splitA>
    1218:	88 f0       	brcs	.+34     	; 0x123c <__fixunssfsi+0x26>
    121a:	9f 57       	subi	r25, 0x7F	; 127
    121c:	90 f0       	brcs	.+36     	; 0x1242 <__fixunssfsi+0x2c>
    121e:	b9 2f       	mov	r27, r25
    1220:	99 27       	eor	r25, r25
    1222:	b7 51       	subi	r27, 0x17	; 23
    1224:	a0 f0       	brcs	.+40     	; 0x124e <__fixunssfsi+0x38>
    1226:	d1 f0       	breq	.+52     	; 0x125c <__fixunssfsi+0x46>
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	1a f0       	brmi	.+6      	; 0x1238 <__fixunssfsi+0x22>
    1232:	ba 95       	dec	r27
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__fixunssfsi+0x12>
    1236:	12 c0       	rjmp	.+36     	; 0x125c <__fixunssfsi+0x46>
    1238:	b1 30       	cpi	r27, 0x01	; 1
    123a:	81 f0       	breq	.+32     	; 0x125c <__fixunssfsi+0x46>
    123c:	9f d0       	rcall	.+318    	; 0x137c <__fp_zero>
    123e:	b1 e0       	ldi	r27, 0x01	; 1
    1240:	08 95       	ret
    1242:	9c c0       	rjmp	.+312    	; 0x137c <__fp_zero>
    1244:	67 2f       	mov	r22, r23
    1246:	78 2f       	mov	r23, r24
    1248:	88 27       	eor	r24, r24
    124a:	b8 5f       	subi	r27, 0xF8	; 248
    124c:	39 f0       	breq	.+14     	; 0x125c <__fixunssfsi+0x46>
    124e:	b9 3f       	cpi	r27, 0xF9	; 249
    1250:	cc f3       	brlt	.-14     	; 0x1244 <__fixunssfsi+0x2e>
    1252:	86 95       	lsr	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b3 95       	inc	r27
    125a:	d9 f7       	brne	.-10     	; 0x1252 <__fixunssfsi+0x3c>
    125c:	3e f4       	brtc	.+14     	; 0x126c <__fixunssfsi+0x56>
    125e:	90 95       	com	r25
    1260:	80 95       	com	r24
    1262:	70 95       	com	r23
    1264:	61 95       	neg	r22
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	08 95       	ret

0000126e <__floatunsisf>:
    126e:	e8 94       	clt
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <__floatsisf+0x12>

00001272 <__floatsisf>:
    1272:	97 fb       	bst	r25, 7
    1274:	3e f4       	brtc	.+14     	; 0x1284 <__floatsisf+0x12>
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	99 23       	and	r25, r25
    1286:	a9 f0       	breq	.+42     	; 0x12b2 <__floatsisf+0x40>
    1288:	f9 2f       	mov	r31, r25
    128a:	96 e9       	ldi	r25, 0x96	; 150
    128c:	bb 27       	eor	r27, r27
    128e:	93 95       	inc	r25
    1290:	f6 95       	lsr	r31
    1292:	87 95       	ror	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	f1 11       	cpse	r31, r1
    129c:	f8 cf       	rjmp	.-16     	; 0x128e <__floatsisf+0x1c>
    129e:	fa f4       	brpl	.+62     	; 0x12de <__floatsisf+0x6c>
    12a0:	bb 0f       	add	r27, r27
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__floatsisf+0x36>
    12a4:	60 ff       	sbrs	r22, 0
    12a6:	1b c0       	rjmp	.+54     	; 0x12de <__floatsisf+0x6c>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	16 c0       	rjmp	.+44     	; 0x12de <__floatsisf+0x6c>
    12b2:	88 23       	and	r24, r24
    12b4:	11 f0       	breq	.+4      	; 0x12ba <__floatsisf+0x48>
    12b6:	96 e9       	ldi	r25, 0x96	; 150
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <__floatsisf+0x6a>
    12ba:	77 23       	and	r23, r23
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <__floatsisf+0x54>
    12be:	9e e8       	ldi	r25, 0x8E	; 142
    12c0:	87 2f       	mov	r24, r23
    12c2:	76 2f       	mov	r23, r22
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <__floatsisf+0x5e>
    12c6:	66 23       	and	r22, r22
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <__floatsisf+0x74>
    12ca:	96 e8       	ldi	r25, 0x86	; 134
    12cc:	86 2f       	mov	r24, r22
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	2a f0       	brmi	.+10     	; 0x12de <__floatsisf+0x6c>
    12d4:	9a 95       	dec	r25
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	da f7       	brpl	.-10     	; 0x12d4 <__floatsisf+0x62>
    12de:	88 0f       	add	r24, r24
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	97 f9       	bld	r25, 7
    12e6:	08 95       	ret

000012e8 <__fp_inf>:
    12e8:	97 f9       	bld	r25, 7
    12ea:	9f 67       	ori	r25, 0x7F	; 127
    12ec:	80 e8       	ldi	r24, 0x80	; 128
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <__fp_nan>:
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	80 ec       	ldi	r24, 0xC0	; 192
    12f8:	08 95       	ret

000012fa <__fp_pscA>:
    12fa:	00 24       	eor	r0, r0
    12fc:	0a 94       	dec	r0
    12fe:	16 16       	cp	r1, r22
    1300:	17 06       	cpc	r1, r23
    1302:	18 06       	cpc	r1, r24
    1304:	09 06       	cpc	r0, r25
    1306:	08 95       	ret

00001308 <__fp_pscB>:
    1308:	00 24       	eor	r0, r0
    130a:	0a 94       	dec	r0
    130c:	12 16       	cp	r1, r18
    130e:	13 06       	cpc	r1, r19
    1310:	14 06       	cpc	r1, r20
    1312:	05 06       	cpc	r0, r21
    1314:	08 95       	ret

00001316 <__fp_round>:
    1316:	09 2e       	mov	r0, r25
    1318:	03 94       	inc	r0
    131a:	00 0c       	add	r0, r0
    131c:	11 f4       	brne	.+4      	; 0x1322 <__fp_round+0xc>
    131e:	88 23       	and	r24, r24
    1320:	52 f0       	brmi	.+20     	; 0x1336 <__fp_round+0x20>
    1322:	bb 0f       	add	r27, r27
    1324:	40 f4       	brcc	.+16     	; 0x1336 <__fp_round+0x20>
    1326:	bf 2b       	or	r27, r31
    1328:	11 f4       	brne	.+4      	; 0x132e <__fp_round+0x18>
    132a:	60 ff       	sbrs	r22, 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <__fp_round+0x20>
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	08 95       	ret

00001338 <__fp_split3>:
    1338:	57 fd       	sbrc	r21, 7
    133a:	90 58       	subi	r25, 0x80	; 128
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	59 f0       	breq	.+22     	; 0x1358 <__fp_splitA+0x10>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	71 f0       	breq	.+28     	; 0x1362 <__fp_splitA+0x1a>
    1346:	47 95       	ror	r20

00001348 <__fp_splitA>:
    1348:	88 0f       	add	r24, r24
    134a:	97 fb       	bst	r25, 7
    134c:	99 1f       	adc	r25, r25
    134e:	61 f0       	breq	.+24     	; 0x1368 <__fp_splitA+0x20>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	79 f0       	breq	.+30     	; 0x1372 <__fp_splitA+0x2a>
    1354:	87 95       	ror	r24
    1356:	08 95       	ret
    1358:	12 16       	cp	r1, r18
    135a:	13 06       	cpc	r1, r19
    135c:	14 06       	cpc	r1, r20
    135e:	55 1f       	adc	r21, r21
    1360:	f2 cf       	rjmp	.-28     	; 0x1346 <__fp_split3+0xe>
    1362:	46 95       	lsr	r20
    1364:	f1 df       	rcall	.-30     	; 0x1348 <__fp_splitA>
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <__fp_splitA+0x30>
    1368:	16 16       	cp	r1, r22
    136a:	17 06       	cpc	r1, r23
    136c:	18 06       	cpc	r1, r24
    136e:	99 1f       	adc	r25, r25
    1370:	f1 cf       	rjmp	.-30     	; 0x1354 <__fp_splitA+0xc>
    1372:	86 95       	lsr	r24
    1374:	71 05       	cpc	r23, r1
    1376:	61 05       	cpc	r22, r1
    1378:	08 94       	sec
    137a:	08 95       	ret

0000137c <__fp_zero>:
    137c:	e8 94       	clt

0000137e <__fp_szero>:
    137e:	bb 27       	eor	r27, r27
    1380:	66 27       	eor	r22, r22
    1382:	77 27       	eor	r23, r23
    1384:	cb 01       	movw	r24, r22
    1386:	97 f9       	bld	r25, 7
    1388:	08 95       	ret

0000138a <__mulsi3>:
    138a:	62 9f       	mul	r22, r18
    138c:	d0 01       	movw	r26, r0
    138e:	73 9f       	mul	r23, r19
    1390:	f0 01       	movw	r30, r0
    1392:	82 9f       	mul	r24, r18
    1394:	e0 0d       	add	r30, r0
    1396:	f1 1d       	adc	r31, r1
    1398:	64 9f       	mul	r22, r20
    139a:	e0 0d       	add	r30, r0
    139c:	f1 1d       	adc	r31, r1
    139e:	92 9f       	mul	r25, r18
    13a0:	f0 0d       	add	r31, r0
    13a2:	83 9f       	mul	r24, r19
    13a4:	f0 0d       	add	r31, r0
    13a6:	74 9f       	mul	r23, r20
    13a8:	f0 0d       	add	r31, r0
    13aa:	65 9f       	mul	r22, r21
    13ac:	f0 0d       	add	r31, r0
    13ae:	99 27       	eor	r25, r25
    13b0:	72 9f       	mul	r23, r18
    13b2:	b0 0d       	add	r27, r0
    13b4:	e1 1d       	adc	r30, r1
    13b6:	f9 1f       	adc	r31, r25
    13b8:	63 9f       	mul	r22, r19
    13ba:	b0 0d       	add	r27, r0
    13bc:	e1 1d       	adc	r30, r1
    13be:	f9 1f       	adc	r31, r25
    13c0:	bd 01       	movw	r22, r26
    13c2:	cf 01       	movw	r24, r30
    13c4:	11 24       	eor	r1, r1
    13c6:	08 95       	ret

000013c8 <__divmodhi4>:
    13c8:	97 fb       	bst	r25, 7
    13ca:	09 2e       	mov	r0, r25
    13cc:	07 26       	eor	r0, r23
    13ce:	0a d0       	rcall	.+20     	; 0x13e4 <__divmodhi4_neg1>
    13d0:	77 fd       	sbrc	r23, 7
    13d2:	04 d0       	rcall	.+8      	; 0x13dc <__divmodhi4_neg2>
    13d4:	2e d0       	rcall	.+92     	; 0x1432 <__udivmodhi4>
    13d6:	06 d0       	rcall	.+12     	; 0x13e4 <__divmodhi4_neg1>
    13d8:	00 20       	and	r0, r0
    13da:	1a f4       	brpl	.+6      	; 0x13e2 <__divmodhi4_exit>

000013dc <__divmodhi4_neg2>:
    13dc:	70 95       	com	r23
    13de:	61 95       	neg	r22
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255

000013e2 <__divmodhi4_exit>:
    13e2:	08 95       	ret

000013e4 <__divmodhi4_neg1>:
    13e4:	f6 f7       	brtc	.-4      	; 0x13e2 <__divmodhi4_exit>
    13e6:	90 95       	com	r25
    13e8:	81 95       	neg	r24
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__udivmodsi4>:
    13ee:	a1 e2       	ldi	r26, 0x21	; 33
    13f0:	1a 2e       	mov	r1, r26
    13f2:	aa 1b       	sub	r26, r26
    13f4:	bb 1b       	sub	r27, r27
    13f6:	fd 01       	movw	r30, r26
    13f8:	0d c0       	rjmp	.+26     	; 0x1414 <__udivmodsi4_ep>

000013fa <__udivmodsi4_loop>:
    13fa:	aa 1f       	adc	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	ee 1f       	adc	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	a2 17       	cp	r26, r18
    1404:	b3 07       	cpc	r27, r19
    1406:	e4 07       	cpc	r30, r20
    1408:	f5 07       	cpc	r31, r21
    140a:	20 f0       	brcs	.+8      	; 0x1414 <__udivmodsi4_ep>
    140c:	a2 1b       	sub	r26, r18
    140e:	b3 0b       	sbc	r27, r19
    1410:	e4 0b       	sbc	r30, r20
    1412:	f5 0b       	sbc	r31, r21

00001414 <__udivmodsi4_ep>:
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	1a 94       	dec	r1
    141e:	69 f7       	brne	.-38     	; 0x13fa <__udivmodsi4_loop>
    1420:	60 95       	com	r22
    1422:	70 95       	com	r23
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	9b 01       	movw	r18, r22
    142a:	ac 01       	movw	r20, r24
    142c:	bd 01       	movw	r22, r26
    142e:	cf 01       	movw	r24, r30
    1430:	08 95       	ret

00001432 <__udivmodhi4>:
    1432:	aa 1b       	sub	r26, r26
    1434:	bb 1b       	sub	r27, r27
    1436:	51 e1       	ldi	r21, 0x11	; 17
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <__udivmodhi4_ep>

0000143a <__udivmodhi4_loop>:
    143a:	aa 1f       	adc	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	a6 17       	cp	r26, r22
    1440:	b7 07       	cpc	r27, r23
    1442:	10 f0       	brcs	.+4      	; 0x1448 <__udivmodhi4_ep>
    1444:	a6 1b       	sub	r26, r22
    1446:	b7 0b       	sbc	r27, r23

00001448 <__udivmodhi4_ep>:
    1448:	88 1f       	adc	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	5a 95       	dec	r21
    144e:	a9 f7       	brne	.-22     	; 0x143a <__udivmodhi4_loop>
    1450:	80 95       	com	r24
    1452:	90 95       	com	r25
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	08 95       	ret

0000145a <_exit>:
    145a:	f8 94       	cli

0000145c <__stop_program>:
    145c:	ff cf       	rjmp	.-2      	; 0x145c <__stop_program>
